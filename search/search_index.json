{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Vu Tang's Docs Site * Quote by Paulo Coelho , the author of \"The Alchemist\" This documentation was built by Mkdocs. For information please see at About me . Document Tree General Technote Mkdocs Tool : User guide & how to use Github Page to publish a page with Mkdocs. Markdown Language : Markdown syntax what is used in this document Books & Materials Notes when reading books or some materials Embedded Linux System Development Version Control : Introduction to Version Control and popular version control. Makefile : Definition & Syntax Linux Device Driver Overview about LDD. SPI Driver Developement. FPGA Static Timing Analysis : basic deffinition and STA in Xilinx Vivado. Projects Zedboard : projects are implemented in zedboard platform. Document Rules Suitable picture size is: 300x200. Use GIMP for scaling figure (Folow instructions in Photos/ResizingPhotos from help.ubuntu.com). This document is writen in both Vietnamese and English.","title":"Preface"},{"location":"#welcome-to-vu-tangs-docs-site","text":"* Quote by Paulo Coelho , the author of \"The Alchemist\" This documentation was built by Mkdocs. For information please see at About me .","title":"Welcome to Vu Tang's Docs Site"},{"location":"#document-tree","text":"","title":"Document Tree"},{"location":"#general-technote","text":"Mkdocs Tool : User guide & how to use Github Page to publish a page with Mkdocs. Markdown Language : Markdown syntax what is used in this document","title":"General Technote"},{"location":"#books-materials","text":"Notes when reading books or some materials","title":"Books &amp; Materials"},{"location":"#embedded-linux-system-development","text":"Version Control : Introduction to Version Control and popular version control. Makefile : Definition & Syntax","title":"Embedded Linux System Development"},{"location":"#linux-device-driver","text":"Overview about LDD. SPI Driver Developement.","title":"Linux Device Driver"},{"location":"#fpga","text":"Static Timing Analysis : basic deffinition and STA in Xilinx Vivado.","title":"FPGA"},{"location":"#projects","text":"Zedboard : projects are implemented in zedboard platform.","title":"Projects"},{"location":"#document-rules","text":"Suitable picture size is: 300x200. Use GIMP for scaling figure (Folow instructions in Photos/ResizingPhotos from help.ubuntu.com). This document is writen in both Vietnamese and English.","title":"Document Rules"},{"location":"whatnext/","text":"To do Documentation: Markdown, Mkdocs, YAML Consider which online storage service will be used (Google drive or One drive) Update notes in one drive Coding and Algorithm: Reading books Hacker Rank Learning Python from Codecademy Linux Linux Device Driver: platform device, spi/i2c device, ethernet device Books","title":"What's next"},{"location":"whatnext/#to-do","text":"Documentation: Markdown, Mkdocs, YAML Consider which online storage service will be used (Google drive or One drive) Update notes in one drive Coding and Algorithm: Reading books Hacker Rank Learning Python from Codecademy Linux Linux Device Driver: platform device, spi/i2c device, ethernet device","title":"To do"},{"location":"whatnext/#books","text":"","title":"Books"},{"location":"about/about/","text":"Personal information Vu Tang Linked in: https://linkedin.com/in/vu-tang Embedded Software Engineer at Viettel Network Technologies Center Contact Email: tangvubk@gmail.com","title":"About me"},{"location":"about/about/#personal-information","text":"Vu Tang Linked in: https://linkedin.com/in/vu-tang Embedded Software Engineer at Viettel Network Technologies Center","title":"Personal information"},{"location":"about/about/#contact","text":"Email: tangvubk@gmail.com","title":"Contact"},{"location":"bookmarks/bookmarks/","text":"Linux website The Linux Foundation - https://www.linuxfoundation.org/ The Linux Document Project - http://wiki.tldp.org/ https://lwn.net/ Blogs Sciences & Technologies in the World - Blogs of Prof. John Vu, Carnegie Mellon University. \"Journey to the East\" translator (Nguyen Phong). This page is useful to learning English. Shichao's Notes - I found the idea to create this documatation from this page. Tutorial Series on Linux Device Driver - EmbeTronicX In this docs, technical skills such as: muxtex, spinlock, workqueue have been introduced. Linux Device Drivers Series - OpenSourceForU.com Materials The Linux Kernel Documentation Buildroot-vs-Yocto-Differences-for-Your-Daily-Job-Luca-Ceresoli-AIM-Sportline - https://events.linuxfoundation.org Course Computer Science: Algorithms, Theory, and Machines - Coursera Compyter Science Path - Codecademy Learning about Python Language","title":"Bookmarks"},{"location":"bookmarks/bookmarks/#linux-website","text":"The Linux Foundation - https://www.linuxfoundation.org/ The Linux Document Project - http://wiki.tldp.org/ https://lwn.net/","title":"Linux website"},{"location":"bookmarks/bookmarks/#blogs","text":"Sciences & Technologies in the World - Blogs of Prof. John Vu, Carnegie Mellon University. \"Journey to the East\" translator (Nguyen Phong). This page is useful to learning English. Shichao's Notes - I found the idea to create this documatation from this page.","title":"Blogs"},{"location":"bookmarks/bookmarks/#tutorial","text":"Series on Linux Device Driver - EmbeTronicX In this docs, technical skills such as: muxtex, spinlock, workqueue have been introduced. Linux Device Drivers Series - OpenSourceForU.com","title":"Tutorial"},{"location":"bookmarks/bookmarks/#materials","text":"The Linux Kernel Documentation Buildroot-vs-Yocto-Differences-for-Your-Daily-Job-Luca-Ceresoli-AIM-Sportline - https://events.linuxfoundation.org","title":"Materials"},{"location":"bookmarks/bookmarks/#course","text":"Computer Science: Algorithms, Theory, and Machines - Coursera Compyter Science Path - Codecademy Learning about Python Language","title":"Course"},{"location":"books/c_books/","text":"C programming Books - Language Head first C Author: David & Dawn Griffiths Download Sams Teach Yourself C in 21 Days Bradley L. Jones and Peter Aitken The C Programming Language - 2nd BRIAN W KERNIGHANDENNIS M. RITCHIE Books - Data structure Data struture using C - Reema Thareja - 2nd Sugesstion from https://www.quora.com/What-are-the-best-books-on-algorithms-and-data-structures Data Structures using C (Tenenbaum) \u2014 Older but incredibly insightful Online Data Structures - GeeksforGeeks","title":"C Programing"},{"location":"books/c_books/#c-programming","text":"","title":"C programming"},{"location":"books/c_books/#books-language","text":"","title":"Books - Language"},{"location":"books/c_books/#head-first-c","text":"Author: David & Dawn Griffiths Download","title":"Head first C"},{"location":"books/c_books/#sams-teach-yourself-c-in-21-days","text":"Bradley L. Jones and Peter Aitken","title":"Sams Teach Yourself C in 21 Days"},{"location":"books/c_books/#the-c-programming-language-2nd","text":"BRIAN W KERNIGHANDENNIS M. RITCHIE","title":"The C Programming Language - 2nd"},{"location":"books/c_books/#books-data-structure","text":"","title":"Books - Data structure"},{"location":"books/c_books/#data-struture-using-c-reema-thareja-2nd","text":"Sugesstion from https://www.quora.com/What-are-the-best-books-on-algorithms-and-data-structures","title":"Data struture using C - Reema Thareja - 2nd"},{"location":"books/c_books/#data-structures-using-c-tenenbaum-older-but-incredibly-insightful","text":"","title":"Data Structures using C (Tenenbaum) \u2014 Older but incredibly insightful"},{"location":"books/c_books/#online","text":"","title":"Online"},{"location":"books/c_books/#data-structures-geeksforgeeks","text":"","title":"Data Structures - GeeksforGeeks"},{"location":"books/device_driver/","text":"Linux Device Driver - 3rd Jonathan Corbet, AlessandroRubini, and Greg Kroah-Hartman","title":"Linux Device Driver"},{"location":"books/device_driver/#linux-device-driver-3rd","text":"Jonathan Corbet, AlessandroRubini, and Greg Kroah-Hartman","title":"Linux Device Driver - 3rd"},{"location":"books/es_linux/","text":"Embedded Linux kernel and driver development Technote - Slides Michael Opdenacker - Free Electrons","title":"Linux Embedded"},{"location":"books/es_linux/#embedded-linux-kernel-and-driver-development","text":"Technote - Slides Michael Opdenacker - Free Electrons","title":"Embedded Linux kernel and driver development"},{"location":"books/ldd3/","text":"This is note for LDD3","title":"Ldd3"},{"location":"books/linux/","text":"Linux in a Nutshell - A Desktop Quick Reference A Pratice Guide to Ubuntu Linux - Mark G. Sobell The Linux Programming Interface - Michael Kerrisk","title":"Linux Programing"},{"location":"books/linux/#linux-in-a-nutshell-a-desktop-quick-reference","text":"","title":"Linux in a Nutshell - A Desktop Quick Reference"},{"location":"books/linux/#a-pratice-guide-to-ubuntu-linux-mark-g-sobell","text":"","title":"A Pratice Guide to Ubuntu Linux - Mark G. Sobell"},{"location":"books/linux/#the-linux-programming-interface-michael-kerrisk","text":"","title":"The Linux Programming Interface - Michael Kerrisk"},{"location":"books/linux_kernel/","text":"Understanding The Linux Kernel","title":"Linux Kernel"},{"location":"books/linux_kernel/#understanding-the-linux-kernel","text":"","title":"Understanding The Linux Kernel"},{"location":"books/others/","text":"The Art of Computer Programming","title":"Others"},{"location":"books/others/#the-art-of-computer-programming","text":"","title":"The Art of Computer Programming"},{"location":"books/tlpi/","text":"The Linux Programming Interaface C20: Signal - fundametal concepts \u0110\u1ecbnh ngh\u0129a Signal l\u00e0 t\u00edn hi\u1ec7u Kernel s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1eedi \u0111\u1ebfn cho m\u1ed9t process, ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t t\u00edn hi\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb m\u1ed9t process sang process kh\u00e1c. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, process c\u00f3 th\u1ec3 g\u1eedi \"signal\" \u0111\u1ebfn ch\u00ednh n\u00f3. Qu\u00e1 tr\u00ecnh \"send\" m\u1ed9t signal \u0111\u01b0\u1ee3c \"response\" b\u1edfi process b\u1eb1ng m\u1ed9t lo\u1ea1t c\u00e1c h\u00e0nh \u0111\u1ed9ng, g\u1ecdi l\u00e0 \"signal reactions\". Signal \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng c\u00e1c s\u1ed1 nguy\u00ean trong signal.h. M\u1ed9t s\u1ed1 c\u00e1c signal \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a m\u1eb7c \u0111\u1ecbnh c\u00e1c \"reaction\". C\u00e1c reaction n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a l\u1ea1i b\u1eb1ng c\u00e1c \"user signal handler\" b\u1edfi programmer -> ho\u1ea1t \u0111\u1ed9ng n\u00e0y g\u1ecdi l\u00e0 \"disposition\". G\u1eedi signal b\u1eb1ng \"kill\" system call C\u01a1 b\u1ea3n, kill() c\u00f3 th\u1ec3 g\u1eedi m\u1ed9t t\u00edn hi\u1ec7u b\u1ea5t k\u00ec \u0111\u1ebfn m\u1ed9t ho\u1eb7c m\u1ed9t nh\u00f3m process. Nh\u01b0ng t\u1ea1i sao l\u1ea1i \u0111\u01b0\u1ee3c \u0111\u1eb7t t\u00ean l\u00e0 kill()? C24: Process Creation The fork() creates a new process, the child , which is an almost exact duplicate of the calling process, the parent . Conceptually, we can consider fork() as creating copies of the parent\u2019s text, data, heap, and stack segments -> Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, qu\u00e1 tr\u00ecnh copy to\u00e0n b\u1ed9 d\u1eef li\u1ec7u n\u00e0y s\u1ebd wasteful . \u0110\u1eb7c bi\u1ec7t khi child process g\u1ecdi \u0111\u1ebfn c\u00e1c h\u00e0m exec() , exec() ti\u1ebfn h\u00e0nh thay th\u1ebf to\u00e0n b\u1ed9 c\u00e1c v\u00f9ng nh\u1edb c\u1ee7a parrent process b\u1eb1ng v\u00f9ng nh\u1edb m\u1edbi -> xu\u1ea5t hi\u1ec7n k\u1ef9 thu\u1eadt copy-and-write trong qu\u00e1 tr\u00ecnh copy d\u1eef li\u1ec7u. Ngo\u00e0i ra, \u0111\u1ec3 tr\u00e1nh l\u00e3ng ph\u00ed trong qu\u00e1 tr\u00ecnh copy d\u1eef li\u1ec7u, system call vfork() m\u1edbi \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n, \u0111\u1eb7c bi\u1ec7t s\u1eed d\u1ee5ng trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p child process g\u1ecdi \u0111\u1ebfn exec() . Two features distinguish the vfork() system call from fork() and make it more efficient: No duplication of virtual memory pages or page tables is done for the child process. Instead, the child shares the parent\u2019s memory until it either performs a successful exec() or calls _exit() to terminate. Execution of the parent process is suspended until the child has performed an exec() or _exit(). C25: Process Termination There are two ways to terminate a process Abnormal : a termination signal is sent to process. Normal : process calls _exit() itself. _exit() l\u00e0 h\u00e0m \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong th\u01b0 vi\u1ec7n chu\u1ea9n C, tr\u1ef1c ti\u1ebfp g\u1ecdi \u0111\u1ebfn c\u00e1c h\u00e0m termination process c\u1ee7a Linux. Exit status Refer Exit Status in gnu.org. EXIT_SUCCESS & EXIT_FAILURE \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong stdlib.h \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0 c\u00e1c gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 khi terminate m\u1ed9t process. _exit() vs exit() Trong m\u1ed9t s\u1ed1 ch\u01b0\u01a1ng tr\u00ecnh b\u00ecnh th\u01b0\u1eddng, _exit() kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi tr\u1ef1c ti\u1ebfp m\u00e0 \u0111\u01b0\u1ee3c g\u1ecdi th\u00f4ng quan exit() . V\u1ec1 c\u01a1 b\u1ea3n, exit() th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 t\u00e1c v\u1ee5 tr\u01b0\u1edbc khi g\u1ecdi _exit() v\u00ed d\u1ee5 nh\u01b0: flush out stdio buffer. exit() vs return n Vi\u1ec7c g\u1ecdi \u0111\u1ebfn h\u00e0m return n trong h\u00e0m main() t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi qu\u00e1 tr\u00ecnh g\u1ecdi \u0111\u1ebfn exit() . C26: Monitoring Child Processes Wait for child process(es) The system call wait() waits for one of the children of the calling process to terminate and returns the termination status of that child in the buffer pointed to by status. wait() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ch\u1edd t\u1ea5t c\u1ea3 c\u00e1c child process terminate. Tr\u01b0\u1eddng h\u1ee3p th\u00e0nh c\u00f4ng wait() tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb PID c\u1ee7a child process v\u1eeba m\u1edbi terminate vaf tr\u1ea3 v\u1ec1 -1 trong tr\u01b0\u1eddng h\u1ee3p l\u1ed7i, bao g\u1ed3m c\u00e1c tr\u01b0\u1eddng h\u1ee3p l\u1ed7i sau: Kh\u00f4ng c\u00f2n m\u1ed9t child process n\u00e0o \u0111ang t\u1ed3n t\u1ea1i. Khi \u0111\u00f3 ECHILD \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp cho errno -> \u0111\u1eb7c \u0111i\u1ec3m n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 monitor t\u1ea5t c\u1ea3 c\u00e1c child process b\u1eb1ng \u0111o\u1ea1n m\u00e3 d\u01b0\u1edbi \u0111\u00e2y: while ((childPid = wait(NULL)) != -1) continue; if (errno != ECHILD) /* An unexpected error... */ errExit(\"wait\"); Unexpected Error Trong tr\u01b0\u1eddng h\u1ee3p c\u00e1c child processes c\u00f9ng terminate m\u1ed9t th\u1eddi \u0111i\u1ec3m, th\u1ee9 t\u1ef1 tr\u1ea3 v\u1ec1 c\u1ee7a wait() l\u00e0 kh\u00f4ng x\u00e1c \u0111\u1ecbnh. Wait for specific child process wait() c\u00f3 m\u1ed9t s\u1ed1 gi\u1edbi h\u1ea1n, trong \u0111\u00f3 kh\u00f4ng th\u1ec3 ch\u1edd m\u1ed9t child process x\u00e1c \u0111\u1ecbnh. waitpid() \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c \u0111i\u1ec1u \u0111\u00f3. pid_t waitpid(pid_t pid, int *status, int options); Trong tr\u01b0\u1eddng h\u1ee3p tham s\u1ed1 pid \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp l\u00e0 -1 th\u00ec waitpid() t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi wait() . Orphans and Zombies M\u1ed9t child process \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Orphaned khi parrent c\u1ee7a process \u0111\u00f3 terminate tr\u01b0\u1edbc. Khi \u0111\u00f3 \"orphaned child\" \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi init process. Zombie l\u00e0 tr\u1ea1ng th\u00e1i c\u1ee7a m\u1ed9t child process trong tr\u01b0\u1eddng h\u1ee3p process \u0111\u00f3 terminate nh\u01b0ng parrent process ch\u01b0a k\u1ecbp g\u1ecdi \u0111\u1ebfn wait() . Sau khi terminate, c\u00e1c t\u00e0i nguy\u00ean c\u1ee7a child \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng nh\u01b0ng th\u00f4ng tin v\u1ec1 process \u0111\u00f3 v\u1eabn t\u1ed3n t\u1ea1i trong Kernel's process table cho \u0111\u1ebfn khi parrent g\u1ecdi \u0111\u1ebfn wait() . Khi c\u00f3 qu\u00e1 nhi\u1ec1u \"zombie process\" trong h\u1ec7 th\u00f4ng s\u1ebd l\u00e0m \u0111\u1ea7y Kernel's process table v\u00e0 c\u00f3 th\u1ec3 c\u1ea3n tr\u1edf qu\u00e1 tr\u00ecnh t\u1ea1o m\u1edbi m\u1ed9t process. Do \"zombie process\" kh\u00f4ng th\u1ec3 b\u1ecb kill b\u1edfi c\u00e1c signal n\u00ean qu\u00e1 tr\u00ecnh lo\u1ea1i b\u1ecf c\u00e1c process n\u00e0y ph\u1ea3i ch\u1edd \u0111\u1ebfn khi parrent process exit. Khi \u0111\u00f3, init process ti\u1ebfp nh\u1eadn c\u00e1c zombie n\u00e0y nh\u01b0 c\u00e1c \"orphaned process\" v\u00e0 ti\u1ebfn h\u00e0nh terminate (*). *But how init kill zombies? C29: Threads - Introduction","title":"The Linux Programming Interaface"},{"location":"books/tlpi/#the-linux-programming-interaface","text":"","title":"The Linux Programming Interaface"},{"location":"books/tlpi/#c20-signal-fundametal-concepts","text":"\u0110\u1ecbnh ngh\u0129a Signal l\u00e0 t\u00edn hi\u1ec7u Kernel s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1eedi \u0111\u1ebfn cho m\u1ed9t process, ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t t\u00edn hi\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb m\u1ed9t process sang process kh\u00e1c. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, process c\u00f3 th\u1ec3 g\u1eedi \"signal\" \u0111\u1ebfn ch\u00ednh n\u00f3. Qu\u00e1 tr\u00ecnh \"send\" m\u1ed9t signal \u0111\u01b0\u1ee3c \"response\" b\u1edfi process b\u1eb1ng m\u1ed9t lo\u1ea1t c\u00e1c h\u00e0nh \u0111\u1ed9ng, g\u1ecdi l\u00e0 \"signal reactions\". Signal \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u b\u1eb1ng c\u00e1c s\u1ed1 nguy\u00ean trong signal.h. M\u1ed9t s\u1ed1 c\u00e1c signal \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a m\u1eb7c \u0111\u1ecbnh c\u00e1c \"reaction\". C\u00e1c reaction n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a l\u1ea1i b\u1eb1ng c\u00e1c \"user signal handler\" b\u1edfi programmer -> ho\u1ea1t \u0111\u1ed9ng n\u00e0y g\u1ecdi l\u00e0 \"disposition\". G\u1eedi signal b\u1eb1ng \"kill\" system call C\u01a1 b\u1ea3n, kill() c\u00f3 th\u1ec3 g\u1eedi m\u1ed9t t\u00edn hi\u1ec7u b\u1ea5t k\u00ec \u0111\u1ebfn m\u1ed9t ho\u1eb7c m\u1ed9t nh\u00f3m process. Nh\u01b0ng t\u1ea1i sao l\u1ea1i \u0111\u01b0\u1ee3c \u0111\u1eb7t t\u00ean l\u00e0 kill()?","title":"C20: Signal - fundametal concepts"},{"location":"books/tlpi/#c24-process-creation","text":"The fork() creates a new process, the child , which is an almost exact duplicate of the calling process, the parent . Conceptually, we can consider fork() as creating copies of the parent\u2019s text, data, heap, and stack segments -> Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, qu\u00e1 tr\u00ecnh copy to\u00e0n b\u1ed9 d\u1eef li\u1ec7u n\u00e0y s\u1ebd wasteful . \u0110\u1eb7c bi\u1ec7t khi child process g\u1ecdi \u0111\u1ebfn c\u00e1c h\u00e0m exec() , exec() ti\u1ebfn h\u00e0nh thay th\u1ebf to\u00e0n b\u1ed9 c\u00e1c v\u00f9ng nh\u1edb c\u1ee7a parrent process b\u1eb1ng v\u00f9ng nh\u1edb m\u1edbi -> xu\u1ea5t hi\u1ec7n k\u1ef9 thu\u1eadt copy-and-write trong qu\u00e1 tr\u00ecnh copy d\u1eef li\u1ec7u. Ngo\u00e0i ra, \u0111\u1ec3 tr\u00e1nh l\u00e3ng ph\u00ed trong qu\u00e1 tr\u00ecnh copy d\u1eef li\u1ec7u, system call vfork() m\u1edbi \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n, \u0111\u1eb7c bi\u1ec7t s\u1eed d\u1ee5ng trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p child process g\u1ecdi \u0111\u1ebfn exec() . Two features distinguish the vfork() system call from fork() and make it more efficient: No duplication of virtual memory pages or page tables is done for the child process. Instead, the child shares the parent\u2019s memory until it either performs a successful exec() or calls _exit() to terminate. Execution of the parent process is suspended until the child has performed an exec() or _exit().","title":"C24: Process Creation"},{"location":"books/tlpi/#c25-process-termination","text":"There are two ways to terminate a process Abnormal : a termination signal is sent to process. Normal : process calls _exit() itself. _exit() l\u00e0 h\u00e0m \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong th\u01b0 vi\u1ec7n chu\u1ea9n C, tr\u1ef1c ti\u1ebfp g\u1ecdi \u0111\u1ebfn c\u00e1c h\u00e0m termination process c\u1ee7a Linux. Exit status Refer Exit Status in gnu.org. EXIT_SUCCESS & EXIT_FAILURE \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong stdlib.h \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0 c\u00e1c gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 khi terminate m\u1ed9t process. _exit() vs exit() Trong m\u1ed9t s\u1ed1 ch\u01b0\u01a1ng tr\u00ecnh b\u00ecnh th\u01b0\u1eddng, _exit() kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi tr\u1ef1c ti\u1ebfp m\u00e0 \u0111\u01b0\u1ee3c g\u1ecdi th\u00f4ng quan exit() . V\u1ec1 c\u01a1 b\u1ea3n, exit() th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 t\u00e1c v\u1ee5 tr\u01b0\u1edbc khi g\u1ecdi _exit() v\u00ed d\u1ee5 nh\u01b0: flush out stdio buffer. exit() vs return n Vi\u1ec7c g\u1ecdi \u0111\u1ebfn h\u00e0m return n trong h\u00e0m main() t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi qu\u00e1 tr\u00ecnh g\u1ecdi \u0111\u1ebfn exit() .","title":"C25: Process Termination"},{"location":"books/tlpi/#c26-monitoring-child-processes","text":"Wait for child process(es) The system call wait() waits for one of the children of the calling process to terminate and returns the termination status of that child in the buffer pointed to by status. wait() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ch\u1edd t\u1ea5t c\u1ea3 c\u00e1c child process terminate. Tr\u01b0\u1eddng h\u1ee3p th\u00e0nh c\u00f4ng wait() tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb PID c\u1ee7a child process v\u1eeba m\u1edbi terminate vaf tr\u1ea3 v\u1ec1 -1 trong tr\u01b0\u1eddng h\u1ee3p l\u1ed7i, bao g\u1ed3m c\u00e1c tr\u01b0\u1eddng h\u1ee3p l\u1ed7i sau: Kh\u00f4ng c\u00f2n m\u1ed9t child process n\u00e0o \u0111ang t\u1ed3n t\u1ea1i. Khi \u0111\u00f3 ECHILD \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp cho errno -> \u0111\u1eb7c \u0111i\u1ec3m n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 monitor t\u1ea5t c\u1ea3 c\u00e1c child process b\u1eb1ng \u0111o\u1ea1n m\u00e3 d\u01b0\u1edbi \u0111\u00e2y: while ((childPid = wait(NULL)) != -1) continue; if (errno != ECHILD) /* An unexpected error... */ errExit(\"wait\"); Unexpected Error Trong tr\u01b0\u1eddng h\u1ee3p c\u00e1c child processes c\u00f9ng terminate m\u1ed9t th\u1eddi \u0111i\u1ec3m, th\u1ee9 t\u1ef1 tr\u1ea3 v\u1ec1 c\u1ee7a wait() l\u00e0 kh\u00f4ng x\u00e1c \u0111\u1ecbnh. Wait for specific child process wait() c\u00f3 m\u1ed9t s\u1ed1 gi\u1edbi h\u1ea1n, trong \u0111\u00f3 kh\u00f4ng th\u1ec3 ch\u1edd m\u1ed9t child process x\u00e1c \u0111\u1ecbnh. waitpid() \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c \u0111i\u1ec1u \u0111\u00f3. pid_t waitpid(pid_t pid, int *status, int options); Trong tr\u01b0\u1eddng h\u1ee3p tham s\u1ed1 pid \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp l\u00e0 -1 th\u00ec waitpid() t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi wait() . Orphans and Zombies M\u1ed9t child process \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Orphaned khi parrent c\u1ee7a process \u0111\u00f3 terminate tr\u01b0\u1edbc. Khi \u0111\u00f3 \"orphaned child\" \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi init process. Zombie l\u00e0 tr\u1ea1ng th\u00e1i c\u1ee7a m\u1ed9t child process trong tr\u01b0\u1eddng h\u1ee3p process \u0111\u00f3 terminate nh\u01b0ng parrent process ch\u01b0a k\u1ecbp g\u1ecdi \u0111\u1ebfn wait() . Sau khi terminate, c\u00e1c t\u00e0i nguy\u00ean c\u1ee7a child \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng nh\u01b0ng th\u00f4ng tin v\u1ec1 process \u0111\u00f3 v\u1eabn t\u1ed3n t\u1ea1i trong Kernel's process table cho \u0111\u1ebfn khi parrent g\u1ecdi \u0111\u1ebfn wait() . Khi c\u00f3 qu\u00e1 nhi\u1ec1u \"zombie process\" trong h\u1ec7 th\u00f4ng s\u1ebd l\u00e0m \u0111\u1ea7y Kernel's process table v\u00e0 c\u00f3 th\u1ec3 c\u1ea3n tr\u1edf qu\u00e1 tr\u00ecnh t\u1ea1o m\u1edbi m\u1ed9t process. Do \"zombie process\" kh\u00f4ng th\u1ec3 b\u1ecb kill b\u1edfi c\u00e1c signal n\u00ean qu\u00e1 tr\u00ecnh lo\u1ea1i b\u1ecf c\u00e1c process n\u00e0y ph\u1ea3i ch\u1edd \u0111\u1ebfn khi parrent process exit. Khi \u0111\u00f3, init process ti\u1ebfp nh\u1eadn c\u00e1c zombie n\u00e0y nh\u01b0 c\u00e1c \"orphaned process\" v\u00e0 ti\u1ebfn h\u00e0nh terminate (*). *But how init kill zombies?","title":"C26: Monitoring Child Processes"},{"location":"books/tlpi/#c29-threads-introduction","text":"","title":"C29: Threads - Introduction"},{"location":"books/utlk/","text":"This note for Understanding The Linux Kernel","title":"Utlk"},{"location":"books/cbooks/head_first_c/","text":"Chapter 2: Memory and Pointer Use printf(\"%p\", pointer); to print a pointer Explain in easy-way to understand about Stack & Heap sizeof() is not a function, it's operator (?) sizeof() is calculated in compile-time. array & pointer is defference in sizeof() Chapter 3 Explain about Standard Input and Output and how to redirect in Linux (uses '>' and '<''). scanf() and printf() are two functions that use for communicate with STDIO. Problem about editing a string: In case a pointer points to constant string like this char *ptr = \"JQK\"; . You can not modify string by *(ptr + i) = 'x' . But when using array, you can: char ptr[] = \"JQK\" . In first case, \"JQK\" is constant and be stored in a part of memory that you can not modify. In the second case, \"JQK\" stills is stored in this read-only memory but when you call char ptr[] = \"JQK\" , another memory is allocate for array ptr and \"JQK\" will be coppied in there -> that can be modified.","title":"Head first c"},{"location":"books/cbooks/head_first_c/#chapter-2-memory-and-pointer","text":"Use printf(\"%p\", pointer); to print a pointer Explain in easy-way to understand about Stack & Heap sizeof() is not a function, it's operator (?) sizeof() is calculated in compile-time. array & pointer is defference in sizeof()","title":"Chapter 2: Memory and Pointer"},{"location":"books/cbooks/head_first_c/#chapter-3","text":"Explain about Standard Input and Output and how to redirect in Linux (uses '>' and '<''). scanf() and printf() are two functions that use for communicate with STDIO. Problem about editing a string: In case a pointer points to constant string like this char *ptr = \"JQK\"; . You can not modify string by *(ptr + i) = 'x' . But when using array, you can: char ptr[] = \"JQK\" . In first case, \"JQK\" is constant and be stored in a part of memory that you can not modify. In the second case, \"JQK\" stills is stored in this read-only memory but when you call char ptr[] = \"JQK\" , another memory is allocate for array ptr and \"JQK\" will be coppied in there -> that can be modified.","title":"Chapter 3"},{"location":"books/dsa/algorithm-in-c/","text":"Chapter 4 - Abstract Data Types (ADT) An abstract data type (ADT) is a data type (a set of values and a collection of operations on those values) that is accessed only through an interface. We refer to a program that uses an ADT as a client, and a program that specifies the data type as an implementation.","title":"Algorithm in c"},{"location":"books/dsa/algorithm-in-c/#chapter-4-abstract-data-types-adt","text":"An abstract data type (ADT) is a data type (a set of values and a collection of operations on those values) that is accessed only through an interface. We refer to a program that uses an ADT as a client, and a program that specifies the data type as an implementation.","title":"Chapter 4 - Abstract Data Types (ADT)"},{"location":"books/dsa/algorithm4th/","text":"Algorithm 4th Source code, Data & Environment setup Java Algorithms and Clients Chapter 1 - Fundamentals 1.1. Basic Programming Model *Have to done Excercies later! 1.2. Data Abstraction Data type: abstract data type (ADT)","title":"Algorithm4th"},{"location":"books/dsa/algorithm4th/#chapter-1-fundamentals","text":"1.1. Basic Programming Model *Have to done Excercies later! 1.2. Data Abstraction Data type: abstract data type (ADT)","title":"Chapter 1 - Fundamentals"},{"location":"books/dsa/dsa_toc/","text":"Data structure & algorithm Figure size: [150,x] Algorithm 4th - Robert Sedgwick Algorithm in C - 3rd - Robert Sedgewick","title":"Data Structure & Algorithms"},{"location":"books/dsa/dsa_toc/#data-structure-algorithm","text":"Figure size: [150,x]","title":"Data structure &amp; algorithm"},{"location":"books/dsa/dsa_toc/#algorithm-4th-robert-sedgwick","text":"","title":"Algorithm 4th - Robert Sedgwick"},{"location":"books/dsa/dsa_toc/#algorithm-in-c-3rd-robert-sedgewick","text":"","title":"Algorithm in C - 3rd - Robert Sedgewick"},{"location":"fpga/timing_analysis/timing_analysis/","text":"STATIC TIMING ANALYSIS (STA) Hanoi Friday, September 22, 2016 -- by VuTang Static timing analysis (STA) is a simulation method of computing the expected timing of a digital circuit without requiring a simulation of the full circuit ( Wiki ). More information about STA in Vietnamese at T\u00ecm hi\u1ec3u v\u1ec1 Static Timing Analysis . Basic knowledge Definitions Clock Signal Clock l\u00e0 m\u1ed9t t\u00edn hi\u1ec7u c\u00f3 chu k\u00ec c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh sau: Period (Chu k\u00ec), Duty Cycle, Jitter, Phase... M\u1ed9t s\u1ed1 \u0111\u1eb7c t\u00ednh \u0111\u00e1ng ch\u00fa \u00fd c\u1ee7a clock xu\u1ea5t hi\u1ec7n trong h\u1ec7 th\u1ed1ng th\u1ef1c t\u1ebf: Clock Skew: l\u00e0 hi\u1ec7n t\u01b0\u1ee3ng m\u00e0 trong m\u1ed9t m\u1ea1ch \u0111\u1ed3ng b\u1ed9 (asynchronous circuit) v\u1edbi c\u00f9ng m\u1ed9t ngu\u1ed3n clock \u0111\u1ea7u v\u00e0o nh\u01b0ng \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed Flip Flop (Clocked Element) kh\u00e1c nhau trong nh\u1eefng th\u1eddi \u0111i\u1ec3m kh\u00e1c nhau. Clock Jitter: l\u00e0 \u0111\u1ed9 l\u1ec7ch c\u1ee7a s\u01b0\u1eddn clock th\u1ef1c t\u1ebf so v\u1edbi s\u01b0\u1eddn clock l\u00ed t\u01b0\u1edfng. C\u00f3 nhi\u1ec1u lo\u1ea1i Jitter kh\u00e1c nhau nh\u01b0: Cycle-to-Cycle (\u0111\u1ed9 ch\u00eanh l\u1ec7ch gi\u1eefa hai chu k\u00ec li\u00ean ti\u1ebfp), Period (s\u1ef1 thay \u0111\u1ed5i l\u1edbn nh\u1ea5t c\u1ee7a chu k\u00ec clock trong v\u00f2ng 100 chu k\u00ec - cycles) Clock Latency: L\u00e0 kho\u1ea3ng th\u1eddi gian tr\u1ec5 t\u1eeb ngu\u1ed3n clock (clk port, MMCM output pin, ...) \u0111\u1ec3 ph\u1ea7n t\u1eed d\u00f9ng clock \u0111\u00f3 (clocked element). Synchronous/Asynchronous Clock: N\u1ebfu 2 clocks \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi 2 ngu\u1ed3n kh\u00e1c nhau th\u00ec \u0111\u01b0\u1ee3c m\u1eb7c \u0111\u1ecbnh l\u00e0 kh\u00f4ng \u0111\u1ed3ng b\u1ed9 (asynchronous) k\u1ec3 c\u1ea3 trong tr\u01b0\u1eddng h\u1ee3p l\u00e0 c\u00f9ng t\u1ea7n s\u1ed1. Nguy\u00ean nh\u00e2n: hai ngu\u1ed3n clocks kh\u00e1c nhau s\u1eed d\u1ee5ng c\u00e1c b\u1ed9 oscillator kh\u00e1c nhau, c\u00e1c b\u1ed9 oscillator n\u00e0y c\u00f3 \u0111\u1ed9 sai l\u1ec7ch theo th\u1eddi gian kh\u00e1c nhau n\u00ean d\u1eabn \u0111\u1ebfn quan h\u1ec7 phase v\u00e0 period gi\u1eefa hai clock kh\u00f4ng \u0111\u01b0\u1ee3c c\u1ed1 \u0111\u1ecbnh (sai l\u1ec7ch c\u1ee7a b\u1ed9 oscillator \u0111\u01b0\u1ee3c \u0111o b\u1eb1ng ppm -- parts per million ho\u1eb7c ppb -- parts per billion ) N\u1ebfu 2 clocks \u0111\u01b0\u1ee3c t\u1ea1o ra t\u1eeb m\u1ed9t ngu\u1ed3n, m\u1eb7c d\u00f9 c\u00f3 th\u1ec3 phase v\u00e0 frequency kh\u00e1c nhau nh\u01b0ng v\u1eabn \u0111\u01b0\u1ee3c x\u00e9t l\u00e0 \u0111\u1ed3ng b\u1ed9. Setup/Hold Time Setup/Hold Time: X\u00e9t m\u1ed9t Flip Flop c\u00f3 ch\u00e2n clock CLK, data in D, data out Q. \u0110\u1ecbnh ngh\u0129a v\u1ec1 Setup/Hold Time \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n trong h\u00ecnh v\u1ebd sau: V\u1ec1 c\u01a1 b\u1ea3n, \u0111\u1ec3 m\u1ed9t Flip Flop ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang ch\u1ee9c n\u0103ng, d\u1eef li\u1ec7u \u0111\u01b0a v\u00e0o \u0111\u1ea7u v\u00e0o D ph\u1ea3i th\u1ecfa m\u00e3n \u0111i\u1ec1u ki\u1ec7n Setup Time v\u00e0 Hold Time. Trong \u0111\u00f3, Setup Time l\u00e0 kho\u1ea3ng th\u1eddi gian nh\u1ecf nh\u1ea5t m\u00e0 Data in ph\u1ea3i gi\u1eef \u1ed5n \u0111\u1ecbnh tr\u01b0\u1edbc th\u1eddi \u0111i\u1ec3m s\u01b0\u1eddn l\u00ean clock; Hold Time l\u00e0 kho\u1ea3ng th\u1eddi gian nh\u1ecf nh\u1ea5t m\u00e0 Data in ph\u1ea3i gi\u1eef \u1ed5n \u0111\u1ecbnh sau th\u1eddi \u0111i\u1ec3m s\u01b0\u1eddn l\u00ean clock. Setup/Hold Time Violation: Khi \u0111\u1ea7u v\u00e0o D vi ph\u1ea1m \u0111i\u1ec1u ki\u1ec7n Setup/Hold Time, k\u1ebft qu\u1ea3 \u0111\u1ea7u ra Q c\u00f3 th\u1ec3 x\u1ea3y ra m\u1ed9t trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p \u1edf h\u00ecnh sau: Metastability Definition in Wiki Static Timing Path l\u00e0 m\u1ed9t path m\u00e0: B\u1eaft \u0111\u1ea7u t\u1eeb m\u1ed9t Clocked Element Truy\u1ec1n lan qua c\u00e1c ph\u1ea7n t\u1eed logic c\u0169ng nh\u01b0 d\u00e2y n\u1ed1i K\u1ebft th\u00fac t\u1ea1i m\u1ed9t Clocked Element Setup check/Hold check Basic definitions is used in Setup check/Hold check. Launch edge: Capture edge: Hold relationship: Setup relationship: Setup check: Checks that a change in a clocked element has time to propagate to other clocked elements before the next clock event. STA with Vivado Xilinx performance baselining \u0110\u1ec3 c\u00f3 th\u1ec3 ph\u00e2n t\u00edch m\u1ed9t design hi\u1ec7u qu\u1ea3, k\u0129 s\u01b0 c\u00f3 th\u1ec3 d\u1ef1a v\u00e0o baselining m\u00e0 Xilinx gi\u1edbi thi\u1ec7u. Chi ti\u1ebft v\u1ec1 c\u00e1c b\u01b0\u1edbc th\u1ef1c hi\u1ec7n ph\u00e2n t\u00edch theo Xilinx \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n trong c\u00e1c h\u00ecnh v\u1ebd sau. Trong \u0111\u00f3 c\u00f3 ba b\u01b0\u1edbc ch\u00ednh: Optimize Internal Paths: Ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch, t\u1ed1i \u01b0u n\u1ed9i b\u1ed9 FPGA. Optimize Entire Chip: Ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch to\u00e0n b\u1ed9 FPGA trong \u0111\u00f3 bao g\u1ed3m c\u1ea3 k\u1ebft n\u1ed1i n\u1ed9i b\u1ed9 c\u0169ng nh\u01b0 c\u00e1c k\u1ebft n\u1ed1i v\u1edbi chip b\u00ean ngo\u00e0i Fine-tune: B\u1ed5 sung th\u00eam c\u00e1c constraint li\u00ean quan \u0111\u1ebfn exception path, floor planning Trong b\u00e1o c\u00e1o n\u00e0y s\u1ebd t\u1eadp trung v\u00e0o m\u1ee5c Optimize Internal Path. Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n tr\u00ean c\u00f4t d\u1ecdc th\u1ee9 nh\u1ea5t c\u1ee7a s\u01a1 \u0111\u1ed3. Xilinx timing analysis tool Vivado timing analysis report M\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m c\u01a1 b\u1ea3n trong Xilinx Timing Report. Trong c\u00e1c timing report, th\u01b0\u1eddng xu\u1ea5t hi\u1ec7n c\u00e1c kh\u00e1i ni\u1ec7m nh\u01b0 WNS/TNS, WHS/THS. C\u00e1c tham s\u1ed1 n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u1ed9t design c\u00f3 timing violation hay kh\u00f4ng. \u0110\u1ecbnh ngh\u0129a c\u1ee7a c\u00e1c tham s\u1ed1 n\u00e0y nh\u01b0 sau: WNS: Worst Negative Slack . K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh Setup Check TNS: Total Negative Slack . T\u1ed5ng gi\u00e1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c Negative Slack WHS: Worst Hold Slack . K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh Hold Check. THS: Total Hold Slack . T\u1ed5ng gi\u00e1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c Hold Slack. How does Vivado calculate Hold Time Slack? Hold Time Check \u0111\u01b0\u1ee3c x\u00e9t tr\u00ean c\u00f9ng m\u1ed9t s\u01b0\u1eddn clock c\u1ee7a Source Clock v\u00e0 Destination Clock. X\u00e9t m\u1ed9t Static Timing Path c\u1ee5 th\u1ec3 c\u00f3 s\u01a1 \u0111\u1ed3 nh\u01b0 h\u00ecnh d\u01b0\u1edbi \u0111\u00e2y. Timing path \u0111\u01b0\u1ee3c t\u00ednh gi\u1eefa F1 v\u00e0 F2 (2 Clocked Elements), F1/F2 s\u1eed d\u1ee5ng chung clocks \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb CLKOUT1 c\u1ee7a MMCM2_ADV. Chi ti\u1ebft v\u1ec1 path n\u00e0y \u0111\u01b0\u1ee3c ghi r\u00f5 trong report sau: \u1ede m\u1ee5c Summary c\u1ee7a Path Report c\u00f3 c\u00e1c th\u00f4ng tin sau: Name: T\u00ean c\u1ee7a path trong design Slack (Hold): Negative Hold Slack Source: Pin Clock in c\u1ee7a F1 Destination: Pin Data in c\u1ee7a F2 Path Group: group clock c\u1ee7a path \u0111ang \u0111\u01b0\u1ee3c x\u00e9t, \u1edf \u0111\u00e2y l\u00e0 generated clock ad9122_tx1_serdes_clkout1 Path Type: Lo\u1ea1i path \u0111ang \u0111\u01b0\u1ee3c x\u00e9t, Hold ho\u1eb7c Setup (???) Requirement: (???) Data Path Delay: Delay gi\u1eefa F1/F2. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec ph\u1ea7n t\u1eed logic n\u00e0o n\u1eb1m tr\u00ean path n\u00e0y, do \u0111\u00f3 Data Path Delay \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng t\u1ed5ng c\u1ee7a: FlipFlop Delay (th\u1eddi gian t\u1eeb khi c\u00f3 input \u0111\u1ebfn khi c\u00f3 output c\u1ee7a FF) v\u00e0 Net Delay (tr\u1ec5 tr\u00ean d\u00e2y n\u1ed1i). Logic Level: (Xem l\u1ea1i \u0111\u1ecbnh ngh\u0129a c\u1ee7a logic level) Clock Path Skew: \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng DCD-SCD-CPR trong \u0111\u00f3: DCD l\u00e0 Destination Clock Delay, SCD Source Clock Delay v\u00e0 CPR l\u00e0 Clock Pessimism Removal. Clock Pessimism Removal (CPR) is the removal of artificially induced pessimism from the common clock path between launching startpoint and capturing endpoint. \u1ede m\u1ee5c Source Clock Path, report s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft \u0111\u01b0\u1eddng \u0111i c\u1ee7a Source Clock. Theo nh\u01b0 report \u1edf h\u00ecnh tr\u00ean, \u0111\u1ec3 \u0111\u1ebfn \u0111\u01b0\u1ee3c F1, Source Clock s\u1ebd ph\u1ea3i \u0111i qua: IBUFDS & BUFG, PLL2_ADV & BUFGCTL, MMCM2_ADV & BUFG nh\u01b0 \u1edf h\u00ecnh v\u1ebd \u0111\u1ea7u ti\u00ean. Qua report ta r\u00fat ra \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 nh\u1eadn x\u00e9t nh\u01b0 sau: Sau khi \u0111i qua c\u00e1c ph\u1ea7n t\u1eed nh\u01b0 BUFG, IBUFDS, BUFGCTL ..., clock b\u1ecb tr\u1ec5 \u0111i m\u1ed9t kho\u1ea3ng th\u1eddi gian Sau khi \u0111i qua c\u00e1c ph\u1ea7n t\u1eed t\u1ea1o clock nh\u01b0 MMCM2_ADV, PLL2_ADV..., t\u00f9y theo c\u1ea5u h\u00ecnh m\u00e0 clock c\u00f3 th\u1ec3 gi\u1ea3m ho\u1eb7c t\u0103ng \u0111\u1ed9 tr\u1ec5 (gi\u00e1 tr\u1ecb c\u00f3 th\u1ec3 \u00e2m ho\u1eb7c d\u01b0\u01a1ng). Ph\u1ea7n Data Path s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft h\u01a1n v\u1ec1 delay gi\u1eefa F1/F2, c\u00e1i m\u00e0 \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn \u1edf m\u1ee5c Sumary. Ph\u1ea7n Destination Clock Path c\u00f3 ch\u1ee9c n\u0103ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 ph\u1ea7n Source Clock Path, s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft \u0111\u01b0\u1eddng \u0111i c\u1ee7a Destination Clock Path. V\u1edbi Report nh\u01b0 tr\u00ean, ta c\u00f3 th\u1ec3 v\u1ebd \u0111\u01b0\u1ee3c Timing Diagram cho Path n\u00e0y nh\u01b0 sau: Trong \u0111\u00f3: Source Clock Path Delay b\u1eb1ng 0.975 ns \u0111\u01b0\u1ee3c t\u00ednh t\u1eeb t\u1ed5ng c\u00e1c delay tr\u00ean c\u00e1c ph\u1ea7n t\u1eed m\u00e0 clocks \u0111i qua, gi\u00e1 tr\u1ecb n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c \u1edf d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a Source Clock Report. Data Path Delay b\u1eb1ng 0.424 ns l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a delay gi\u1eefa F1/F2, gi\u00e1 tr\u1ecb n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c t\u1eeb d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a Data Path report. L\u01b0u \u00fd r\u1eb1ng gi\u00e1 tr\u1ecb \u0111\u1ecdc \u0111\u01b0\u1ee3c \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1ed9ng th\u00eam Source Clock Path Delay. Destination Clock Path Delay b\u1eb1ng 1.559 ns \u0111\u01b0\u1ee3c t\u00ednh gi\u1ed1ng nh\u01b0 v\u1edbi Source Clock Path Delay. Gi\u00e1 tr\u1ecb Negative Hold Time Slack s\u1ebd \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng: Source Clock Path Delay + Data Path Delay -- Destination Clock Path Delay = 0.975 ns + 0.424 ns -- 1.559 ns = - 0.220 ns** K\u1ebft qu\u1ea3 n\u00e0y gi\u1ed1ng v\u1edbi Report c\u1ee7a Xilinx Vivado. How does Vivado calculate Setup Time Slack? Qu\u00e1 tr\u00ecnh t\u00ednh to\u00e1n Setup Time Slack \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Hold Time Slack nh\u01b0 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean hai s\u01b0\u1eddn clock kh\u00e1c nhau. Timing Analysis TCL Command get_clocks Description: \u0110\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 list ra c\u00e1c clocks trong thi\u1ebft k\u1ebf hi\u1ec7n t\u1ea1i. Syntax: get_clocks [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-match_style <arg>] [-include_generated_clocks] [-quiet] verbose] [<patterns>] Examples: get_clocks //getting all clocks in current design get_clock adc* // getting all clocks that has pattern \"adc\" in its name get_clock {adc* clk_out1*} // getting all clocks that has any pattern listed in {} in its name get_clocks -include_generated_clocks adc_clk_fwd // getting adc_clk_fwd and all of its generated clocks report_clocks Description: reporting about a clocks or a list of clocks Syntax: report_clocks [-file <arg>] [-append] [-return_string] [-quiet] [-verbose] [<clocks>] Examples: report_clocks // reporting all clocks in current design report_clocks --file report_clock_evt2a.txt // reporting and then outputting this content to an output file. Create output file if it is not existed. report_clocks [get_clocks adc_clk_fwd] // reporting about particular clock that is gotten by using get_clocks command. Xilinx Design Constraint (XDC) Design with the 7 series Clocking Resources in 7 series. Clock regions: M\u1ed7i die FPGA \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c clock regions. Chi\u1ec1u cao (high) c\u1ee7a m\u1ed7i clock regions l\u00e0 50 CLBs (50 CLBs rows), b\u1ec1 r\u1ed9ng chi\u1ebfm m\u1ed9t n\u1eeda die. Clock Management Tile (CMT): M\u1ed7i clock region ch\u1ee9a m\u1ed9t CMT. Trong m\u1ed7i CMT ch\u1ee9a: 01 Mixed-Mode Clock Managers (MMCMs), 01 Phase Locked Loop (PLL). Clock-Capable Inputs (CCIO) : b\u1ea5t k\u00ec m\u1ed9t thi\u1ebft k\u1ebf FPGA \u0111\u1ed3ng b\u1ed9 n\u00e0o (synchronous design) \u0111\u1ec1u c\u1ea7n ph\u1ea3i cung c\u1ea5p \u00edt nh\u1ea5t m\u1ed9t \u0111\u01b0\u1eddng clock reference t\u1eeb b\u00ean ngo\u00e0i chip. \u0110\u01b0\u1eddng clock n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o chip FPGA b\u1eb1ng c\u00e1c port \u0111\u1eb7c bi\u1ec7t (clock-capable) \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf ri\u00eang cho clock. \u0110\u1ed1i v\u1edbi 7 series FPGA s\u1ebd c\u00f3 4 ports clock-capable. Trong \u0111\u00f3: 2 port l\u00e0 Multi-Region Clock Capable (MRCC), 2 ports c\u00f2n l\u1ea1i l\u00e0 Single Region Clock Capable (SRCC). IBUFG, IBUFGS c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 map t\u00edn hi\u1ec7u clock \u0111\u1ebfn c\u00e1c ch\u00e2n clock-capable. Global Clocking: Global clock networks cho pheps ph\u00e2n ph\u1ed1i clocks \u0111\u1ebfn c\u00e1c clocked element tr\u00ean chip die. Global clocks are driven by BUFGCTRL located in the middle of the die. Global Clocking Buffer (BUFGCTRL): For Clock Multiplexing - BUFGMUX For Gated Clock -- BUFGCE Horizontal Spine Clock Buffer (BUFH):","title":"Static Timing Analysis"},{"location":"fpga/timing_analysis/timing_analysis/#static-timing-analysis-sta","text":"Hanoi Friday, September 22, 2016 -- by VuTang Static timing analysis (STA) is a simulation method of computing the expected timing of a digital circuit without requiring a simulation of the full circuit ( Wiki ). More information about STA in Vietnamese at T\u00ecm hi\u1ec3u v\u1ec1 Static Timing Analysis .","title":"STATIC TIMING ANALYSIS (STA)"},{"location":"fpga/timing_analysis/timing_analysis/#basic-knowledge","text":"","title":"Basic knowledge"},{"location":"fpga/timing_analysis/timing_analysis/#definitions","text":"","title":"Definitions"},{"location":"fpga/timing_analysis/timing_analysis/#clock-signal","text":"Clock l\u00e0 m\u1ed9t t\u00edn hi\u1ec7u c\u00f3 chu k\u00ec c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh sau: Period (Chu k\u00ec), Duty Cycle, Jitter, Phase... M\u1ed9t s\u1ed1 \u0111\u1eb7c t\u00ednh \u0111\u00e1ng ch\u00fa \u00fd c\u1ee7a clock xu\u1ea5t hi\u1ec7n trong h\u1ec7 th\u1ed1ng th\u1ef1c t\u1ebf: Clock Skew: l\u00e0 hi\u1ec7n t\u01b0\u1ee3ng m\u00e0 trong m\u1ed9t m\u1ea1ch \u0111\u1ed3ng b\u1ed9 (asynchronous circuit) v\u1edbi c\u00f9ng m\u1ed9t ngu\u1ed3n clock \u0111\u1ea7u v\u00e0o nh\u01b0ng \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed Flip Flop (Clocked Element) kh\u00e1c nhau trong nh\u1eefng th\u1eddi \u0111i\u1ec3m kh\u00e1c nhau. Clock Jitter: l\u00e0 \u0111\u1ed9 l\u1ec7ch c\u1ee7a s\u01b0\u1eddn clock th\u1ef1c t\u1ebf so v\u1edbi s\u01b0\u1eddn clock l\u00ed t\u01b0\u1edfng. C\u00f3 nhi\u1ec1u lo\u1ea1i Jitter kh\u00e1c nhau nh\u01b0: Cycle-to-Cycle (\u0111\u1ed9 ch\u00eanh l\u1ec7ch gi\u1eefa hai chu k\u00ec li\u00ean ti\u1ebfp), Period (s\u1ef1 thay \u0111\u1ed5i l\u1edbn nh\u1ea5t c\u1ee7a chu k\u00ec clock trong v\u00f2ng 100 chu k\u00ec - cycles) Clock Latency: L\u00e0 kho\u1ea3ng th\u1eddi gian tr\u1ec5 t\u1eeb ngu\u1ed3n clock (clk port, MMCM output pin, ...) \u0111\u1ec3 ph\u1ea7n t\u1eed d\u00f9ng clock \u0111\u00f3 (clocked element). Synchronous/Asynchronous Clock: N\u1ebfu 2 clocks \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi 2 ngu\u1ed3n kh\u00e1c nhau th\u00ec \u0111\u01b0\u1ee3c m\u1eb7c \u0111\u1ecbnh l\u00e0 kh\u00f4ng \u0111\u1ed3ng b\u1ed9 (asynchronous) k\u1ec3 c\u1ea3 trong tr\u01b0\u1eddng h\u1ee3p l\u00e0 c\u00f9ng t\u1ea7n s\u1ed1. Nguy\u00ean nh\u00e2n: hai ngu\u1ed3n clocks kh\u00e1c nhau s\u1eed d\u1ee5ng c\u00e1c b\u1ed9 oscillator kh\u00e1c nhau, c\u00e1c b\u1ed9 oscillator n\u00e0y c\u00f3 \u0111\u1ed9 sai l\u1ec7ch theo th\u1eddi gian kh\u00e1c nhau n\u00ean d\u1eabn \u0111\u1ebfn quan h\u1ec7 phase v\u00e0 period gi\u1eefa hai clock kh\u00f4ng \u0111\u01b0\u1ee3c c\u1ed1 \u0111\u1ecbnh (sai l\u1ec7ch c\u1ee7a b\u1ed9 oscillator \u0111\u01b0\u1ee3c \u0111o b\u1eb1ng ppm -- parts per million ho\u1eb7c ppb -- parts per billion ) N\u1ebfu 2 clocks \u0111\u01b0\u1ee3c t\u1ea1o ra t\u1eeb m\u1ed9t ngu\u1ed3n, m\u1eb7c d\u00f9 c\u00f3 th\u1ec3 phase v\u00e0 frequency kh\u00e1c nhau nh\u01b0ng v\u1eabn \u0111\u01b0\u1ee3c x\u00e9t l\u00e0 \u0111\u1ed3ng b\u1ed9.","title":"Clock Signal"},{"location":"fpga/timing_analysis/timing_analysis/#setuphold-time","text":"Setup/Hold Time: X\u00e9t m\u1ed9t Flip Flop c\u00f3 ch\u00e2n clock CLK, data in D, data out Q. \u0110\u1ecbnh ngh\u0129a v\u1ec1 Setup/Hold Time \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n trong h\u00ecnh v\u1ebd sau: V\u1ec1 c\u01a1 b\u1ea3n, \u0111\u1ec3 m\u1ed9t Flip Flop ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang ch\u1ee9c n\u0103ng, d\u1eef li\u1ec7u \u0111\u01b0a v\u00e0o \u0111\u1ea7u v\u00e0o D ph\u1ea3i th\u1ecfa m\u00e3n \u0111i\u1ec1u ki\u1ec7n Setup Time v\u00e0 Hold Time. Trong \u0111\u00f3, Setup Time l\u00e0 kho\u1ea3ng th\u1eddi gian nh\u1ecf nh\u1ea5t m\u00e0 Data in ph\u1ea3i gi\u1eef \u1ed5n \u0111\u1ecbnh tr\u01b0\u1edbc th\u1eddi \u0111i\u1ec3m s\u01b0\u1eddn l\u00ean clock; Hold Time l\u00e0 kho\u1ea3ng th\u1eddi gian nh\u1ecf nh\u1ea5t m\u00e0 Data in ph\u1ea3i gi\u1eef \u1ed5n \u0111\u1ecbnh sau th\u1eddi \u0111i\u1ec3m s\u01b0\u1eddn l\u00ean clock. Setup/Hold Time Violation: Khi \u0111\u1ea7u v\u00e0o D vi ph\u1ea1m \u0111i\u1ec1u ki\u1ec7n Setup/Hold Time, k\u1ebft qu\u1ea3 \u0111\u1ea7u ra Q c\u00f3 th\u1ec3 x\u1ea3y ra m\u1ed9t trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p \u1edf h\u00ecnh sau: Metastability Definition in Wiki Static Timing Path l\u00e0 m\u1ed9t path m\u00e0: B\u1eaft \u0111\u1ea7u t\u1eeb m\u1ed9t Clocked Element Truy\u1ec1n lan qua c\u00e1c ph\u1ea7n t\u1eed logic c\u0169ng nh\u01b0 d\u00e2y n\u1ed1i K\u1ebft th\u00fac t\u1ea1i m\u1ed9t Clocked Element","title":"Setup/Hold Time"},{"location":"fpga/timing_analysis/timing_analysis/#setup-checkhold-check","text":"Basic definitions is used in Setup check/Hold check. Launch edge: Capture edge: Hold relationship: Setup relationship: Setup check: Checks that a change in a clocked element has time to propagate to other clocked elements before the next clock event.","title":"Setup check/Hold check"},{"location":"fpga/timing_analysis/timing_analysis/#sta-with-vivado","text":"","title":"STA with Vivado"},{"location":"fpga/timing_analysis/timing_analysis/#xilinx-performance-baselining","text":"\u0110\u1ec3 c\u00f3 th\u1ec3 ph\u00e2n t\u00edch m\u1ed9t design hi\u1ec7u qu\u1ea3, k\u0129 s\u01b0 c\u00f3 th\u1ec3 d\u1ef1a v\u00e0o baselining m\u00e0 Xilinx gi\u1edbi thi\u1ec7u. Chi ti\u1ebft v\u1ec1 c\u00e1c b\u01b0\u1edbc th\u1ef1c hi\u1ec7n ph\u00e2n t\u00edch theo Xilinx \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n trong c\u00e1c h\u00ecnh v\u1ebd sau. Trong \u0111\u00f3 c\u00f3 ba b\u01b0\u1edbc ch\u00ednh: Optimize Internal Paths: Ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch, t\u1ed1i \u01b0u n\u1ed9i b\u1ed9 FPGA. Optimize Entire Chip: Ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch to\u00e0n b\u1ed9 FPGA trong \u0111\u00f3 bao g\u1ed3m c\u1ea3 k\u1ebft n\u1ed1i n\u1ed9i b\u1ed9 c\u0169ng nh\u01b0 c\u00e1c k\u1ebft n\u1ed1i v\u1edbi chip b\u00ean ngo\u00e0i Fine-tune: B\u1ed5 sung th\u00eam c\u00e1c constraint li\u00ean quan \u0111\u1ebfn exception path, floor planning Trong b\u00e1o c\u00e1o n\u00e0y s\u1ebd t\u1eadp trung v\u00e0o m\u1ee5c Optimize Internal Path. Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n tr\u00ean c\u00f4t d\u1ecdc th\u1ee9 nh\u1ea5t c\u1ee7a s\u01a1 \u0111\u1ed3.","title":"Xilinx performance baselining"},{"location":"fpga/timing_analysis/timing_analysis/#xilinx-timing-analysis-tool","text":"","title":"Xilinx timing analysis tool"},{"location":"fpga/timing_analysis/timing_analysis/#vivado-timing-analysis-report","text":"M\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m c\u01a1 b\u1ea3n trong Xilinx Timing Report. Trong c\u00e1c timing report, th\u01b0\u1eddng xu\u1ea5t hi\u1ec7n c\u00e1c kh\u00e1i ni\u1ec7m nh\u01b0 WNS/TNS, WHS/THS. C\u00e1c tham s\u1ed1 n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u1ed9t design c\u00f3 timing violation hay kh\u00f4ng. \u0110\u1ecbnh ngh\u0129a c\u1ee7a c\u00e1c tham s\u1ed1 n\u00e0y nh\u01b0 sau: WNS: Worst Negative Slack . K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh Setup Check TNS: Total Negative Slack . T\u1ed5ng gi\u00e1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c Negative Slack WHS: Worst Hold Slack . K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh Hold Check. THS: Total Hold Slack . T\u1ed5ng gi\u00e1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c Hold Slack. How does Vivado calculate Hold Time Slack? Hold Time Check \u0111\u01b0\u1ee3c x\u00e9t tr\u00ean c\u00f9ng m\u1ed9t s\u01b0\u1eddn clock c\u1ee7a Source Clock v\u00e0 Destination Clock. X\u00e9t m\u1ed9t Static Timing Path c\u1ee5 th\u1ec3 c\u00f3 s\u01a1 \u0111\u1ed3 nh\u01b0 h\u00ecnh d\u01b0\u1edbi \u0111\u00e2y. Timing path \u0111\u01b0\u1ee3c t\u00ednh gi\u1eefa F1 v\u00e0 F2 (2 Clocked Elements), F1/F2 s\u1eed d\u1ee5ng chung clocks \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb CLKOUT1 c\u1ee7a MMCM2_ADV. Chi ti\u1ebft v\u1ec1 path n\u00e0y \u0111\u01b0\u1ee3c ghi r\u00f5 trong report sau: \u1ede m\u1ee5c Summary c\u1ee7a Path Report c\u00f3 c\u00e1c th\u00f4ng tin sau: Name: T\u00ean c\u1ee7a path trong design Slack (Hold): Negative Hold Slack Source: Pin Clock in c\u1ee7a F1 Destination: Pin Data in c\u1ee7a F2 Path Group: group clock c\u1ee7a path \u0111ang \u0111\u01b0\u1ee3c x\u00e9t, \u1edf \u0111\u00e2y l\u00e0 generated clock ad9122_tx1_serdes_clkout1 Path Type: Lo\u1ea1i path \u0111ang \u0111\u01b0\u1ee3c x\u00e9t, Hold ho\u1eb7c Setup (???) Requirement: (???) Data Path Delay: Delay gi\u1eefa F1/F2. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec ph\u1ea7n t\u1eed logic n\u00e0o n\u1eb1m tr\u00ean path n\u00e0y, do \u0111\u00f3 Data Path Delay \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng t\u1ed5ng c\u1ee7a: FlipFlop Delay (th\u1eddi gian t\u1eeb khi c\u00f3 input \u0111\u1ebfn khi c\u00f3 output c\u1ee7a FF) v\u00e0 Net Delay (tr\u1ec5 tr\u00ean d\u00e2y n\u1ed1i). Logic Level: (Xem l\u1ea1i \u0111\u1ecbnh ngh\u0129a c\u1ee7a logic level) Clock Path Skew: \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng DCD-SCD-CPR trong \u0111\u00f3: DCD l\u00e0 Destination Clock Delay, SCD Source Clock Delay v\u00e0 CPR l\u00e0 Clock Pessimism Removal. Clock Pessimism Removal (CPR) is the removal of artificially induced pessimism from the common clock path between launching startpoint and capturing endpoint. \u1ede m\u1ee5c Source Clock Path, report s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft \u0111\u01b0\u1eddng \u0111i c\u1ee7a Source Clock. Theo nh\u01b0 report \u1edf h\u00ecnh tr\u00ean, \u0111\u1ec3 \u0111\u1ebfn \u0111\u01b0\u1ee3c F1, Source Clock s\u1ebd ph\u1ea3i \u0111i qua: IBUFDS & BUFG, PLL2_ADV & BUFGCTL, MMCM2_ADV & BUFG nh\u01b0 \u1edf h\u00ecnh v\u1ebd \u0111\u1ea7u ti\u00ean. Qua report ta r\u00fat ra \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 nh\u1eadn x\u00e9t nh\u01b0 sau: Sau khi \u0111i qua c\u00e1c ph\u1ea7n t\u1eed nh\u01b0 BUFG, IBUFDS, BUFGCTL ..., clock b\u1ecb tr\u1ec5 \u0111i m\u1ed9t kho\u1ea3ng th\u1eddi gian Sau khi \u0111i qua c\u00e1c ph\u1ea7n t\u1eed t\u1ea1o clock nh\u01b0 MMCM2_ADV, PLL2_ADV..., t\u00f9y theo c\u1ea5u h\u00ecnh m\u00e0 clock c\u00f3 th\u1ec3 gi\u1ea3m ho\u1eb7c t\u0103ng \u0111\u1ed9 tr\u1ec5 (gi\u00e1 tr\u1ecb c\u00f3 th\u1ec3 \u00e2m ho\u1eb7c d\u01b0\u01a1ng). Ph\u1ea7n Data Path s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft h\u01a1n v\u1ec1 delay gi\u1eefa F1/F2, c\u00e1i m\u00e0 \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn \u1edf m\u1ee5c Sumary. Ph\u1ea7n Destination Clock Path c\u00f3 ch\u1ee9c n\u0103ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 ph\u1ea7n Source Clock Path, s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft \u0111\u01b0\u1eddng \u0111i c\u1ee7a Destination Clock Path. V\u1edbi Report nh\u01b0 tr\u00ean, ta c\u00f3 th\u1ec3 v\u1ebd \u0111\u01b0\u1ee3c Timing Diagram cho Path n\u00e0y nh\u01b0 sau: Trong \u0111\u00f3: Source Clock Path Delay b\u1eb1ng 0.975 ns \u0111\u01b0\u1ee3c t\u00ednh t\u1eeb t\u1ed5ng c\u00e1c delay tr\u00ean c\u00e1c ph\u1ea7n t\u1eed m\u00e0 clocks \u0111i qua, gi\u00e1 tr\u1ecb n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c \u1edf d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a Source Clock Report. Data Path Delay b\u1eb1ng 0.424 ns l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a delay gi\u1eefa F1/F2, gi\u00e1 tr\u1ecb n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c t\u1eeb d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a Data Path report. L\u01b0u \u00fd r\u1eb1ng gi\u00e1 tr\u1ecb \u0111\u1ecdc \u0111\u01b0\u1ee3c \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1ed9ng th\u00eam Source Clock Path Delay. Destination Clock Path Delay b\u1eb1ng 1.559 ns \u0111\u01b0\u1ee3c t\u00ednh gi\u1ed1ng nh\u01b0 v\u1edbi Source Clock Path Delay. Gi\u00e1 tr\u1ecb Negative Hold Time Slack s\u1ebd \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng: Source Clock Path Delay + Data Path Delay -- Destination Clock Path Delay = 0.975 ns + 0.424 ns -- 1.559 ns = - 0.220 ns** K\u1ebft qu\u1ea3 n\u00e0y gi\u1ed1ng v\u1edbi Report c\u1ee7a Xilinx Vivado. How does Vivado calculate Setup Time Slack? Qu\u00e1 tr\u00ecnh t\u00ednh to\u00e1n Setup Time Slack \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Hold Time Slack nh\u01b0 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean hai s\u01b0\u1eddn clock kh\u00e1c nhau. Timing Analysis TCL Command get_clocks Description: \u0110\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 list ra c\u00e1c clocks trong thi\u1ebft k\u1ebf hi\u1ec7n t\u1ea1i. Syntax: get_clocks [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-match_style <arg>] [-include_generated_clocks] [-quiet] verbose] [<patterns>] Examples: get_clocks //getting all clocks in current design get_clock adc* // getting all clocks that has pattern \"adc\" in its name get_clock {adc* clk_out1*} // getting all clocks that has any pattern listed in {} in its name get_clocks -include_generated_clocks adc_clk_fwd // getting adc_clk_fwd and all of its generated clocks report_clocks Description: reporting about a clocks or a list of clocks Syntax: report_clocks [-file <arg>] [-append] [-return_string] [-quiet] [-verbose] [<clocks>] Examples: report_clocks // reporting all clocks in current design report_clocks --file report_clock_evt2a.txt // reporting and then outputting this content to an output file. Create output file if it is not existed. report_clocks [get_clocks adc_clk_fwd] // reporting about particular clock that is gotten by using get_clocks command.","title":"Vivado timing analysis report"},{"location":"fpga/timing_analysis/timing_analysis/#xilinx-design-constraint-xdc","text":"","title":"Xilinx Design Constraint (XDC)"},{"location":"fpga/timing_analysis/timing_analysis/#design-with-the-7-series","text":"Clocking Resources in 7 series. Clock regions: M\u1ed7i die FPGA \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c clock regions. Chi\u1ec1u cao (high) c\u1ee7a m\u1ed7i clock regions l\u00e0 50 CLBs (50 CLBs rows), b\u1ec1 r\u1ed9ng chi\u1ebfm m\u1ed9t n\u1eeda die. Clock Management Tile (CMT): M\u1ed7i clock region ch\u1ee9a m\u1ed9t CMT. Trong m\u1ed7i CMT ch\u1ee9a: 01 Mixed-Mode Clock Managers (MMCMs), 01 Phase Locked Loop (PLL). Clock-Capable Inputs (CCIO) : b\u1ea5t k\u00ec m\u1ed9t thi\u1ebft k\u1ebf FPGA \u0111\u1ed3ng b\u1ed9 n\u00e0o (synchronous design) \u0111\u1ec1u c\u1ea7n ph\u1ea3i cung c\u1ea5p \u00edt nh\u1ea5t m\u1ed9t \u0111\u01b0\u1eddng clock reference t\u1eeb b\u00ean ngo\u00e0i chip. \u0110\u01b0\u1eddng clock n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o chip FPGA b\u1eb1ng c\u00e1c port \u0111\u1eb7c bi\u1ec7t (clock-capable) \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf ri\u00eang cho clock. \u0110\u1ed1i v\u1edbi 7 series FPGA s\u1ebd c\u00f3 4 ports clock-capable. Trong \u0111\u00f3: 2 port l\u00e0 Multi-Region Clock Capable (MRCC), 2 ports c\u00f2n l\u1ea1i l\u00e0 Single Region Clock Capable (SRCC). IBUFG, IBUFGS c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 map t\u00edn hi\u1ec7u clock \u0111\u1ebfn c\u00e1c ch\u00e2n clock-capable. Global Clocking: Global clock networks cho pheps ph\u00e2n ph\u1ed1i clocks \u0111\u1ebfn c\u00e1c clocked element tr\u00ean chip die. Global clocks are driven by BUFGCTRL located in the middle of the die. Global Clocking Buffer (BUFGCTRL): For Clock Multiplexing - BUFGMUX For Gated Clock -- BUFGCE Horizontal Spine Clock Buffer (BUFH):","title":"Design with the 7 series"},{"location":"fpga/x_ipcore/xipcore/","text":"Xilinx IPCore This note for Xilinx Core implementation. Clocking Wizard Configure Clock Wizard using Dynamic Reconfiguration through AXI4-Lite interface. D\u00f2ng chip Series 7 c\u1ee7a Xilinx cung c\u1ea5p c\u00e1c t\u00e0i nguy\u00ean li\u00ean quan \u0111\u1ebfn clock nh\u01b0 MMCM v\u00e0 PLL (clock synthesizer). Ngo\u00e0i ra, trong m\u00f4i tr\u01b0\u1eddng Vivado, Xilinx cung c\u1ea5p th\u00eam IPCore Clocking Wizard nh\u1eb1m t\u1ea1o giao di\u1ec7n l\u00e0m vi\u1ec7c \u0111\u01a1n gi\u1ea3n cho ng\u01b0\u1eddi d\u00f9ng khi s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean clock tr\u00ean chip FPGA. Trong qu\u00e1 tr\u00ecnh ch\u1ea1y (run-time), c\u00e1c clock synthesizer c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh l\u1ea1i \u0111\u1ec3 c\u00f3 th\u1ec3 thay \u0111\u1ed5i \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb t\u1ea7n s\u1ed1 \u0111\u1ea7u ra. Configuration Gi\u00e1 tr\u1ecb t\u1ea7n s\u1ed1 c\u1ee7a m\u1ed9t \u0111\u1ea7u ra c\u1ee7a kh\u1ed1i clock wizard \u0111\u01b0\u1ee3c t\u00ednh nh\u01b0 sau: VCO = CLKin * CLKFBOUT_MULT/DIVCLK_DIVICE CLKOUT0 = VCO / CLKOUT0_DIVIDE Trong qu\u00e1 tr\u00ecnh ch\u1ea1y, khi thay \u0111\u1ed5i c\u00e1c gi\u00e1 tr\u1ecb CLKFBOUT_MULT (Reg-offset: 0x200) ho\u1eb7c gi\u00e1 tr\u1ecb CLOCKOUT0_DEVICE (Reg-offset: 0x208) th\u00ec gi\u00e1 tr\u1ecb CLKOUT0 s\u1ebd thay \u0111\u1ed5i. Tham kh\u1ea3o th\u00eam Register Space trong t\u00e0i li\u1ec7u PG065. Quy tr\u00ecnh c\u1ea5u h\u00ecnh lai clock Trong PG065 m\u00f4 t\u1ea3 quy tr\u00ecnh c\u1ea5u h\u00ecnh l\u1ea1i clock t\u1ea1i \"Dynamic Reconfiguration through AXI4-Lite\" L\u01b0u \u00fd qu\u00e1 tr\u00ecnh c\u1ea5u h\u00ecnh: Nh\u1eadp m\u1edbi gi\u00e1 tr\u1ecb thanh ghi Ghi gi\u00e1 tr\u1ecb 0x7 v\u00e0o thanh ghi 0x25c Ghi gi\u00e1 tr\u1ecb 0x3 v\u00e0o thanh ghi 0x25c This configuration sequence is referenced from Clocking Wizard example design. References","title":"Xilinx IPCore"},{"location":"fpga/x_ipcore/xipcore/#xilinx-ipcore","text":"This note for Xilinx Core implementation.","title":"Xilinx IPCore"},{"location":"fpga/x_ipcore/xipcore/#clocking-wizard","text":"Configure Clock Wizard using Dynamic Reconfiguration through AXI4-Lite interface. D\u00f2ng chip Series 7 c\u1ee7a Xilinx cung c\u1ea5p c\u00e1c t\u00e0i nguy\u00ean li\u00ean quan \u0111\u1ebfn clock nh\u01b0 MMCM v\u00e0 PLL (clock synthesizer). Ngo\u00e0i ra, trong m\u00f4i tr\u01b0\u1eddng Vivado, Xilinx cung c\u1ea5p th\u00eam IPCore Clocking Wizard nh\u1eb1m t\u1ea1o giao di\u1ec7n l\u00e0m vi\u1ec7c \u0111\u01a1n gi\u1ea3n cho ng\u01b0\u1eddi d\u00f9ng khi s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean clock tr\u00ean chip FPGA. Trong qu\u00e1 tr\u00ecnh ch\u1ea1y (run-time), c\u00e1c clock synthesizer c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh l\u1ea1i \u0111\u1ec3 c\u00f3 th\u1ec3 thay \u0111\u1ed5i \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb t\u1ea7n s\u1ed1 \u0111\u1ea7u ra. Configuration Gi\u00e1 tr\u1ecb t\u1ea7n s\u1ed1 c\u1ee7a m\u1ed9t \u0111\u1ea7u ra c\u1ee7a kh\u1ed1i clock wizard \u0111\u01b0\u1ee3c t\u00ednh nh\u01b0 sau: VCO = CLKin * CLKFBOUT_MULT/DIVCLK_DIVICE CLKOUT0 = VCO / CLKOUT0_DIVIDE Trong qu\u00e1 tr\u00ecnh ch\u1ea1y, khi thay \u0111\u1ed5i c\u00e1c gi\u00e1 tr\u1ecb CLKFBOUT_MULT (Reg-offset: 0x200) ho\u1eb7c gi\u00e1 tr\u1ecb CLOCKOUT0_DEVICE (Reg-offset: 0x208) th\u00ec gi\u00e1 tr\u1ecb CLKOUT0 s\u1ebd thay \u0111\u1ed5i. Tham kh\u1ea3o th\u00eam Register Space trong t\u00e0i li\u1ec7u PG065. Quy tr\u00ecnh c\u1ea5u h\u00ecnh lai clock Trong PG065 m\u00f4 t\u1ea3 quy tr\u00ecnh c\u1ea5u h\u00ecnh l\u1ea1i clock t\u1ea1i \"Dynamic Reconfiguration through AXI4-Lite\" L\u01b0u \u00fd qu\u00e1 tr\u00ecnh c\u1ea5u h\u00ecnh: Nh\u1eadp m\u1edbi gi\u00e1 tr\u1ecb thanh ghi Ghi gi\u00e1 tr\u1ecb 0x7 v\u00e0o thanh ghi 0x25c Ghi gi\u00e1 tr\u1ecb 0x3 v\u00e0o thanh ghi 0x25c This configuration sequence is referenced from Clocking Wizard example design. References","title":"Clocking Wizard"},{"location":"lnx/cmds/","text":"xclip copy a termial content to clipboard cat \"filename.txt\" | xclip -selection clipboard","title":"Commands"},{"location":"lnx/cmds/#xclip","text":"copy a termial content to clipboard cat \"filename.txt\" | xclip -selection clipboard","title":"xclip"},{"location":"lnx/linux/","text":"Update-rc.d Update-rc.d - wiki.linuxquestions.org SUSv3 Single UNIX Specification - SUS.","title":"Unsorted"},{"location":"lnx/linux/#update-rcd","text":"Update-rc.d - wiki.linuxquestions.org","title":"Update-rc.d"},{"location":"lnx/linux/#susv3","text":"Single UNIX Specification - SUS.","title":"SUSv3"},{"location":"lnx_es/cmn_tool/","text":"Common Tool A list about tools which is often used when developing a embedded system. Makefile & make system Version Control Git, SVN, RTC ...","title":"Common Tools"},{"location":"lnx_es/cmn_tool/#common-tool","text":"A list about tools which is often used when developing a embedded system. Makefile & make system Version Control Git, SVN, RTC ...","title":"Common Tool"},{"location":"lnx_es/es/","text":"Embedded Linux System Development Vu Tang - 2/2019 Embedded Linux System Development - What I have to do? Kh\u00e1i ni\u1ec7m ph\u00e1t tri\u1ec3n m\u1ed9t h\u1ec7 nh\u00fang Linux r\u1ea5t r\u1ed9ng. Nhi\u1ec7m v\u1ee5 ch\u00ednh c\u1ee7a m\u1ed9t \"Embedded System Engineer\" s\u1ebd l\u00e0: Porting Linux OS cho m\u1ed9t custom board T\u00edch h\u1ee3p ho\u1eb7c ph\u00e1t tri\u1ec3n c\u00e1c User-space application cho m\u1ed9t h\u1ec7 nh\u00fang Ph\u00e1t tri\u1ec3n Linux Device Driver cho c\u00e1c ngo\u1ea1i vi Porting Linux Porting Linux, \u1edf m\u1ed9t kh\u00eda c\u1ea1nh kh\u00e1i qu\u00e1t, l\u00e0 qu\u00e1 tr\u00ecnh l\u00e0m cho m\u1ed9t bo m\u1ea1ch m\u1edbi kh\u1edfi \u0111\u1ed9ng v\u1edbi h\u1ec7 \u0111i\u1ec1u h\u00e0nh Linux. \u0110\u1ec3 ho\u00e0n th\u00e0nh \u0111\u01b0\u1ee3c nhi\u1ec7m v\u1ee5 n\u00e0y c\u1ea7n t\u1ed5 h\u1ee3p r\u1ea5t nhi\u1ec1u ki\u1ebfn th\u1ee9c kh\u00e1c nhau. Trong \u0111\u00f3 c\u00f3 m\u1ed9t s\u1ed1 m\u1ee5c c\u1ea7n l\u01b0u \u00fd sau: Ki\u1ebfn tr\u00fac m\u00e1y t\u00ednh (Computer system architecture). Ki\u1ebfn tr\u00fac chung c\u1ee7a m\u1ed9t h\u1ec7 m\u00e1y t\u00ednh, c\u00e1c th\u00e0nh ph\u1ea7n c\u1ea5u th\u00e0nh. Qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng c\u1ee7a m\u1ed9t CPU. Tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh. Qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng c\u1ee7a compiler, c\u00e1c kh\u00e1i ni\u1ec7m li\u00ean quan \u0111\u1ebfn make system (Makefile). Ngo\u00e0i ra trong m\u1ee5c n\u00e0y c\u0169ng c\u00f3 th\u1ec3 m\u1edf r\u1ed9ng \u0111\u1ebfn c\u00e1c c\u00f4ng c\u1ee5 s\u1eed d\u1ee5ng cho porting linux nh\u01b0: Xilinx Petalinux , Yocto Bitbake ... Linux booting sequence. C\u00e1c kh\u00e1i ni\u1ec7m li\u00ean quan \u0111\u1ebfn bootloader c\u0169ng nh\u01b0ng qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng c\u1ee7a Linux kernel . Qu\u00e1 tr\u00ecnh mounting root file system . Embedded application development M\u1ed9t c\u00e1ch minh h\u1ecda, m\u00e1y t\u00ednh c\u00e1 nh\u00e2n sau khi c\u00e0i \u0111\u1eb7t xong h\u1ec7 \u0111i\u1ec1u h\u00e0nh, ng\u01b0\u1eddi d\u00f9ng ti\u1ebfn h\u00e0nh c\u00e0i \u0111\u1eb7t c\u00e1c \u1ee9ng d\u1ee5ng (v\u00ed d\u1ee5 nh\u01b0 Office...) \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c nhi\u1ec7m v\u1ee5 (v\u00ed d\u1ee5 nh\u01b0 so\u1ea1n th\u1ea3o v\u0103n b\u1ea3n...). M\u1ed9t h\u1ec7 nh\u00fang c\u0169ng t\u01b0\u01a1ng t\u1ef1 v\u1eady. Qu\u00e1 tr\u00ecnh poring Linux gi\u00fap board kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng v\u1edbi h\u1ec7 \u0111i\u1ec1u h\u00e0nh, k\u1ef9 s\u01b0 c\u1ea7n ph\u00e1t tri\u1ec3n th\u00eam c\u00e1c \u1ee9ng d\u1ee5ng nh\u00fang t\u00f9y theo y\u00eau c\u1ea7u c\u1ee7a t\u1eebng h\u1ec7 th\u1ed1ng. T\u00edch h\u1ee3p v\u00e0 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng c\u00f3 th\u1ec3 chia l\u00e0m hai lo\u1ea1i: C\u00e1c \u1ee9ng d\u1ee5ng m\u00e3 ngu\u1ed3n m\u1edf (open source) \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi c\u1ed9ng \u0111\u1ed3ng. Nhi\u1ec7m v\u1ee5 c\u1ee7a k\u1ef9 s\u01b0 trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y l\u00e0 t\u00edch h\u1ee3p \u0111\u01b0\u1ee3c \u1ee9ng d\u1ee5ng n\u00e0y v\u00e0o h\u1ec7 th\u1ed1ng c\u1ee7a m\u00ecnh. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, k\u1ef9 s\u01b0 c\u00f3 th\u1ec3 k\u1ebft h\u1ee3p t\u00edch h\u1ee3p v\u00e0 t\u00f9y bi\u1ebfn l\u1ea1i m\u00e3 ngu\u1ed3n \u0111\u1ec3 ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng h\u1ec7 th\u1ed1ng. M\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m quan tr\u1ecdng c\u1ea7n l\u01b0u \u00fd trong m\u1ee5c n\u00e0y l\u00e0: Cross compling C\u00e1c h\u1ec7 th\u1ed1ng build nh\u01b0 cmake, autoconf, make ... C\u00e1c \u1ee9ng d\u1ee5ng \u0111\u1eb7c bi\u1ec7t ch\u1ec9 c\u00f3 t\u1ea1i h\u1ec7 th\u1ed1ng. C\u00e1c h\u1ec7 nh\u00fang th\u1ef1c hi\u1ec7n c\u00e1c nhi\u1ec7m v\u1ee5 \u0111\u1eb7c th\u00f9, do \u0111\u00f3 k\u1ef9 s\u01b0 \u0111\u1eb7c trong r\u1ea5t nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p c\u1ea7n ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng cho h\u1ec7 nh\u00fang (c\u00e1c \u1ee9ng d\u1ee5ng n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi c\u1ed9ng \u0111\u1ed3ng). Quy tr\u00ecnh ph\u00e1t tri\u1ec3n m\u1ed9t \u1ee9ng d\u1ee5ng tr\u00ean h\u1ec7 nh\u00fang Linux kh\u00f4ng qu\u00e1 kh\u00e1c bi\u1ec7t so v\u1edbi ph\u00e1t tri\u1ec3n m\u1ed9t \u1ee9ng d\u1ee5ng tr\u00ean Linux Destop. Linux Device Driver Qu\u00e1 tr\u00ecnh porting gi\u00fap board c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng v\u1edbi h\u1ec7 \u0111i\u1ec1u h\u00e0nh (Linux) nh\u01b0ng kh\u00f4ng \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c t\u1ea5t c\u1ea3 c\u00e1c t\u00e0i nguy\u00ean ph\u1ea7n c\u1ee9ng tr\u00ean board \u0111\u00e3 c\u00f3 c\u00e1c driver (*) t\u01b0\u01a1ng \u1ee9ng. Nhi\u1ec7m v\u1ee5 c\u1ee7a k\u1ef9 s\u01b0 trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y s\u1ebd l\u00e0: Poring c\u00e1c driver cho c\u00e1c ph\u1ea7n c\u1ee9ng. M\u1ed9t s\u1ed1 ph\u1ea7n c\u1ee9ng cung c\u1ea5p b\u1edfi c\u00e1c vendor s\u1ebd \u0111i k\u00e8m m\u00e3 ngu\u1ed3n cho driver, nhi\u1ec7m v\u1ee5 c\u1ee7a k\u1ef9 s\u01b0 l\u00e0 t\u00edch h\u1ee3p driver n\u00e0y v\u00e0o h\u1ec7 th\u1ed1ng \u0111\u1ec3 c\u00f3 th\u1ec3 t\u01b0\u01a1ng th\u00edch \u0111\u01b0\u1ee3c v\u1edbi ph\u1ea7n c\u1ee9ng. Ph\u00e1t tri\u1ec3n c\u00e1c driver cho c\u00e1c ph\u1ea7n c\u1ee9ng chuy\u00ean d\u1ee5ng tr\u00ean board. (*) Kh\u00e1i ni\u1ec7m driver s\u1ebd \u0111\u01b0\u1ee3c th\u1ea3o lu\u1eadn th\u00eam \u1edf c\u00e1c t\u00e0i li\u1ec7u chuy\u00ean s\u00e2u kh\u00e1c. References [1] - Embedded Linux system development - bootlin.com","title":"Overview"},{"location":"lnx_es/es/#embedded-linux-system-development","text":"Vu Tang - 2/2019","title":"Embedded Linux System Development"},{"location":"lnx_es/es/#embedded-linux-system-development-what-i-have-to-do","text":"Kh\u00e1i ni\u1ec7m ph\u00e1t tri\u1ec3n m\u1ed9t h\u1ec7 nh\u00fang Linux r\u1ea5t r\u1ed9ng. Nhi\u1ec7m v\u1ee5 ch\u00ednh c\u1ee7a m\u1ed9t \"Embedded System Engineer\" s\u1ebd l\u00e0: Porting Linux OS cho m\u1ed9t custom board T\u00edch h\u1ee3p ho\u1eb7c ph\u00e1t tri\u1ec3n c\u00e1c User-space application cho m\u1ed9t h\u1ec7 nh\u00fang Ph\u00e1t tri\u1ec3n Linux Device Driver cho c\u00e1c ngo\u1ea1i vi","title":"Embedded Linux System Development - What I have to do?"},{"location":"lnx_es/es/#porting-linux","text":"Porting Linux, \u1edf m\u1ed9t kh\u00eda c\u1ea1nh kh\u00e1i qu\u00e1t, l\u00e0 qu\u00e1 tr\u00ecnh l\u00e0m cho m\u1ed9t bo m\u1ea1ch m\u1edbi kh\u1edfi \u0111\u1ed9ng v\u1edbi h\u1ec7 \u0111i\u1ec1u h\u00e0nh Linux. \u0110\u1ec3 ho\u00e0n th\u00e0nh \u0111\u01b0\u1ee3c nhi\u1ec7m v\u1ee5 n\u00e0y c\u1ea7n t\u1ed5 h\u1ee3p r\u1ea5t nhi\u1ec1u ki\u1ebfn th\u1ee9c kh\u00e1c nhau. Trong \u0111\u00f3 c\u00f3 m\u1ed9t s\u1ed1 m\u1ee5c c\u1ea7n l\u01b0u \u00fd sau: Ki\u1ebfn tr\u00fac m\u00e1y t\u00ednh (Computer system architecture). Ki\u1ebfn tr\u00fac chung c\u1ee7a m\u1ed9t h\u1ec7 m\u00e1y t\u00ednh, c\u00e1c th\u00e0nh ph\u1ea7n c\u1ea5u th\u00e0nh. Qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng c\u1ee7a m\u1ed9t CPU. Tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh. Qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng c\u1ee7a compiler, c\u00e1c kh\u00e1i ni\u1ec7m li\u00ean quan \u0111\u1ebfn make system (Makefile). Ngo\u00e0i ra trong m\u1ee5c n\u00e0y c\u0169ng c\u00f3 th\u1ec3 m\u1edf r\u1ed9ng \u0111\u1ebfn c\u00e1c c\u00f4ng c\u1ee5 s\u1eed d\u1ee5ng cho porting linux nh\u01b0: Xilinx Petalinux , Yocto Bitbake ... Linux booting sequence. C\u00e1c kh\u00e1i ni\u1ec7m li\u00ean quan \u0111\u1ebfn bootloader c\u0169ng nh\u01b0ng qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng c\u1ee7a Linux kernel . Qu\u00e1 tr\u00ecnh mounting root file system .","title":"Porting Linux"},{"location":"lnx_es/es/#embedded-application-development","text":"M\u1ed9t c\u00e1ch minh h\u1ecda, m\u00e1y t\u00ednh c\u00e1 nh\u00e2n sau khi c\u00e0i \u0111\u1eb7t xong h\u1ec7 \u0111i\u1ec1u h\u00e0nh, ng\u01b0\u1eddi d\u00f9ng ti\u1ebfn h\u00e0nh c\u00e0i \u0111\u1eb7t c\u00e1c \u1ee9ng d\u1ee5ng (v\u00ed d\u1ee5 nh\u01b0 Office...) \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c nhi\u1ec7m v\u1ee5 (v\u00ed d\u1ee5 nh\u01b0 so\u1ea1n th\u1ea3o v\u0103n b\u1ea3n...). M\u1ed9t h\u1ec7 nh\u00fang c\u0169ng t\u01b0\u01a1ng t\u1ef1 v\u1eady. Qu\u00e1 tr\u00ecnh poring Linux gi\u00fap board kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng v\u1edbi h\u1ec7 \u0111i\u1ec1u h\u00e0nh, k\u1ef9 s\u01b0 c\u1ea7n ph\u00e1t tri\u1ec3n th\u00eam c\u00e1c \u1ee9ng d\u1ee5ng nh\u00fang t\u00f9y theo y\u00eau c\u1ea7u c\u1ee7a t\u1eebng h\u1ec7 th\u1ed1ng. T\u00edch h\u1ee3p v\u00e0 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng c\u00f3 th\u1ec3 chia l\u00e0m hai lo\u1ea1i: C\u00e1c \u1ee9ng d\u1ee5ng m\u00e3 ngu\u1ed3n m\u1edf (open source) \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi c\u1ed9ng \u0111\u1ed3ng. Nhi\u1ec7m v\u1ee5 c\u1ee7a k\u1ef9 s\u01b0 trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y l\u00e0 t\u00edch h\u1ee3p \u0111\u01b0\u1ee3c \u1ee9ng d\u1ee5ng n\u00e0y v\u00e0o h\u1ec7 th\u1ed1ng c\u1ee7a m\u00ecnh. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, k\u1ef9 s\u01b0 c\u00f3 th\u1ec3 k\u1ebft h\u1ee3p t\u00edch h\u1ee3p v\u00e0 t\u00f9y bi\u1ebfn l\u1ea1i m\u00e3 ngu\u1ed3n \u0111\u1ec3 ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng h\u1ec7 th\u1ed1ng. M\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m quan tr\u1ecdng c\u1ea7n l\u01b0u \u00fd trong m\u1ee5c n\u00e0y l\u00e0: Cross compling C\u00e1c h\u1ec7 th\u1ed1ng build nh\u01b0 cmake, autoconf, make ... C\u00e1c \u1ee9ng d\u1ee5ng \u0111\u1eb7c bi\u1ec7t ch\u1ec9 c\u00f3 t\u1ea1i h\u1ec7 th\u1ed1ng. C\u00e1c h\u1ec7 nh\u00fang th\u1ef1c hi\u1ec7n c\u00e1c nhi\u1ec7m v\u1ee5 \u0111\u1eb7c th\u00f9, do \u0111\u00f3 k\u1ef9 s\u01b0 \u0111\u1eb7c trong r\u1ea5t nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p c\u1ea7n ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng cho h\u1ec7 nh\u00fang (c\u00e1c \u1ee9ng d\u1ee5ng n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi c\u1ed9ng \u0111\u1ed3ng). Quy tr\u00ecnh ph\u00e1t tri\u1ec3n m\u1ed9t \u1ee9ng d\u1ee5ng tr\u00ean h\u1ec7 nh\u00fang Linux kh\u00f4ng qu\u00e1 kh\u00e1c bi\u1ec7t so v\u1edbi ph\u00e1t tri\u1ec3n m\u1ed9t \u1ee9ng d\u1ee5ng tr\u00ean Linux Destop.","title":"Embedded application development"},{"location":"lnx_es/es/#linux-device-driver","text":"Qu\u00e1 tr\u00ecnh porting gi\u00fap board c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng v\u1edbi h\u1ec7 \u0111i\u1ec1u h\u00e0nh (Linux) nh\u01b0ng kh\u00f4ng \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c t\u1ea5t c\u1ea3 c\u00e1c t\u00e0i nguy\u00ean ph\u1ea7n c\u1ee9ng tr\u00ean board \u0111\u00e3 c\u00f3 c\u00e1c driver (*) t\u01b0\u01a1ng \u1ee9ng. Nhi\u1ec7m v\u1ee5 c\u1ee7a k\u1ef9 s\u01b0 trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y s\u1ebd l\u00e0: Poring c\u00e1c driver cho c\u00e1c ph\u1ea7n c\u1ee9ng. M\u1ed9t s\u1ed1 ph\u1ea7n c\u1ee9ng cung c\u1ea5p b\u1edfi c\u00e1c vendor s\u1ebd \u0111i k\u00e8m m\u00e3 ngu\u1ed3n cho driver, nhi\u1ec7m v\u1ee5 c\u1ee7a k\u1ef9 s\u01b0 l\u00e0 t\u00edch h\u1ee3p driver n\u00e0y v\u00e0o h\u1ec7 th\u1ed1ng \u0111\u1ec3 c\u00f3 th\u1ec3 t\u01b0\u01a1ng th\u00edch \u0111\u01b0\u1ee3c v\u1edbi ph\u1ea7n c\u1ee9ng. Ph\u00e1t tri\u1ec3n c\u00e1c driver cho c\u00e1c ph\u1ea7n c\u1ee9ng chuy\u00ean d\u1ee5ng tr\u00ean board. (*) Kh\u00e1i ni\u1ec7m driver s\u1ebd \u0111\u01b0\u1ee3c th\u1ea3o lu\u1eadn th\u00eam \u1edf c\u00e1c t\u00e0i li\u1ec7u chuy\u00ean s\u00e2u kh\u00e1c.","title":"Linux Device Driver"},{"location":"lnx_es/es/#references","text":"[1] - Embedded Linux system development - bootlin.com","title":"References"},{"location":"lnx_es/hw_platform/","text":"List of hardware platforms Xilinx Zynq7000 SoC The Zynq\u00ae-7000 family is based on the Xilinx SoC architecture. These products integrate a feature-rich dual-core or single-core ARM\u00ae Cortex\u2122-A9 based processing system (PS) and 28 nm Xilinx programmable logic (PL) in a single device. The ARM Cortex-A9 CPUs are the heart of the PS and also include on-chip memory, external memory interfaces, and a rich set of peripheral connectivity interfaces (quoted from DS190 ). Xilinx Zynq UltraScale+ UltraScale+ Overview ZCU102 Xilinx Zynq UltraScale+ MPSoC ZCU102 Evaluation Kit Raspberry Pi The Raspberry Pi 3 Model B is the earliest model of the third-generation Raspberry Pi. It replaced the Raspberry Pi 2 Model B in February 2016. See also the Raspberry Pi 3 Model B+, the latest product in the Raspberry Pi 3 range. Quad Core 1.2GHz Broadcom BCM2837 64bit CPU 1GB RAM BCM43438 wireless LAN and Bluetooth Low Energy (BLE) on board 100 Base Ethernet, 40-pin extended GPIO 4 USB 2 ports, 4 Pole stereo output and composite video port Full size HDMI iMX6","title":"HW Platforms"},{"location":"lnx_es/hw_platform/#list-of-hardware-platforms","text":"","title":"List of hardware platforms"},{"location":"lnx_es/hw_platform/#xilinx-zynq7000-soc","text":"The Zynq\u00ae-7000 family is based on the Xilinx SoC architecture. These products integrate a feature-rich dual-core or single-core ARM\u00ae Cortex\u2122-A9 based processing system (PS) and 28 nm Xilinx programmable logic (PL) in a single device. The ARM Cortex-A9 CPUs are the heart of the PS and also include on-chip memory, external memory interfaces, and a rich set of peripheral connectivity interfaces (quoted from DS190 ).","title":"Xilinx Zynq7000 SoC"},{"location":"lnx_es/hw_platform/#xilinx-zynq-ultrascale","text":"UltraScale+ Overview","title":"Xilinx Zynq UltraScale+"},{"location":"lnx_es/hw_platform/#zcu102","text":"Xilinx Zynq UltraScale+ MPSoC ZCU102 Evaluation Kit","title":"ZCU102"},{"location":"lnx_es/hw_platform/#raspberry-pi","text":"The Raspberry Pi 3 Model B is the earliest model of the third-generation Raspberry Pi. It replaced the Raspberry Pi 2 Model B in February 2016. See also the Raspberry Pi 3 Model B+, the latest product in the Raspberry Pi 3 range. Quad Core 1.2GHz Broadcom BCM2837 64bit CPU 1GB RAM BCM43438 wireless LAN and Bluetooth Low Energy (BLE) on board 100 Base Ethernet, 40-pin extended GPIO 4 USB 2 ports, 4 Pole stereo output and composite video port Full size HDMI","title":"Raspberry Pi"},{"location":"lnx_es/hw_platform/#imx6","text":"","title":"iMX6"},{"location":"lnx_es/ptlnx/","text":"Xilinx B\u1ed9 c\u00f4ng c\u1ee5 cung c\u1ea5p b\u1edfi Xilinx s\u1eed d\u1ee5ng \u0111\u1ec3 porting Linux cho c\u00e1c d\u00f2ng s\u1ea3n ph\u1ea9m li\u00ean quan \u0111\u1ebfn Zynq7000. Petalinux 2015.4 & 2014.2 Petalinux 2017.4 L\u00e0 version th\u1ec3 hi\u1ec7n r\u00f5 c\u1ee7a qu\u00e1 tr\u00ecnh \u1ee9ng d\u1ee5ng Yocto trong x\u00e2y d\u1ef1ng Petalinux. Petalinux 2018.2 Petalinux Images Another tools C\u00e1c c\u00f4ng c\u1ee5 kh\u00e1c \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong qu\u00e1 tr\u00ecnh porting linux cho ph\u1ea7n c\u1ee9ng c\u1ee7a Xilinx. XSCT","title":"Xilinx Petalinux"},{"location":"lnx_es/ptlnx/#xilinx","text":"B\u1ed9 c\u00f4ng c\u1ee5 cung c\u1ea5p b\u1edfi Xilinx s\u1eed d\u1ee5ng \u0111\u1ec3 porting Linux cho c\u00e1c d\u00f2ng s\u1ea3n ph\u1ea9m li\u00ean quan \u0111\u1ebfn Zynq7000.","title":"Xilinx"},{"location":"lnx_es/ptlnx/#petalinux-20154-20142","text":"","title":"Petalinux 2015.4 &amp; 2014.2"},{"location":"lnx_es/ptlnx/#petalinux-20174","text":"L\u00e0 version th\u1ec3 hi\u1ec7n r\u00f5 c\u1ee7a qu\u00e1 tr\u00ecnh \u1ee9ng d\u1ee5ng Yocto trong x\u00e2y d\u1ef1ng Petalinux.","title":"Petalinux 2017.4"},{"location":"lnx_es/ptlnx/#petalinux-20182","text":"","title":"Petalinux 2018.2"},{"location":"lnx_es/ptlnx/#petalinux-images","text":"","title":"Petalinux Images"},{"location":"lnx_es/ptlnx/#another-tools","text":"C\u00e1c c\u00f4ng c\u1ee5 kh\u00e1c \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong qu\u00e1 tr\u00ecnh porting linux cho ph\u1ea7n c\u1ee9ng c\u1ee7a Xilinx.","title":"Another tools"},{"location":"lnx_es/ptlnx/#xsct","text":"","title":"XSCT"},{"location":"lnx_es/ptlnx_20174/","text":"Petalinux 2017.4 technical note Vu Tang - 2/2019 Introdutions T\u00e0i li\u1ec7u n\u00e0y l\u00e0 t\u1ed5ng h\u1ee3p c\u00e1c \u0111i\u1ec3m l\u01b0u \u00fd trong qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c v\u1edbi Petalinux 2017.4. Version 2017.4 n\u00e0y c\u1ee7a Xilinx l\u00e0 m\u1ed9t th\u1ec3 hi\u1ec7n r\u00f5 r\u00e0ng c\u1ee7a vi\u1ec7c \u1ee9ng d\u1ee5ng YOCTO PROJECT trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n m\u1ed9t h\u1ec7 nh\u00fang Linux. \u0110\u1ec3 hi\u1ec3u r\u00f5 h\u01a1n qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c c\u1ee7a petalinux 2017.4, c\u1ea7n t\u00ecm hi\u1ec3u th\u00eam v\u1ec1 nguy\u00ean t\u1eafc ho\u1ea1t \u0111\u1ed9ng c\u1ee7a Yocto. Tips Speed up sstate checking https://forums.xilinx.com/t5/Embedded-Linux/Checking-sstate-mirror-taking-forever/td-p/775404 Diable sstate online in Yocto Worknote build target when use petalinux build is petalinux-user-image.bb. Bitbake file dir: [project dir]/project-spec/meta-plnx-generated/recipes-core/images/petalinux-user-image.bb based-bitbake file be used for all project is found at: [installation dir]/components/yocto/source/ petalinux-build -x clean/distclean is not affect to download dir Removing build/tmp dir need to rebuild all project (except fetching source code). This job takes a while. petalinux-build -x distclean will call bitbake -c cleansstate -> what is cleansstate? clean -> bitbake -c clean. what is defference btw clean & cleansstate $WORKDIR: build/tmp/work/plnx_arm-xilinx-linux-gnueabi/libsample-tar/1.0-r0 Experiences Create and initialize a project Qu\u00e1 tr\u00ecnh kh\u1edfi t\u1ea1o project (1) v\u00e0 import hdf (2) ti\u1ebfn h\u00e0nh t\u01b0\u01a1ng t\u1ef1 v\u1edbi petalinux 2015.4 (xem th\u00eam ug1144 \u0111\u1ec3 bi\u1ebft v\u1ec1 c\u00e1c cmd t\u01b0\u01a1ng \u1ee9ng cho t\u1eebng qu\u00e1 tr\u00ecnh). \u251c\u2500\u2500 config.project \u2514\u2500\u2500 project-spec \u251c\u2500\u2500 attributes \u251c\u2500\u2500 configs \u2502 \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rootfs_config \u251c\u2500\u2500 hw-description \u2502 \u2514\u2500\u2500 metadata \u2514\u2500\u2500 meta-user \u251c\u2500\u2500 conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u251c\u2500\u2500 recipes-apps \u2514\u2500\u2500 recipes-bsp K\u1ebft th\u00fac qu\u00e1 tr\u00ecnh (1), project \u0111\u01b0\u1ee3c t\u1ea1o v\u1edbi th\u01b0 m\u1ee5c \u201cproject-spec\u201d. Trong \u0111\u00f3: Th\u01b0 m\u1ee5c con \u201cconfigs\u201d ch\u1ee9a c\u00e1c c\u1ea5u h\u00ecnh c\u1ee7a project (c\u00e1c c\u1ea5u h\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c thay \u0111\u1ed5i b\u1eb1ng h\u1ecd c\u00e2u l\u1ec7nh \u201cpetalinux-config\u201d). Th\u01b0 m\u1ee5c con \u201chw-description\u201d tr\u1ed1ng. Th\u01b0 m\u1ee5c con \u201cmeta-user\u201d ch\u1ee9a c\u00e1c recipes li\u00ean quan \u0111\u1ebfn user-apps v\u00e0 bsp. Ngoai ra th\u01b0 m\u1ee5c n\u00e0y c\u00f2n ch\u1ee9a trong ./conf c\u00e1c c\u1ea5u h\u00ecnh li\u00ean quan \u0111\u1ebfn Yocto cho Layer meta-user. K\u1ebft th\u00fac qu\u00e1 tr\u00ecnh (2), c\u1ea5u tr\u00fac th\u01b0 m\u1ee5c c\u1ee7a project bi\u1ebfn \u0111\u1ed5i nh\u01b0 h\u00ecnh v\u1ebd d\u01b0\u1edbi \u0111\u00e2y. \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 cache \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 config.log \u2502 \u251c\u2500\u2500 misc \u2502 \u2514\u2500\u2500 tmp \u251c\u2500\u2500 components \u2502 \u2514\u2500\u2500 plnx_workspace \u251c\u2500\u2500 config.project \u2514\u2500\u2500 project-spec \u251c\u2500\u2500 attributes \u251c\u2500\u2500 configs \u251c\u2500\u2500 hw-description \u251c\u2500\u2500 meta-plnx-generated \u251c\u2500\u2500 meta-user \u2514\u2500\u2500 yocto-layer.log Trong \u0111\u00f3, xu\u1ea5t hi\u1ec7n th\u00eam m\u1ed9t s\u1ed1 th\u01b0 m\u1ee5c quan tr\u1ecdng sau: Th\u01b0 m\u1ee5c \u201cbuild\u201d l\u00e0 th\u01b0 m\u1ee5c \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ebf ti\u1ebfn h\u00e0nh c\u00e1c giai \u0111o\u1ea1n trong qu\u00e1 tr\u00ecnh build project. Trong \u0111\u00f3 k\u1ebft qu\u1ea3 trung gian trong c\u00e1c qu\u00e1 tr\u00ecnh build \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef t\u1ea1i \u201ctmp\u201d. Ngo\u00e0i ra, trong c\u00e1c qu\u00e1 tr\u00ecnh ti\u1ebfp theo trong \u201cbuild\u201d s\u1ebd xu\u1ea5t hi\u1ec7n th\u00eam th\u01b0 m\u1ee5c \u201cdownloads\u201d th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng l\u01b0u tr\u1eef c\u00e1c package \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh \u201cdo_fetch\u201d. Th\u01b0 m\u1ee5c \u201ccomponents\u201d trong c\u00e1c phi\u00ean b\u1ea3n petalinux tr\u01b0\u1edbc s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ch\u1ee9a source code li\u00ean quan \u0111\u1ebfn c\u00e1c customed-component c\u1ee7a user. Trong phi\u00ean b\u1ea3n n\u00e0y ch\u01b0a x\u00e1c \u0111\u1ecbnh \u0111\u01b0\u1ee3c ch\u1ee9c n\u0103ng c\u1ee7a th\u01b0 m\u1ee5c component. Xu\u1ea5t hi\u1ec7n th\u00eam Yocto layer \u201cmeta-plnx-generated\u201d trong th\u01b0 m\u1ee5c \u201cproject-spec\u201d, ch\u1ee9a c\u00e1c Yocto recipes li\u00ean quan \u0111\u1ebfn kernel, core, bsp. Xem th\u00eam Apendix A trong t\u00e0i li\u1ec7u ug1144 \u0111\u1ec3 bi\u1ebft th\u00eam th\u00f4ng tin v\u1ec1 Petalinux project structure. Build a new project without Internet \u0110\u1ec3 th\u1ef1c hi\u1ec7n build, ch\u1ea1y l\u1ec7nh \u201cpetalinux-build\u201d. Pre-build configuration B\u1ea3n ch\u1ea5t c\u1ee7a qu\u00e1 tr\u00ecnh n\u00e0y l\u00e0 g\u1ecdi \u0111\u1ebfn target \u201cpetalinux-user-image\u201d c\u1ee7a Yocto project. \u201cChecking sstate mirror object availability\u201d m\u1ea5t r\u1ea5t nhi\u1ec1u th\u1eddi gian \u0111\u1ec3 th\u1ef1c hi\u1ec7n? -> Ti\u1ebfn h\u00e0nh t\u1eaft b\u1ecf ch\u1ee9c n\u0103ng check n\u00e0y trong petalinux-config > Yocto > sstate. Xu\u1ea5t hi\u1ec7n l\u1ed7i li\u00ean quan \u0111\u1ebfn bitbake n\u1ebfu d\u1eebng qu\u00e1 tr\u00ecnh build \u0111\u1ed9t ng\u1ed9t (v\u00ed d\u1ee5 d\u1eebng b\u1eb1ng t\u1ed5 h\u1ee3p ph\u00edm Ctl+C). Solution here: Re-init environment: /home/user/Xilinx/Petalinux/settings.sh /home/user/Xilinx/Petalinux/components/yocto/source/aarch64/environment-setup-aarch64-xilinx-linux Remove ./build/bitbake.lock. C\u00e1c c\u1ea5u h\u00ecnh c\u1ee7a project \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef \u1edf: project-spec/configs/config Do_fetch - What is problem? Trong qu\u00e1 tr\u00ecnh build, petalinux s\u1ebd th\u1ef1c hi\u1ec7n l\u1ea5y c\u00e1c g\u00f3i c\u00f3 s\u1eb5n trong th\u01b0 m\u1ee5c c\u00e0i \u0111\u1eb7t c\u1ee7a petalinux, \u0111\u01b0\u1eddng d\u1eabn nh\u01b0 sau: [Instalation Direction]/components/yocto/downloads. Ngo\u00e0i ra petalinux ti\u1ebfn h\u00e0nh download t\u1eeb Internet th\u00eam c\u00e1c g\u00f3i nh\u01b0: (1) gcc-source-linaro-6.2-linaro-6.2-r2016.11 (2) binutils-cross-arm-linaro-2.27-r2016.10 (3) u-boot-mkimage-native-v2016.03+gitAUTOINC+df61a74e68-r0 (4) binutils-native-linaro-2.27-r2016.10 ... N\u1ebfu trong qu\u00e1 tr\u00ecnh build kh\u00f4ng c\u00f3 k\u1ebft n\u1ed1i Internet s\u1ebd d\u1eabn \u0111\u1ebfn c\u00e1c th\u00f4ng b\u00e1o build l\u1ed7i. V\u00ed d\u1ee5 nh\u01b0: \u201cu-boot-mkimage-native-v2016.03+gitAUTOINC+df61a74e68-r0 do_fetch: Fetcher failure\u201d Nh\u01b0 v\u1eady, b\u1ea3n c\u00e0i \u0111\u1eb7t m\u1eb7c \u0111\u1ecbnh c\u1ee7a petalinux kh\u00f4ng ch\u1ee9a \u0111\u1ee7 c\u00e1c g\u00f3i ph\u1ea7n m\u1ec1m s\u1eed d\u1ee5ng cho qu\u00e1 tr\u00ecnh Yocto build (?). C\u1ea7n c\u00f3 th\u00eam c\u00e1c g\u00f3i sau: git2_git.linaro.org.toolchain.binutils-gdb.git t\u01b0\u01a1ng \u1ee9ng v\u1edbi (2) v\u00e0 (4) git2_git.linaro.org.toolchain.gcc.git t\u01b0\u01a1ng \u1ee9ng v\u1edbi (1) Linaro - what is this? External kernel - How to? Boot from SD card V\u1ec1 c\u01a1 b\u1ea3n, boot t\u1eeb SD Card \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n gi\u1ed1ng v\u1edbi h\u01b0\u1edbng d\u1eabn trong m\u1ee5c Zedboard . T\u1ec7p rootfs.cpio \u0111\u01b0\u1ee3c ch\u1ee9a trong th\u01b0 m\u1ee5c /image/linux/ s\u1eb5n s\u00e0ng cho qu\u00e1 tr\u00ecnh \u0111\u01b0a l\u00ean th\u1ebb nh\u1edb. Mounting SD card in booting-time Refer PetaLinux Yocto Tips (xilinx-wiki.atlassian.net) for step-by-step instructions. Add user custom package B\u1ea3n ch\u1ea5t qu\u1ea3n l\u00fd g\u00f3i ph\u1ea7n m\u1ec1m trong petalinux l\u00e0 Yocto project. M\u00e3 ngu\u1ed3n c\u1ee7a c\u00e1c g\u00f3i ph\u1ea7n m\u1ec1m c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c download t\u1eeb c\u00e1c online repository ho\u1eb7c l\u01b0u tr\u1eef tr\u1ef1c ti\u1ebfp tr\u00ean m\u00e1y local. Trong m\u1ee5c n\u00e0y s\u1ebd l\u1ea5y v\u00ed d\u1ee5 v\u1ec1 m\u1ed9t g\u00f3i ph\u1ea7n m\u1ec1m ph\u1ed5 bi\u1ebfn, hay \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong qu\u00e1 tr\u00ecnh \u0111\u00e1nh gi\u00e1 ch\u1ea5t l\u01b0\u1ee3ng m\u1ea1ng: IPERF. Petalinux s\u1ebd th\u1ef1c hi\u1ec7n t\u1ea3i source code c\u1ee7a iperf t\u1eeb Github sau \u0111\u00f3 ti\u1ebfn h\u00e0nh c\u1ea5u h\u00ecnh, build v\u00e0 t\u00edch h\u1ee3p v\u00e0o h\u1ec7 th\u1ed1ng. Khi kh\u1edfi t\u1ea1o m\u1ed9t \u1ee9ng d\u1ee5ng (apps) m\u1edbi, m\u1ed9t package \u0111\u01b0\u1ee3c t\u1ea1o t\u1ea1i project-spec/meta-user/recipes-apps . C\u1ea5u tr\u00fac c\u1ee7a m\u1ed9t recipes nh\u01b0 sau: vux-iperf/ \u251c\u2500\u2500 files \u2502 \u251c\u2500\u2500 0002-Remove-pg-from-profile_CFLAGS.patch \u2502 \u2514\u2500\u2500 automake-foreign.patch \u251c\u2500\u2500 README \u2514\u2500\u2500 vux-iperf.bb Trong v\u00ed d\u1ee5 l\u00e0 c\u1ea5u h\u00ecnh \u0111\u1ec3 build b\u1ea3n ph\u1ea7n m\u1ec1m iperf3. Bitbake file cho recipes n\u00e0y \u0111\u01b0\u1ee3c t\u1ea3i t\u1ea1i iperf3 3.6 (layers.openembedded.org). N\u1ed9i dung file iperf3_3.6.bb nh\u01b0 sau: SUMMARY = \"Network benchmark tool\" HOMEPAGE = \"http://software.es.net/iperf/\" SECTION = \"console/network\" BUGTRACKER = \"https://github.com/esnet/iperf/issues\" AUTHOR = \"ESNET <info@es.net>, Lawrence Berkeley National Laboratory <websupport@lbl.gov>\" LICENSE = \"BSD\" LIC_FILES_CHKSUM = \"file://LICENSE;md5=a9a036136b748453e839c0eb8906ef2e\" DEPENDS = \"openssl\" SRC_URI = \"git://github.com/esnet/iperf.git \\ file://automake-foreign.patch \\ file://0002-Remove-pg-from-profile_CFLAGS.patch \\ \" SRCREV = \"88f3ad87f38762081a6d7127890ff5c3a052b06a\" S = \"${WORKDIR}/git\" inherit autotools PACKAGECONFIG[lksctp] = \"ac_cv_header_netinet_sctp_h=yes,ac_cv_header_netinet_sctp_h=no,lksctp-tools\" CFLAGS += \"-D_GNU_SOURCE\" EXTRA_OECONF = \"--with-openssl=${RECIPE_SYSROOT}${prefix}\" BBCLASSEXTEND = \"native\" http://cgit.openembedded.org/meta-openembedded/tree/meta-oe/recipes-benchmark/iperf3/iperf3_3.6.bb?h=master Trong file vux-iperf.bb c\u00f3 m\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m v\u00e0 th\u00f4ng tin c\u1ea7n l\u01b0u \u00fd nh\u01b0 sau. \u0110\u01b0\u1eddng d\u1eabn \u0111\u1ebfn source code c\u1ee7a package Tham s\u1ed1 SRC_URI ch\u1ee9a \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn source code c\u1ee7a pakcage. Th\u00f4ng qua th\u00f4ng tin ch\u1ee9a trong \u0111\u01b0\u1eddng d\u1eabn n\u00e0y, bitbake th\u1ef1c hi\u1ec7n nhi\u1ec7m v\u1ee5 do_fetch. SRC_URI = \"git://github.com/esnet/iperf.git \\ file://automake-foreign.patch \\ Trong v\u00ed d\u1ee5 n\u00e0y, SRC_URI ch\u1ec9 \u0111\u1ebfn m\u1ed9t git repository c\u1ee7a esnet. Ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 truy c\u1eadp tr\u1ef1c ti\u1ebfp v\u00e0o repo n\u00e0y \u0111\u1ec3 xem source code. Ngo\u00e0i ra SRC_URI ch\u1ec9 \u0111\u1ebfn m\u1ed9t file \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef local ch\u1ee9a b\u1ea3n patch. B\u1ea3n patch n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y tr\u00ean openembedded.org. Revision c\u1ee7a source code Tham s\u1ed1 SRCREV ch\u1ec9 cho bitbake bi\u1ebft \u0111\u01b0\u1ee3c revision n\u00e0o c\u1ee7a source code c\u1ea7n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 build package. SRCREV = \"88d907f7fb58bfab5d086c5da60c922e1c582c92\" Ngo\u00e0i ra, SRCREV c\u00f2n c\u00f3 th\u1ec3 cung c\u1ea5p th\u00eam c\u00e1c th\u00f4ng tin nh\u01b0 sau: protocol: giao th\u1ee9c s\u1eed d\u1ee5ng \u0111\u1ec3 fetch source code (protocol=https...) branch: branch mong mu\u1ed1n fetch source code (branch=master...) T\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed7i revision ch\u1ee9a m\u1ed9t file LICENSE \u0111i k\u00e8m v\u1edbi MD5SUM. LIC_FILES_CHKSUM = \"file://LICENSE;md5=d098223e44bdd19585315ee75cd9d2d7\" L\u01b0u \u00fd r\u1eb1ng LIC_FILES c\u00f3 th\u1ec3 l\u00e0 LICENSE ho\u1eb7c b\u1ea5t c\u1ee9 t\u00ean kh\u00e1c. petalinux-image.bbappend L\u01b0u tr\u1eef t\u1ea1i project-spec/meta-user/recipes-core/images/petalinux-image.bbappend ch\u1ee9a c\u00e1c package c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c install v\u00e0o h\u1ec7 th\u1ed1ng. Khi x\u00f3a c\u00e1c package trong file n\u00e0y s\u1ebd \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn petalinux-config -c rootfs. Application Auto Run at Startup Thu\u1eadt ng\u1eef: update-rc.d , System V C\u00e1c \u1ee9ng d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t tr\u00ean Rootfs d\u01b0\u1edbi d\u1ea1ng c\u00e1c binary v\u00e0 th\u00f4ng th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c kh\u1edfi \u0111\u1ed9ng khi c\u00f3 y\u00eau c\u1ea7u c\u1ee7a ng\u01b0\u1eddi d\u00f9ng. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p \u1ee9ng d\u1ee5ng c\u1ea7n kh\u1edfi \u0111\u1ed9ng trong qu\u00e1 tr\u00ecnh booting c\u00f9ng h\u1ec7 th\u1ed1ng. \u00dd t\u01b0\u1edfng cho ph\u01b0\u01a1ng ph\u00e1p n\u00e0y l\u00e0 s\u1eed d\u1ee5ng Yocto class update-rc.d.bbclass \u0111\u1ec3 c\u00e0i \u0111\u1eb7t init script d\u1ea1ng System V v\u00e0o h\u1ec7 th\u1ed1ng. update-rc.d.bbclass s\u1eed d\u1ee5ng update-rc.d (a Debian utility) \u0111\u1ec1 \"safety install\" init script v\u00e0o h\u1ec7 th\u1ed1ng. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 recipe file c\u1ee7a m\u1ed9t package y\u00eau c\u1ea7u Yocto ti\u1ebfn h\u00e0nh c\u00e0i \u0111\u1eb7t m\u1ed9t init script v\u00e0o h\u1ec7 th\u1ed1ng. SUMMARY = \"Simple iiod-init application\" SECTION = \"PETALINUX/apps\" LICENSE = \"MIT\" LIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\" SRC_URI = \"file://iiod-init \\ \" S = \"${WORKDIR}\" FILESEXTRAPATHS_prepend := \"${THISDIR}/files:\" inherit update-rc.d INITSCRIPT_NAME = \"iiod-init\" INITSCRIPT_PARAMS = \"start 99 S .\" do_install() { install -d ${D}${sysconfdir}/init.d install -m 0755 ${S}/iiod-init ${D}${sysconfdir}/init.d/iiod-init } FILES_${PN} += \"${sysconfdir}/*\" M\u1ed9t s\u1ed1 \u0111i\u1ec3m l\u01b0u \u00fd trong recipe: inherit update-rc.d : g\u1ecdi \u0111\u1ebfn class update-rc.d . INITSCRIPT_NAME & INITSCRIPT_PARAMS : l\u00e0 c\u00e1c bi\u1ebfn s\u1ed1 cho class update-rc.d . Tham kh\u1ea3o th\u00eam t\u1ea1i update-rc.d.bbclass c\u1ee7a Yocto ref-manual. init script trong recipe n\u00e0y l\u00e0 \"iiod-init\" \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i bi\u1ebfn INITSCRIPT_NAME . G\u00f3i c\u1ea7n cung c\u1ea5p m\u00e3 ngu\u1ed3n l\u00e0 script iiod-init . Init script c\u1ea7n \u0111\u01b0\u1ee3c vi\u1ebft theo System V init style. V\u1ec1 c\u01a1 b\u1ea3n script c\u1ea7n cung c\u1ea5p \u0111\u01b0\u1ee3c c\u00e1c ph\u01b0\u01a1ng th\u1ee9c: start , stop v\u00e0 restart . C\u00e1c ph\u01b0\u01a1ng th\u1ee9c n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u00e1c \u0111\u1ed9ng \u0111\u1ebfn ch\u01b0\u01a1ng tr\u00ecnh.","title":"Petalinux 2017.4 technical note"},{"location":"lnx_es/ptlnx_20174/#petalinux-20174-technical-note","text":"Vu Tang - 2/2019","title":"Petalinux 2017.4 technical note"},{"location":"lnx_es/ptlnx_20174/#introdutions","text":"T\u00e0i li\u1ec7u n\u00e0y l\u00e0 t\u1ed5ng h\u1ee3p c\u00e1c \u0111i\u1ec3m l\u01b0u \u00fd trong qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c v\u1edbi Petalinux 2017.4. Version 2017.4 n\u00e0y c\u1ee7a Xilinx l\u00e0 m\u1ed9t th\u1ec3 hi\u1ec7n r\u00f5 r\u00e0ng c\u1ee7a vi\u1ec7c \u1ee9ng d\u1ee5ng YOCTO PROJECT trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n m\u1ed9t h\u1ec7 nh\u00fang Linux. \u0110\u1ec3 hi\u1ec3u r\u00f5 h\u01a1n qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c c\u1ee7a petalinux 2017.4, c\u1ea7n t\u00ecm hi\u1ec3u th\u00eam v\u1ec1 nguy\u00ean t\u1eafc ho\u1ea1t \u0111\u1ed9ng c\u1ee7a Yocto.","title":"Introdutions"},{"location":"lnx_es/ptlnx_20174/#tips","text":"Speed up sstate checking https://forums.xilinx.com/t5/Embedded-Linux/Checking-sstate-mirror-taking-forever/td-p/775404 Diable sstate online in Yocto","title":"Tips"},{"location":"lnx_es/ptlnx_20174/#worknote","text":"build target when use petalinux build is petalinux-user-image.bb. Bitbake file dir: [project dir]/project-spec/meta-plnx-generated/recipes-core/images/petalinux-user-image.bb based-bitbake file be used for all project is found at: [installation dir]/components/yocto/source/ petalinux-build -x clean/distclean is not affect to download dir Removing build/tmp dir need to rebuild all project (except fetching source code). This job takes a while. petalinux-build -x distclean will call bitbake -c cleansstate -> what is cleansstate? clean -> bitbake -c clean. what is defference btw clean & cleansstate $WORKDIR: build/tmp/work/plnx_arm-xilinx-linux-gnueabi/libsample-tar/1.0-r0","title":"Worknote"},{"location":"lnx_es/ptlnx_20174/#experiences","text":"","title":"Experiences"},{"location":"lnx_es/ptlnx_20174/#create-and-initialize-a-project","text":"Qu\u00e1 tr\u00ecnh kh\u1edfi t\u1ea1o project (1) v\u00e0 import hdf (2) ti\u1ebfn h\u00e0nh t\u01b0\u01a1ng t\u1ef1 v\u1edbi petalinux 2015.4 (xem th\u00eam ug1144 \u0111\u1ec3 bi\u1ebft v\u1ec1 c\u00e1c cmd t\u01b0\u01a1ng \u1ee9ng cho t\u1eebng qu\u00e1 tr\u00ecnh). \u251c\u2500\u2500 config.project \u2514\u2500\u2500 project-spec \u251c\u2500\u2500 attributes \u251c\u2500\u2500 configs \u2502 \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rootfs_config \u251c\u2500\u2500 hw-description \u2502 \u2514\u2500\u2500 metadata \u2514\u2500\u2500 meta-user \u251c\u2500\u2500 conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u251c\u2500\u2500 recipes-apps \u2514\u2500\u2500 recipes-bsp K\u1ebft th\u00fac qu\u00e1 tr\u00ecnh (1), project \u0111\u01b0\u1ee3c t\u1ea1o v\u1edbi th\u01b0 m\u1ee5c \u201cproject-spec\u201d. Trong \u0111\u00f3: Th\u01b0 m\u1ee5c con \u201cconfigs\u201d ch\u1ee9a c\u00e1c c\u1ea5u h\u00ecnh c\u1ee7a project (c\u00e1c c\u1ea5u h\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c thay \u0111\u1ed5i b\u1eb1ng h\u1ecd c\u00e2u l\u1ec7nh \u201cpetalinux-config\u201d). Th\u01b0 m\u1ee5c con \u201chw-description\u201d tr\u1ed1ng. Th\u01b0 m\u1ee5c con \u201cmeta-user\u201d ch\u1ee9a c\u00e1c recipes li\u00ean quan \u0111\u1ebfn user-apps v\u00e0 bsp. Ngoai ra th\u01b0 m\u1ee5c n\u00e0y c\u00f2n ch\u1ee9a trong ./conf c\u00e1c c\u1ea5u h\u00ecnh li\u00ean quan \u0111\u1ebfn Yocto cho Layer meta-user. K\u1ebft th\u00fac qu\u00e1 tr\u00ecnh (2), c\u1ea5u tr\u00fac th\u01b0 m\u1ee5c c\u1ee7a project bi\u1ebfn \u0111\u1ed5i nh\u01b0 h\u00ecnh v\u1ebd d\u01b0\u1edbi \u0111\u00e2y. \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 cache \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 config.log \u2502 \u251c\u2500\u2500 misc \u2502 \u2514\u2500\u2500 tmp \u251c\u2500\u2500 components \u2502 \u2514\u2500\u2500 plnx_workspace \u251c\u2500\u2500 config.project \u2514\u2500\u2500 project-spec \u251c\u2500\u2500 attributes \u251c\u2500\u2500 configs \u251c\u2500\u2500 hw-description \u251c\u2500\u2500 meta-plnx-generated \u251c\u2500\u2500 meta-user \u2514\u2500\u2500 yocto-layer.log Trong \u0111\u00f3, xu\u1ea5t hi\u1ec7n th\u00eam m\u1ed9t s\u1ed1 th\u01b0 m\u1ee5c quan tr\u1ecdng sau: Th\u01b0 m\u1ee5c \u201cbuild\u201d l\u00e0 th\u01b0 m\u1ee5c \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ebf ti\u1ebfn h\u00e0nh c\u00e1c giai \u0111o\u1ea1n trong qu\u00e1 tr\u00ecnh build project. Trong \u0111\u00f3 k\u1ebft qu\u1ea3 trung gian trong c\u00e1c qu\u00e1 tr\u00ecnh build \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef t\u1ea1i \u201ctmp\u201d. Ngo\u00e0i ra, trong c\u00e1c qu\u00e1 tr\u00ecnh ti\u1ebfp theo trong \u201cbuild\u201d s\u1ebd xu\u1ea5t hi\u1ec7n th\u00eam th\u01b0 m\u1ee5c \u201cdownloads\u201d th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng l\u01b0u tr\u1eef c\u00e1c package \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh \u201cdo_fetch\u201d. Th\u01b0 m\u1ee5c \u201ccomponents\u201d trong c\u00e1c phi\u00ean b\u1ea3n petalinux tr\u01b0\u1edbc s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ch\u1ee9a source code li\u00ean quan \u0111\u1ebfn c\u00e1c customed-component c\u1ee7a user. Trong phi\u00ean b\u1ea3n n\u00e0y ch\u01b0a x\u00e1c \u0111\u1ecbnh \u0111\u01b0\u1ee3c ch\u1ee9c n\u0103ng c\u1ee7a th\u01b0 m\u1ee5c component. Xu\u1ea5t hi\u1ec7n th\u00eam Yocto layer \u201cmeta-plnx-generated\u201d trong th\u01b0 m\u1ee5c \u201cproject-spec\u201d, ch\u1ee9a c\u00e1c Yocto recipes li\u00ean quan \u0111\u1ebfn kernel, core, bsp. Xem th\u00eam Apendix A trong t\u00e0i li\u1ec7u ug1144 \u0111\u1ec3 bi\u1ebft th\u00eam th\u00f4ng tin v\u1ec1 Petalinux project structure.","title":"Create and initialize a project"},{"location":"lnx_es/ptlnx_20174/#build-a-new-project-without-internet","text":"\u0110\u1ec3 th\u1ef1c hi\u1ec7n build, ch\u1ea1y l\u1ec7nh \u201cpetalinux-build\u201d. Pre-build configuration B\u1ea3n ch\u1ea5t c\u1ee7a qu\u00e1 tr\u00ecnh n\u00e0y l\u00e0 g\u1ecdi \u0111\u1ebfn target \u201cpetalinux-user-image\u201d c\u1ee7a Yocto project. \u201cChecking sstate mirror object availability\u201d m\u1ea5t r\u1ea5t nhi\u1ec1u th\u1eddi gian \u0111\u1ec3 th\u1ef1c hi\u1ec7n? -> Ti\u1ebfn h\u00e0nh t\u1eaft b\u1ecf ch\u1ee9c n\u0103ng check n\u00e0y trong petalinux-config > Yocto > sstate. Xu\u1ea5t hi\u1ec7n l\u1ed7i li\u00ean quan \u0111\u1ebfn bitbake n\u1ebfu d\u1eebng qu\u00e1 tr\u00ecnh build \u0111\u1ed9t ng\u1ed9t (v\u00ed d\u1ee5 d\u1eebng b\u1eb1ng t\u1ed5 h\u1ee3p ph\u00edm Ctl+C). Solution here: Re-init environment: /home/user/Xilinx/Petalinux/settings.sh /home/user/Xilinx/Petalinux/components/yocto/source/aarch64/environment-setup-aarch64-xilinx-linux Remove ./build/bitbake.lock. C\u00e1c c\u1ea5u h\u00ecnh c\u1ee7a project \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef \u1edf: project-spec/configs/config Do_fetch - What is problem? Trong qu\u00e1 tr\u00ecnh build, petalinux s\u1ebd th\u1ef1c hi\u1ec7n l\u1ea5y c\u00e1c g\u00f3i c\u00f3 s\u1eb5n trong th\u01b0 m\u1ee5c c\u00e0i \u0111\u1eb7t c\u1ee7a petalinux, \u0111\u01b0\u1eddng d\u1eabn nh\u01b0 sau: [Instalation Direction]/components/yocto/downloads. Ngo\u00e0i ra petalinux ti\u1ebfn h\u00e0nh download t\u1eeb Internet th\u00eam c\u00e1c g\u00f3i nh\u01b0: (1) gcc-source-linaro-6.2-linaro-6.2-r2016.11 (2) binutils-cross-arm-linaro-2.27-r2016.10 (3) u-boot-mkimage-native-v2016.03+gitAUTOINC+df61a74e68-r0 (4) binutils-native-linaro-2.27-r2016.10 ... N\u1ebfu trong qu\u00e1 tr\u00ecnh build kh\u00f4ng c\u00f3 k\u1ebft n\u1ed1i Internet s\u1ebd d\u1eabn \u0111\u1ebfn c\u00e1c th\u00f4ng b\u00e1o build l\u1ed7i. V\u00ed d\u1ee5 nh\u01b0: \u201cu-boot-mkimage-native-v2016.03+gitAUTOINC+df61a74e68-r0 do_fetch: Fetcher failure\u201d Nh\u01b0 v\u1eady, b\u1ea3n c\u00e0i \u0111\u1eb7t m\u1eb7c \u0111\u1ecbnh c\u1ee7a petalinux kh\u00f4ng ch\u1ee9a \u0111\u1ee7 c\u00e1c g\u00f3i ph\u1ea7n m\u1ec1m s\u1eed d\u1ee5ng cho qu\u00e1 tr\u00ecnh Yocto build (?). C\u1ea7n c\u00f3 th\u00eam c\u00e1c g\u00f3i sau: git2_git.linaro.org.toolchain.binutils-gdb.git t\u01b0\u01a1ng \u1ee9ng v\u1edbi (2) v\u00e0 (4) git2_git.linaro.org.toolchain.gcc.git t\u01b0\u01a1ng \u1ee9ng v\u1edbi (1) Linaro - what is this? External kernel - How to?","title":"Build a new project without Internet"},{"location":"lnx_es/ptlnx_20174/#boot-from-sd-card","text":"V\u1ec1 c\u01a1 b\u1ea3n, boot t\u1eeb SD Card \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n gi\u1ed1ng v\u1edbi h\u01b0\u1edbng d\u1eabn trong m\u1ee5c Zedboard . T\u1ec7p rootfs.cpio \u0111\u01b0\u1ee3c ch\u1ee9a trong th\u01b0 m\u1ee5c /image/linux/ s\u1eb5n s\u00e0ng cho qu\u00e1 tr\u00ecnh \u0111\u01b0a l\u00ean th\u1ebb nh\u1edb.","title":"Boot from SD card"},{"location":"lnx_es/ptlnx_20174/#mounting-sd-card-in-booting-time","text":"Refer PetaLinux Yocto Tips (xilinx-wiki.atlassian.net) for step-by-step instructions.","title":"Mounting SD card in booting-time"},{"location":"lnx_es/ptlnx_20174/#add-user-custom-package","text":"B\u1ea3n ch\u1ea5t qu\u1ea3n l\u00fd g\u00f3i ph\u1ea7n m\u1ec1m trong petalinux l\u00e0 Yocto project. M\u00e3 ngu\u1ed3n c\u1ee7a c\u00e1c g\u00f3i ph\u1ea7n m\u1ec1m c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c download t\u1eeb c\u00e1c online repository ho\u1eb7c l\u01b0u tr\u1eef tr\u1ef1c ti\u1ebfp tr\u00ean m\u00e1y local. Trong m\u1ee5c n\u00e0y s\u1ebd l\u1ea5y v\u00ed d\u1ee5 v\u1ec1 m\u1ed9t g\u00f3i ph\u1ea7n m\u1ec1m ph\u1ed5 bi\u1ebfn, hay \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong qu\u00e1 tr\u00ecnh \u0111\u00e1nh gi\u00e1 ch\u1ea5t l\u01b0\u1ee3ng m\u1ea1ng: IPERF. Petalinux s\u1ebd th\u1ef1c hi\u1ec7n t\u1ea3i source code c\u1ee7a iperf t\u1eeb Github sau \u0111\u00f3 ti\u1ebfn h\u00e0nh c\u1ea5u h\u00ecnh, build v\u00e0 t\u00edch h\u1ee3p v\u00e0o h\u1ec7 th\u1ed1ng. Khi kh\u1edfi t\u1ea1o m\u1ed9t \u1ee9ng d\u1ee5ng (apps) m\u1edbi, m\u1ed9t package \u0111\u01b0\u1ee3c t\u1ea1o t\u1ea1i project-spec/meta-user/recipes-apps . C\u1ea5u tr\u00fac c\u1ee7a m\u1ed9t recipes nh\u01b0 sau: vux-iperf/ \u251c\u2500\u2500 files \u2502 \u251c\u2500\u2500 0002-Remove-pg-from-profile_CFLAGS.patch \u2502 \u2514\u2500\u2500 automake-foreign.patch \u251c\u2500\u2500 README \u2514\u2500\u2500 vux-iperf.bb Trong v\u00ed d\u1ee5 l\u00e0 c\u1ea5u h\u00ecnh \u0111\u1ec3 build b\u1ea3n ph\u1ea7n m\u1ec1m iperf3. Bitbake file cho recipes n\u00e0y \u0111\u01b0\u1ee3c t\u1ea3i t\u1ea1i iperf3 3.6 (layers.openembedded.org). N\u1ed9i dung file iperf3_3.6.bb nh\u01b0 sau: SUMMARY = \"Network benchmark tool\" HOMEPAGE = \"http://software.es.net/iperf/\" SECTION = \"console/network\" BUGTRACKER = \"https://github.com/esnet/iperf/issues\" AUTHOR = \"ESNET <info@es.net>, Lawrence Berkeley National Laboratory <websupport@lbl.gov>\" LICENSE = \"BSD\" LIC_FILES_CHKSUM = \"file://LICENSE;md5=a9a036136b748453e839c0eb8906ef2e\" DEPENDS = \"openssl\" SRC_URI = \"git://github.com/esnet/iperf.git \\ file://automake-foreign.patch \\ file://0002-Remove-pg-from-profile_CFLAGS.patch \\ \" SRCREV = \"88f3ad87f38762081a6d7127890ff5c3a052b06a\" S = \"${WORKDIR}/git\" inherit autotools PACKAGECONFIG[lksctp] = \"ac_cv_header_netinet_sctp_h=yes,ac_cv_header_netinet_sctp_h=no,lksctp-tools\" CFLAGS += \"-D_GNU_SOURCE\" EXTRA_OECONF = \"--with-openssl=${RECIPE_SYSROOT}${prefix}\" BBCLASSEXTEND = \"native\" http://cgit.openembedded.org/meta-openembedded/tree/meta-oe/recipes-benchmark/iperf3/iperf3_3.6.bb?h=master Trong file vux-iperf.bb c\u00f3 m\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m v\u00e0 th\u00f4ng tin c\u1ea7n l\u01b0u \u00fd nh\u01b0 sau. \u0110\u01b0\u1eddng d\u1eabn \u0111\u1ebfn source code c\u1ee7a package Tham s\u1ed1 SRC_URI ch\u1ee9a \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn source code c\u1ee7a pakcage. Th\u00f4ng qua th\u00f4ng tin ch\u1ee9a trong \u0111\u01b0\u1eddng d\u1eabn n\u00e0y, bitbake th\u1ef1c hi\u1ec7n nhi\u1ec7m v\u1ee5 do_fetch. SRC_URI = \"git://github.com/esnet/iperf.git \\ file://automake-foreign.patch \\ Trong v\u00ed d\u1ee5 n\u00e0y, SRC_URI ch\u1ec9 \u0111\u1ebfn m\u1ed9t git repository c\u1ee7a esnet. Ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 truy c\u1eadp tr\u1ef1c ti\u1ebfp v\u00e0o repo n\u00e0y \u0111\u1ec3 xem source code. Ngo\u00e0i ra SRC_URI ch\u1ec9 \u0111\u1ebfn m\u1ed9t file \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef local ch\u1ee9a b\u1ea3n patch. B\u1ea3n patch n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y tr\u00ean openembedded.org. Revision c\u1ee7a source code Tham s\u1ed1 SRCREV ch\u1ec9 cho bitbake bi\u1ebft \u0111\u01b0\u1ee3c revision n\u00e0o c\u1ee7a source code c\u1ea7n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 build package. SRCREV = \"88d907f7fb58bfab5d086c5da60c922e1c582c92\" Ngo\u00e0i ra, SRCREV c\u00f2n c\u00f3 th\u1ec3 cung c\u1ea5p th\u00eam c\u00e1c th\u00f4ng tin nh\u01b0 sau: protocol: giao th\u1ee9c s\u1eed d\u1ee5ng \u0111\u1ec3 fetch source code (protocol=https...) branch: branch mong mu\u1ed1n fetch source code (branch=master...) T\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed7i revision ch\u1ee9a m\u1ed9t file LICENSE \u0111i k\u00e8m v\u1edbi MD5SUM. LIC_FILES_CHKSUM = \"file://LICENSE;md5=d098223e44bdd19585315ee75cd9d2d7\" L\u01b0u \u00fd r\u1eb1ng LIC_FILES c\u00f3 th\u1ec3 l\u00e0 LICENSE ho\u1eb7c b\u1ea5t c\u1ee9 t\u00ean kh\u00e1c.","title":"Add user custom package"},{"location":"lnx_es/ptlnx_20174/#petalinux-imagebbappend","text":"L\u01b0u tr\u1eef t\u1ea1i project-spec/meta-user/recipes-core/images/petalinux-image.bbappend ch\u1ee9a c\u00e1c package c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c install v\u00e0o h\u1ec7 th\u1ed1ng. Khi x\u00f3a c\u00e1c package trong file n\u00e0y s\u1ebd \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn petalinux-config -c rootfs.","title":"petalinux-image.bbappend"},{"location":"lnx_es/ptlnx_20174/#application-auto-run-at-startup","text":"Thu\u1eadt ng\u1eef: update-rc.d , System V C\u00e1c \u1ee9ng d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t tr\u00ean Rootfs d\u01b0\u1edbi d\u1ea1ng c\u00e1c binary v\u00e0 th\u00f4ng th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c kh\u1edfi \u0111\u1ed9ng khi c\u00f3 y\u00eau c\u1ea7u c\u1ee7a ng\u01b0\u1eddi d\u00f9ng. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p \u1ee9ng d\u1ee5ng c\u1ea7n kh\u1edfi \u0111\u1ed9ng trong qu\u00e1 tr\u00ecnh booting c\u00f9ng h\u1ec7 th\u1ed1ng. \u00dd t\u01b0\u1edfng cho ph\u01b0\u01a1ng ph\u00e1p n\u00e0y l\u00e0 s\u1eed d\u1ee5ng Yocto class update-rc.d.bbclass \u0111\u1ec3 c\u00e0i \u0111\u1eb7t init script d\u1ea1ng System V v\u00e0o h\u1ec7 th\u1ed1ng. update-rc.d.bbclass s\u1eed d\u1ee5ng update-rc.d (a Debian utility) \u0111\u1ec1 \"safety install\" init script v\u00e0o h\u1ec7 th\u1ed1ng. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 recipe file c\u1ee7a m\u1ed9t package y\u00eau c\u1ea7u Yocto ti\u1ebfn h\u00e0nh c\u00e0i \u0111\u1eb7t m\u1ed9t init script v\u00e0o h\u1ec7 th\u1ed1ng. SUMMARY = \"Simple iiod-init application\" SECTION = \"PETALINUX/apps\" LICENSE = \"MIT\" LIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\" SRC_URI = \"file://iiod-init \\ \" S = \"${WORKDIR}\" FILESEXTRAPATHS_prepend := \"${THISDIR}/files:\" inherit update-rc.d INITSCRIPT_NAME = \"iiod-init\" INITSCRIPT_PARAMS = \"start 99 S .\" do_install() { install -d ${D}${sysconfdir}/init.d install -m 0755 ${S}/iiod-init ${D}${sysconfdir}/init.d/iiod-init } FILES_${PN} += \"${sysconfdir}/*\" M\u1ed9t s\u1ed1 \u0111i\u1ec3m l\u01b0u \u00fd trong recipe: inherit update-rc.d : g\u1ecdi \u0111\u1ebfn class update-rc.d . INITSCRIPT_NAME & INITSCRIPT_PARAMS : l\u00e0 c\u00e1c bi\u1ebfn s\u1ed1 cho class update-rc.d . Tham kh\u1ea3o th\u00eam t\u1ea1i update-rc.d.bbclass c\u1ee7a Yocto ref-manual. init script trong recipe n\u00e0y l\u00e0 \"iiod-init\" \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i bi\u1ebfn INITSCRIPT_NAME . G\u00f3i c\u1ea7n cung c\u1ea5p m\u00e3 ngu\u1ed3n l\u00e0 script iiod-init . Init script c\u1ea7n \u0111\u01b0\u1ee3c vi\u1ebft theo System V init style. V\u1ec1 c\u01a1 b\u1ea3n script c\u1ea7n cung c\u1ea5p \u0111\u01b0\u1ee3c c\u00e1c ph\u01b0\u01a1ng th\u1ee9c: start , stop v\u00e0 restart . C\u00e1c ph\u01b0\u01a1ng th\u1ee9c n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u00e1c \u0111\u1ed9ng \u0111\u1ebfn ch\u01b0\u01a1ng tr\u00ecnh.","title":"Application Auto Run at Startup"},{"location":"lnx_es/ptlnx_bin_output/","text":"List of Petalinux Images Image Definition Image Name Description Linux Kernel image.bin The Linux kernel and root filesystem image in binary format image.elf The Linux kernel and root filesystem image in ELF format image.srec The Linux kernel and root filesystem image in SREC format image.ub The Linux kernel and root filesystem image in U-Boot format (FIT). It maybe include device tree linux.bin Binary image - kernel only, no filesystem romfs.img The ROMFS image in binary format U-Boot u-boot.bin The U-Boot image in binary format u-boot.srec The U-Boot image in SREC format u-boot-s.bin The relocatable U-Boot image in binary format u-boot-s.elf The relocatable U-Boot image in ELF format u-boot-s.srec The relocatable U-Boot image in SREC format ub.config.img U-Boot platform configuration script in binary format Others Image The generic Linux kernel binary image file. \u2190 What is this? uImage An image file that has a U-Boot wrapper (installed by the mkimage utility) that includes the OS type and loader information. In petalinux, it is image.ub. zImage A compressed version of the Linux kernel image that is self-extracting. vmlinux is the name of the Linux kernel executable image.ub \u2013 uImage Petalinux uses \u201cmkimage\u201d to create from \u201cImage\u201d. mkimage -A arm64 -O linux -T kernel -C none -a $${kernel_loadaddr} -e $${kernel_loadaddr} -d \"$(PROOT)/build/$(LINUX_KERNEL)/boot/Image\" $(IMAGEROOT)/uImage As Linux man page, the mkimage command is used to create images for use with the U-Boot boot loader. As Xilinx Wiki, the Image file is the uncompressed kernel image and the zImage file is a compressed kernel image which will uncompress itself when it starts. If the mkimage utility is available in the build environment, linux-xlnx/arch/arm/boot/uImage will be created by wrapping zImage with a U-Boot header. .bin vs .elf From StackOverflow: What is the difference between ELF files and bin files? https://stackoverflow.com/questions/2427011/what-is-the-difference-between-elf-files-and-bin-files/2427229 Bin file is raw data Elf file has data and instructions to use this data","title":"List of Petalinux Images"},{"location":"lnx_es/ptlnx_bin_output/#list-of-petalinux-images","text":"","title":"List of Petalinux Images"},{"location":"lnx_es/ptlnx_bin_output/#image-definition","text":"Image Name Description Linux Kernel image.bin The Linux kernel and root filesystem image in binary format image.elf The Linux kernel and root filesystem image in ELF format image.srec The Linux kernel and root filesystem image in SREC format image.ub The Linux kernel and root filesystem image in U-Boot format (FIT). It maybe include device tree linux.bin Binary image - kernel only, no filesystem romfs.img The ROMFS image in binary format U-Boot u-boot.bin The U-Boot image in binary format u-boot.srec The U-Boot image in SREC format u-boot-s.bin The relocatable U-Boot image in binary format u-boot-s.elf The relocatable U-Boot image in ELF format u-boot-s.srec The relocatable U-Boot image in SREC format ub.config.img U-Boot platform configuration script in binary format Others Image The generic Linux kernel binary image file. \u2190 What is this? uImage An image file that has a U-Boot wrapper (installed by the mkimage utility) that includes the OS type and loader information. In petalinux, it is image.ub. zImage A compressed version of the Linux kernel image that is self-extracting. vmlinux is the name of the Linux kernel executable","title":"Image Definition"},{"location":"lnx_es/ptlnx_bin_output/#imageub-uimage","text":"Petalinux uses \u201cmkimage\u201d to create from \u201cImage\u201d. mkimage -A arm64 -O linux -T kernel -C none -a $${kernel_loadaddr} -e $${kernel_loadaddr} -d \"$(PROOT)/build/$(LINUX_KERNEL)/boot/Image\" $(IMAGEROOT)/uImage As Linux man page, the mkimage command is used to create images for use with the U-Boot boot loader. As Xilinx Wiki, the Image file is the uncompressed kernel image and the zImage file is a compressed kernel image which will uncompress itself when it starts. If the mkimage utility is available in the build environment, linux-xlnx/arch/arm/boot/uImage will be created by wrapping zImage with a U-Boot header.","title":"image.ub \u2013 uImage"},{"location":"lnx_es/ptlnx_bin_output/#bin-vs-elf","text":"From StackOverflow: What is the difference between ELF files and bin files? https://stackoverflow.com/questions/2427011/what-is-the-difference-between-elf-files-and-bin-files/2427229 Bin file is raw data Elf file has data and instructions to use this data","title":".bin vs .elf"},{"location":"lnx_es/u-boot/","text":"Porting Linux for Zynq U-Boot on Zynq References [1] - Build U-Boot - xilinx-wiki.atlassian.net Build U-Boot for Zedboard Ti\u1ebfn h\u00e0nh build u-boot cho chip Zynq7000 tr\u00ean Zedboard theo h\u01b0\u1edbng d\u1eabn t\u1eeb xilinx-wiki.atlassian.net - Build U-Boot . Qu\u00e1 tr\u00ecnh build U-Boot cho m\u1ed9t thi\u1ebft b\u1ecb Zynq7000 c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng b\u1ed9 c\u00f4ng c\u1ee5 Petalinux c\u1ee7a Xilinx. Th\u1eed nghi\u1ec7m n\u00e0y s\u1ebd tr\u1ef1c ti\u1ebfp build U-Boot t\u1eeb m\u00e3 ngu\u1ed3n cung c\u1ea5p b\u1edfi Xilinx t\u1eeb Github b\u1eb1ng compiler cung c\u1ea5p b\u1edfi Xilinx SDK. make U-Boot Ti\u1ebfn h\u00e0nh theo c\u00e1c b\u01b0\u1edbc h\u01b0\u1edbng d\u1eabn trong [1], ti\u1ebfn h\u00e0nh fetch source code, c\u1ea5u h\u00ecnh v\u00e0 make U-Boot. > git clone https://github.com/Xilinx/u-boot-xlnx.git > cd u-boot-xlnx > export CROSS_COMPILE=arm-linux-gnueabihf- > export ARCH=arm > source <SDK setting.sh file> // khai b\u00e1o arm-linux-gnueabihf compiler > make distclean > make zynq_zed_defconfig > make K\u1ebft qu\u1ea3 build l\u00e0 file u-boot.elf . File n\u00e0y c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh ch\u1ea1y th\u1eed nghi\u1ec7m b\u1eb1ng ph\u01b0\u01a1ng ph\u00e1p s\u1eed d\u1ee5ng XSCT \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 \u1edf ph\u1ea7n Zedboard . Nh\u1eadn x\u00e9t Compiler s\u1eed d\u1ee5ng cho build U-Boot l\u00e0 h\u1ecd ch\u01b0\u01a1ng tr\u00ecnh: arm-linux-gnueabihf-*. V\u00ed d\u1ee5 gcc \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i [SDX Installation Dir]/SDK/2018.2/gnu/aarch32/lin/gcc-arm-linux-gnueabi/bin/arm-linux-gnueabihf-gcc. zynq_zed_defconfig l\u00e0 b\u1ed9 c\u1ea5u h\u00ecnh d\u00e0nh ri\u00eang cho board zed. C\u00e1c ph\u1ea7n c\u1ee9ng kh\u00e1c s\u1ebd c\u00f3 b\u1ed9 c\u1ea5u h\u00ecnh t\u01b0\u01a1ng t\u1ef1, v\u00ed d\u1ee5 zynq_zc706_defconfig cho ZC706. Linux Kernel Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c tham kh\u1ea3o t\u1eeb h\u01b0\u1edbng d\u1eabn chi ti\u1ebft Build kernel c\u1ee7a Xilinx. Xilinx duy tr\u00ec m\u1ed9t github repository ch\u1ee9a source code Linux kernel. Qu\u00e1 tr\u00ecnh build Linux kernel t\u1eeb m\u00e3 ngu\u1ed3n n\u00e0y t\u01b0\u01a1ng \u0111\u1ed1i \u0111\u01a1n gi\u1ea3n. C\u1ea7n l\u01b0u \u00fd m\u1ed9t s\u1ed1 \u0111i\u1ec3m quan tr\u1ecdng nh\u01b0 sau: Qu\u00e1 tr\u00ecnh build kernel s\u1eed d\u1ee5ng h\u1ecd compiler arm-linux-gnueabihf, do \u0111\u00f3 c\u1ea7n c\u1ea5u h\u00ecnh export CROSS_COMPILE=arm-linux-gnueabihf- T\u1ea1i source code c\u1ee7a Linux kernel th\u1ef1c hi\u1ec7n nh\u1eefng b\u01b0\u1edbc sau: > make ARCH=arm xilinx_zynq_defconfig > make ARCH=arm menuconfig > make ARCH=arm UIMAGE_LOADADDR=0x8000 uImage K\u1ebft qu\u1ea3 build kernel \u0111\u01b0\u1ee3c l\u01b0u t\u1ea1i: [Linux source]/arch/arm/boot/ bao g\u1ed3m c\u00e1c n\u1ed9i dung nh\u01b0 d\u01b0\u1edbi \u0111\u00e2y. Trong \u0111\u00f3 quan tr\u1ecdng nh\u1ea5t l\u00e0 Image, uImage, zImage. drwxrwxr-x 2 vutt6 vutt6 4096 Feb 15 00:53 bootp drwxrwxr-x 2 vutt6 vutt6 4096 Mar 4 15:21 compressed -rwxr-xr-x 1 vutt6 vutt6 1805 Feb 15 00:53 deflate_xip_data.sh drwxrwxr-x 2 vutt6 vutt6 73728 Feb 15 00:53 dts -rwxrwxr-x 1 vutt6 vutt6 10662592 Mar 4 15:21 Image -rw-rw-r-- 1 vutt6 vutt6 1648 Feb 15 00:53 install.sh -rw-rw-r-- 1 vutt6 vutt6 3128 Feb 15 00:53 Makefile -rw-rw-r-- 1 vutt6 vutt6 4160040 Mar 4 15:21 uImage -rwxrwxr-x 1 vutt6 vutt6 4159976 Mar 4 15:21 zImage uImage s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i boot.bin. Device Tree Build Device Tree Blob - Xilinx. Trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx h\u01b0\u1edbng d\u1eabn nhi\u1ec1u c\u00e1ch \u0111\u1ec3 build device tree cho m\u1ed9t thi\u1ebft b\u1ecb Zynq. Generate Device Tree b\u1eb1ng HSM/HSI Kh\u1edfi \u0111\u1ed9ng HSM b\u1eb1ng command hsm , trong \u0111\u00f3 HSM l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 t\u00edch h\u1ee3p trong SDK c\u1ee7a Xilinx. Qu\u00e1 tr\u00ecnh generate b\u1eb1ng HSM \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tu\u1ea7n t\u1ef1 trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx ( t\u1ea1i \u0111\u00e2y ). T\u1ed5ng h\u1ee3p DTB b\u1eb1ng c\u00f4ng c\u1ee5 dtc Device tree \u0111\u01b0\u1ee3c generate d\u01b0\u1edbi d\u1ea1ng c\u00e1c file dts/dtsi. C\u00f4ng c\u1ee5 dtc (Device tree compiler) h\u1ed7 tr\u1ee3 compiling t\u1eeb d\u1ea1ng dtsi/dts sang dtb. C\u00fa ph\u00e1p compile nh\u01b0 sau: dtc -I dts -O dts -o system.dtb system.dts L\u01b0u \u00fd r\u1eb1ng dtc c\u0169ng h\u1ed7 tr\u1ee3 qu\u00e1 tr\u00ecnh d\u1ecbch ng\u01b0\u1ee3c t\u1eeb dtb -> dts. Build rootfs http://xilinx.wikidot.com/zynq-rootfs Create boot image S\u1eed d\u1ee5ng c\u00f4ng c\u1ee5 bootgen t\u00edch h\u1ee3p trong Xilinx SDK. Tool for package images mkimage - Generate image for U-Boot The mkimage command is used to create images for use with the U-Boot boot loader. Thes eimages can contain the linux kernel, device tree blob, root file system image, firmware images etc., either separate or combined. mkimage is used in Petalinux 2017.4 at do_xilinx_fitimage: uboot-mkimage -f fit-image.its fitImage In do_image_cpio , mkimage is used to packaged ramdisk file petalinux-user-image-plnx_arm-20190301083938. cpio - copy files to and from archives mke2fs - create an ext2/ext3/ext4 filesystem","title":"Porting Linux for Zynq"},{"location":"lnx_es/u-boot/#porting-linux-for-zynq","text":"","title":"Porting Linux for Zynq"},{"location":"lnx_es/u-boot/#u-boot-on-zynq","text":"","title":"U-Boot on Zynq"},{"location":"lnx_es/u-boot/#references","text":"[1] - Build U-Boot - xilinx-wiki.atlassian.net","title":"References"},{"location":"lnx_es/u-boot/#build-u-boot-for-zedboard","text":"Ti\u1ebfn h\u00e0nh build u-boot cho chip Zynq7000 tr\u00ean Zedboard theo h\u01b0\u1edbng d\u1eabn t\u1eeb xilinx-wiki.atlassian.net - Build U-Boot . Qu\u00e1 tr\u00ecnh build U-Boot cho m\u1ed9t thi\u1ebft b\u1ecb Zynq7000 c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng b\u1ed9 c\u00f4ng c\u1ee5 Petalinux c\u1ee7a Xilinx. Th\u1eed nghi\u1ec7m n\u00e0y s\u1ebd tr\u1ef1c ti\u1ebfp build U-Boot t\u1eeb m\u00e3 ngu\u1ed3n cung c\u1ea5p b\u1edfi Xilinx t\u1eeb Github b\u1eb1ng compiler cung c\u1ea5p b\u1edfi Xilinx SDK. make U-Boot Ti\u1ebfn h\u00e0nh theo c\u00e1c b\u01b0\u1edbc h\u01b0\u1edbng d\u1eabn trong [1], ti\u1ebfn h\u00e0nh fetch source code, c\u1ea5u h\u00ecnh v\u00e0 make U-Boot. > git clone https://github.com/Xilinx/u-boot-xlnx.git > cd u-boot-xlnx > export CROSS_COMPILE=arm-linux-gnueabihf- > export ARCH=arm > source <SDK setting.sh file> // khai b\u00e1o arm-linux-gnueabihf compiler > make distclean > make zynq_zed_defconfig > make K\u1ebft qu\u1ea3 build l\u00e0 file u-boot.elf . File n\u00e0y c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh ch\u1ea1y th\u1eed nghi\u1ec7m b\u1eb1ng ph\u01b0\u01a1ng ph\u00e1p s\u1eed d\u1ee5ng XSCT \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 \u1edf ph\u1ea7n Zedboard .","title":"Build U-Boot for Zedboard"},{"location":"lnx_es/u-boot/#nhan-xet","text":"Compiler s\u1eed d\u1ee5ng cho build U-Boot l\u00e0 h\u1ecd ch\u01b0\u01a1ng tr\u00ecnh: arm-linux-gnueabihf-*. V\u00ed d\u1ee5 gcc \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i [SDX Installation Dir]/SDK/2018.2/gnu/aarch32/lin/gcc-arm-linux-gnueabi/bin/arm-linux-gnueabihf-gcc. zynq_zed_defconfig l\u00e0 b\u1ed9 c\u1ea5u h\u00ecnh d\u00e0nh ri\u00eang cho board zed. C\u00e1c ph\u1ea7n c\u1ee9ng kh\u00e1c s\u1ebd c\u00f3 b\u1ed9 c\u1ea5u h\u00ecnh t\u01b0\u01a1ng t\u1ef1, v\u00ed d\u1ee5 zynq_zc706_defconfig cho ZC706.","title":"Nh\u1eadn x\u00e9t"},{"location":"lnx_es/u-boot/#linux-kernel","text":"Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c tham kh\u1ea3o t\u1eeb h\u01b0\u1edbng d\u1eabn chi ti\u1ebft Build kernel c\u1ee7a Xilinx. Xilinx duy tr\u00ec m\u1ed9t github repository ch\u1ee9a source code Linux kernel. Qu\u00e1 tr\u00ecnh build Linux kernel t\u1eeb m\u00e3 ngu\u1ed3n n\u00e0y t\u01b0\u01a1ng \u0111\u1ed1i \u0111\u01a1n gi\u1ea3n. C\u1ea7n l\u01b0u \u00fd m\u1ed9t s\u1ed1 \u0111i\u1ec3m quan tr\u1ecdng nh\u01b0 sau: Qu\u00e1 tr\u00ecnh build kernel s\u1eed d\u1ee5ng h\u1ecd compiler arm-linux-gnueabihf, do \u0111\u00f3 c\u1ea7n c\u1ea5u h\u00ecnh export CROSS_COMPILE=arm-linux-gnueabihf- T\u1ea1i source code c\u1ee7a Linux kernel th\u1ef1c hi\u1ec7n nh\u1eefng b\u01b0\u1edbc sau: > make ARCH=arm xilinx_zynq_defconfig > make ARCH=arm menuconfig > make ARCH=arm UIMAGE_LOADADDR=0x8000 uImage K\u1ebft qu\u1ea3 build kernel \u0111\u01b0\u1ee3c l\u01b0u t\u1ea1i: [Linux source]/arch/arm/boot/ bao g\u1ed3m c\u00e1c n\u1ed9i dung nh\u01b0 d\u01b0\u1edbi \u0111\u00e2y. Trong \u0111\u00f3 quan tr\u1ecdng nh\u1ea5t l\u00e0 Image, uImage, zImage. drwxrwxr-x 2 vutt6 vutt6 4096 Feb 15 00:53 bootp drwxrwxr-x 2 vutt6 vutt6 4096 Mar 4 15:21 compressed -rwxr-xr-x 1 vutt6 vutt6 1805 Feb 15 00:53 deflate_xip_data.sh drwxrwxr-x 2 vutt6 vutt6 73728 Feb 15 00:53 dts -rwxrwxr-x 1 vutt6 vutt6 10662592 Mar 4 15:21 Image -rw-rw-r-- 1 vutt6 vutt6 1648 Feb 15 00:53 install.sh -rw-rw-r-- 1 vutt6 vutt6 3128 Feb 15 00:53 Makefile -rw-rw-r-- 1 vutt6 vutt6 4160040 Mar 4 15:21 uImage -rwxrwxr-x 1 vutt6 vutt6 4159976 Mar 4 15:21 zImage uImage s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i boot.bin.","title":"Linux Kernel"},{"location":"lnx_es/u-boot/#device-tree","text":"Build Device Tree Blob - Xilinx. Trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx h\u01b0\u1edbng d\u1eabn nhi\u1ec1u c\u00e1ch \u0111\u1ec3 build device tree cho m\u1ed9t thi\u1ebft b\u1ecb Zynq.","title":"Device Tree"},{"location":"lnx_es/u-boot/#generate-device-tree-bang-hsmhsi","text":"Kh\u1edfi \u0111\u1ed9ng HSM b\u1eb1ng command hsm , trong \u0111\u00f3 HSM l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 t\u00edch h\u1ee3p trong SDK c\u1ee7a Xilinx. Qu\u00e1 tr\u00ecnh generate b\u1eb1ng HSM \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tu\u1ea7n t\u1ef1 trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx ( t\u1ea1i \u0111\u00e2y ).","title":"Generate Device Tree b\u1eb1ng HSM/HSI"},{"location":"lnx_es/u-boot/#tong-hop-dtb-bang-cong-cu-dtc","text":"Device tree \u0111\u01b0\u1ee3c generate d\u01b0\u1edbi d\u1ea1ng c\u00e1c file dts/dtsi. C\u00f4ng c\u1ee5 dtc (Device tree compiler) h\u1ed7 tr\u1ee3 compiling t\u1eeb d\u1ea1ng dtsi/dts sang dtb. C\u00fa ph\u00e1p compile nh\u01b0 sau: dtc -I dts -O dts -o system.dtb system.dts L\u01b0u \u00fd r\u1eb1ng dtc c\u0169ng h\u1ed7 tr\u1ee3 qu\u00e1 tr\u00ecnh d\u1ecbch ng\u01b0\u1ee3c t\u1eeb dtb -> dts.","title":"T\u1ed5ng h\u1ee3p DTB b\u1eb1ng c\u00f4ng c\u1ee5 dtc"},{"location":"lnx_es/u-boot/#build-rootfs","text":"http://xilinx.wikidot.com/zynq-rootfs","title":"Build rootfs"},{"location":"lnx_es/u-boot/#create-boot-image","text":"S\u1eed d\u1ee5ng c\u00f4ng c\u1ee5 bootgen t\u00edch h\u1ee3p trong Xilinx SDK.","title":"Create boot image"},{"location":"lnx_es/u-boot/#tool-for-package-images","text":"mkimage - Generate image for U-Boot The mkimage command is used to create images for use with the U-Boot boot loader. Thes eimages can contain the linux kernel, device tree blob, root file system image, firmware images etc., either separate or combined. mkimage is used in Petalinux 2017.4 at do_xilinx_fitimage: uboot-mkimage -f fit-image.its fitImage In do_image_cpio , mkimage is used to packaged ramdisk file petalinux-user-image-plnx_arm-20190301083938. cpio - copy files to and from archives mke2fs - create an ext2/ext3/ext4 filesystem","title":"Tool for package images"},{"location":"lnx_es/yocto/","text":"Terms and definitions in Yocto C\u00e1c kh\u00e1i ni\u1ec7m n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 t\u1ea1i Yocto Reference Manual . Build Directory L\u00e0 khu v\u1ef1c Yocto s\u1eed d\u1ee5ng \u0111\u1ec3 build h\u1ec7 th\u1ed1ng. Trong tr\u01b0\u1eddng h\u1ee3p c\u1ee7a Petalinux 2017.4, Build Dir l\u00e0 /build. TOPDIR \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u tr\u1eef \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn Build Dir. Package \u0110\u1ed1i t\u01b0\u1ee3ng t\u00e1c \u0111\u1ed9ng \u0111\u1ebfn trong Yocto l\u00e0 Package. Trong \u0111\u00f3 m\u1ed9t application, library, bootloader hay kernel \u0111\u1ec1u \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a v\u00e0 coi l\u00e0 Package trong ph\u1ea1m vi c\u1ee7a Yocto project. Ng\u01b0\u1eddi d\u00f9ng c\u1ea7n cung c\u1ea5p c\u00e1c th\u00f4ng tin \u0111\u1ec3 Yocto c\u00f3 th\u1ec3 \"bake\" \u0111\u01b0\u1ee3c t\u1eebng package, th\u00f4ng tin n\u00e0y \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef d\u01b0\u1edbi d\u1ea1ng c\u00e1c Recipes file (with .bb extention). M\u1ed9t package \u0111\u01b0\u1ee3c \u0111\u1eb7t t\u00ean theo d\u1ea1ng: ${PN}-${EXTENDPE}${PV}-${PR}. Trong \u0111\u00f3: PN: package name, \u0111\u1ed3ng th\u1eddi l\u00e0 recipe name c\u1ee7a package \u0111\u00f3. PV: version of recipe PR: revision of recipe C\u00e1c kh\u00e1i ni\u1ec7m n\u00e0y r\u1ea5t h\u1eefu \u00edch trong qu\u00e1 tr\u00ecnh \u0111\u1ecdc c\u00e1c recipe files Bitbake References [1] Bitbake User Manual - yoctoproject.org [2] Yocto Project Overview and Concepts Mannual - yoctoproject.org Concept Yocto xem c\u00e1c packages (kh\u00e1i ni\u1ec7m packages trong Yocto r\u1ea5t r\u1ed9ng, n\u00f3 c\u00f3 th\u1ec3 l\u00e0 SDK, Linux Kernel, bootloader, g\u00f3i \u1ee9ng d\u1ee5ng, th\u01b0 vi\u00ean, ...) nh\u01b0 l\u00e0 c\u00e1c m\u00f3n \u0103n, trong \u0111\u00f3 Bitbake l\u00e0 \u0111\u1ea7u b\u1ebfp. *Bitbake \u0111\u01b0\u1ee3c vi\u1ebft t\u1eeb Python \u0110\u1ea7u b\u1ebfp Bitbake n\u1ea5u c\u00e1c m\u00f3n \u0103n d\u01b0\u1edbi c\u00e1c c\u00f4ng th\u1ee9c \u0111\u01b0\u1ee3c vi\u1ebft s\u1eb5n b\u1edfi ng\u01b0\u1eddi y\u00eau c\u1ea7u g\u1ecdi l\u00e0 recipe (/\u02c8res\u0259pi/). recipe b\u1ea3n ch\u1ea5t l\u00e0 m\u1ed9t file c\u00f3 ph\u1ea7n m\u1edf r\u1ed9ng l\u00e0 .bb . Yocto c\u00f3 m\u1ed9t b\u1ed9 c\u00fa ph\u00e1p d\u00e0nh ri\u00eang cho vi\u1ebft recipe . Working flow Refer in 4.3.5 t\u1ea1i [2]. Trong Yocto, \u0111\u1ec3 thu\u1eadn ti\u1ec7n cho vi\u1ec7c \"n\u1ea5u \u0103n\" \u0111\u01b0\u1ee3c chuy\u00ean nghi\u1ec7p, qu\u00e1 tr\u00ecnh \"bake\" c\u1ee7a Bitbake \u0111\u01b0\u1ee3c chia ra c\u00e1c qu\u00e1 tr\u00ecnh nh\u1ecf. T\u1ea5t c\u1ea3 c\u00e1c m\u00f3n \u0103n \u0111\u1ec1u ph\u1ea3i \u0111\u01b0\u1ee3c ki\u1ec3m tra v\u00e0 th\u1ef1c hi\u1ec7n qua c\u00e1c b\u01b0\u1edbc n\u00e0y. C\u00e1c b\u01b0\u1edbc n\u00e0y \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i m\u1ed9t class: base.bbclass . V\u00e0 t\u1ea5t nhi\u00ean, ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 kh\u00f4ng s\u1eed d\u1ee5ng c\u00f4ng th\u1ee9c n\u1ea5u m\u1eb7c \u0111\u1ecbnh m\u00e0 thay \u0111\u1ed5i c\u00e1c b\u01b0\u1edbc n\u00e0y b\u1eb1ng c\u00e1c \u0111\u1ecbnh ngh\u0129a trong recipe c\u1ee7a h\u1ecd. C\u00e1c b\u01b0\u1edbc \u0111\u00f3 l\u00e0 Source Fetching, Patching do\\_fetch -> do_unpack -> do_patch Configuration, Compilation, and Staging do_configure -> do_compile -> do_install do_configure ti\u1ebfn h\u00e0nh c\u00e1c t\u00e1c v\u1ee5 c\u1ea5u h\u00ecnh tr\u01b0\u1edbc khi build m\u1ed9t g\u00f3i ph\u1ea7n m\u1ec1m. C\u00f3 th\u1ec3 h\u00ecnh dung qu\u00e1 tr\u00ecnh n\u00e0y gi\u1ed1ng nh\u01b0 ch\u1ea1y ./configure tr\u01b0\u1edbc khi make m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh. do_compile \u0111a ph\u1ea7n s\u1ebd ti\u1ebfn h\u00e0nh g\u1ecdi make \u0111\u1ebfn Makefile c\u1ee7a m\u00e3 ngu\u1ed3n g\u00f3i ph\u1ea7n m\u1ec1m. K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef ngay c\u00f9ng m\u1edbi m\u00e3 ngu\u1ed3n v\u1eeba \u0111\u01b0\u1ee3c build. G\u1ecdi l\u00e0 directory S/B. do_install Copy binarry file from S/B (k\u1ebft qu\u1ea3 c\u1ee7a task do_compile) dir to D (image - destination dir). Binary l\u01b0u tr\u1eef t\u1ea1i th\u01b0 m\u1ee5c D s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho qu\u00e1 c\u00e1c qu\u00e1 tr\u00ecnh do_package , do_packagedata v\u00e0 do_populate_sysroot Package Splitting do_package, do_packagedata M\u1ed9t b\u1ed9 m\u00e3 ngu\u1ed3n c\u00f3 th\u1ec3 compile m\u1ed9t l\u00fac ra r\u1ea5t nhi\u1ec1u \u1ee9ng d\u1ee5ng, c\u00e1c \u1ee9ng d\u1ee5ng n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c nh\u00f3m l\u1ea1i v\u1edbi nhau th\u00e0nh c\u00e1c packages. V\u00ed d\u1ee5 v\u1edbi m\u00e3 ngu\u1ed3n libiio c\u00f3 th\u1ec3 build ra \u0111\u01b0\u1ee3c c\u00e1c g\u00f3i nh\u01b0: libiio, libiio-test (ch\u1ee9a iio_infor), libiio-iiod (ch\u1ee9a IIO Deamon)... T\u00e1c d\u1ee5ng c\u1ee7a do_package l\u00e0 ph\u00e2n t\u00e1c c\u00e1c binary (c\u0169ng nh\u01b0 d\u1eef li\u1ec7u \u0111i k\u00e8m n\u1ebfu c\u00f3) th\u00e0nh c\u00e1c g\u00f3i ph\u1ea7n m\u1ec1m kh\u00e1c nhau. do_populate_sysroot \u0110\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong layers/core/meta/classes/staging.bbclass s\u1eed d\u1ee5ng \u0111\u1ec3 staging k\u1ebft qu\u1ea3 build tail build directory temporary \u0111\u1ebfn build/tmp/work/cortexa9hf-neon-xilinx-linux-gnueabi/libiio/0.15+gitAUTOINC+6ecff5d46e-r0/sysroot-destdir/ . Qu\u00e1 tr\u00ecnh -c do_populate_sysroot s\u1ebd ti\u1ebfn h\u00e0nh th\u00eam do_qa_staging v\u00e0 sstate_task_postfunc (\u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong sstate.bbclass ). H\u00e0m sstate_task_postfunc s\u1ebd ti\u1ebfn h\u00e0nh stagging file t\u1eeb sysroot-destdir \u0111\u1ebfn build/tmp/sysroots/plnx_arm . Hi\u1ec7n t\u1ea1i v\u1eabn ch\u01b0a t\u00ecm hi\u1ec3u \u0111\u01b0\u1ee3c t\u00e1c d\u1ee5ng c\u1ee7a th\u01b0 m\u1ee5c n\u00e0y c\u0169ng nh\u01b0 t\u00e1c d\u1ee5ng c\u1ee7a do_populate_sysroot . RPM Package Generation do_package_write_rpm \u0110\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong layers/core/meta/classes/package_rpm.bbclass c\u00f3 nhi\u1ec7m vu creates RPM packages (i.e. *.rpm files) and places them in the ${DEPLOY_DIR_RPM} directory in the package feeds area. Trong Petalinux 2017.4 (m\u1ed9t th\u1ef1c th\u1ec3 \u1ee9ng d\u1ee5ng Yocto) th\u00ec ${DEPLOY_DIR_RPM} \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0 build/tmp/deploy/rpm . C\u00e1c g\u00f3i ph\u1ea7n m\u1ec1m \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i d\u01b0\u1edbi \u0111\u1ecbnh d\u1ea1ng RPM s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a \u0111\u1ebfn th\u01b0 m\u1ee5c n\u00e0y. V\u00ed d\u1ee5 nh\u01b0 c\u00e1c g\u00f3i trong libiio: (li\u1ec7t k\u00ea c\u00e1c g\u00f3i t\u1ea1i \u0111\u00e2y). B\u1ea3n ch\u1ea5t h\u00e0m do_package_rpm trong package_rpm.bbclass s\u1ebd g\u1ecdi \u0111\u1ebfn c\u00f4ng c\u1ee5 rpmbuild - linux.die.net (m\u1ed9t c\u00f4ng c\u1ee5 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 build RPM package). Qu\u00e1 tr\u00ecnh ch\u1ea1y rpmbuild c\u1ea7n \u0111\u1ebfn SPEC File. Tham kh\u1ea3o th\u00eam v\u1ec1 SPEC file t\u1ea1i \u0111\u00e2y . Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n rpmbuild \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u1ea1i khu v\u1ef1c build c\u1ee7a t\u1eebng package. V\u00ed d\u1ee5 trong tr\u01b0\u1eddng h\u1ee3p package l\u00e0 libiio: build/tmp/work/cortexa9hf-neon-xilinx-linux-gnueabi/libiio/0.15+gitAUTOINC+6ecff5d46e-r0 For checking an un-installed RPM pkg, use rpm -qip <name>.rpm . Read more at: https://www.tecmint.com/20-practical-examples-of-rpm-commands-in-linux/ Nh\u01b0 v\u1eady, t\u1eeb c\u00e1c binary \u0111\u01b0\u1ee3c build b\u1edfi c\u00e1c t\u00e1c v\u1ee5 do_configure/do_compile/do_install , do_package_write_rpm s\u1ebd \u0111\u00f3ng g\u00f3i th\u00e0nh c\u00e1c rpm package s\u1eb5n s\u00e0ng cho c\u00e0i \u0111\u1eb7t. Rootfs Generation do_rootfs Ti\u1ebfn h\u00e0nh theo package petalinux-user-image . do_rootfs \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i layers/core/meta/classes/image.bbclass th\u1ef1c hi\u1ec7n t\u00ecm m\u1ed9t danh s\u00e1ch c\u00e1c package (.rpm, .deb) (th\u00f4ng tin v\u1ec1 c\u00e1c packages n\u00e0y \u0111\u01b0\u1ee3c ch\u1ee9a trong bi\u1ebfn m\u00f4i tr\u01b0\u1eddng PACKAGE_INSTALL ) \u0111\u1ec3 ti\u1ebfn h\u00e0nh copy \u0111\u1ebfn IMAGE_ROOTFS . Theo \u0111\u1ecbnh ngh\u0129a c\u1ee7a Yocto, IMAGE_ROOTFS l\u00e0 \"The location of the root filesystem while it is under construction\". Trong m\u1ed9t tr\u01b0\u1eddng h\u1ee3p th\u1ef1c t\u1ebf, IMAGE_ROOTFS l\u00e0: build/tmp/work/plnx_arm-xilinx-linux-gnueabi/petalinux-user-image/1.0-r0/rootfs What is relation ship between PACKAGE_INSTALL and IMAGE_INSTALL ? how Yocto creates these .rpm, .deb packages? IMAGE_ROOTFS l\u00e0 n\u01a1i ch\u1ee9a rootfs, k\u1ebft qu\u1ea3 build c\u1ee7a h\u1ec7 th\u1ed1ng. T\u1eeb rootfs c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i th\u00e0nh c\u00e1c \u0111\u1ecbnh d\u1ea1ng kh\u00e1c nhau nh\u01b0: cpio, ext4, ext3, jffs2, ... do_image_ext3/4 \u0110\u00f3ng g\u00f3i rootfs trong IMAGE_ROOTFS th\u00e0nh c\u00e1c \u0111\u1ecbnh d\u1ea1ng filesystem ext3/ext4. Ti\u1ebfn h\u00e0nh \u0111\u00f3ng g\u00f3i rootfs d\u01b0\u1edbi \u0111\u1ecbnh d\u1ea1ng ext3. B\u1ea3n ch\u1ea5t c\u1ee7a h\u00e0m n\u00e0y s\u1ebd g\u1ecdi \u0111\u1ebfn oe_mkext234fs \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong layers/core/meta/classes/image_types.bbclass . H\u00e0m oe_mkext234fs g\u1ecdi \u0111\u1ebfn mkfs.ext3/4 (l\u00e0 m\u1ed9t b\u1ed9 c\u00f4ng c\u1ee5 \u0111\u00f3ng g\u00f3i m\u1ed9t b\u1ed9 t\u1eadp tin d\u01b0\u1edbi d\u1ea1ng file c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho c\u00e1c \u0111\u1ecbnh d\u1ea1ng ext3/ext4) \u0111\u1ec3 ti\u1ebfn h\u00e0nh \u0111\u00f3ng g\u00f3i rootfs. SDK Generation Recipe syntax Sharing Functionality BitBake allows for metadata sharing through include files (.inc) and class files (.bbclass). inherit : l\u00e0 directive. V\u00ed d\u1ee5 inherit autotools \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 k\u1ebf th\u1eeba to\u00e0n b\u1ed9 h\u00e0m c\u1ee7a class autotools.bbclass. Ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 \"override\" c\u00e1c h\u00e0m c\u1ee7a class \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba b\u1eb1ng c\u00e1ch ph\u00e1t tri\u1ec3n c\u00e1c h\u00e0m ho\u1eb7c bi\u1ebfn \u0111\u00f3 sau directive inherit . Terms and definitions in Bitbake File Download Support Bitbake cung c\u1ea5p c\u01a1 ch\u1ebf download/unpack/patching source code. Fetcher (Downloader) ti\u1ebfn h\u00e0nh download source code t\u1eeb local/remote repository. Qu\u00e1 tr\u00ecnh unpack th\u1ef1c hi\u1ec7n gi\u1ea3i n\u00e9n source code ngay sau qu\u00e1 tr\u00ecnh download source code. Unpacker h\u1ed7 tr\u1ee3 decompress/extract c\u00e1c file c\u00f3 ph\u1ea7n m\u1edf r\u1ed9ng nh\u01b0 sau: \".Z\", \".z\", \".gz\", \".xz\", \".zip\", \".jar\", \".ipk\", \".rpm\". \".srpm\", \".deb\" and \".bz2\". Bitbake variables ${SRC_URI} The list of source files - local or remote. \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng trong recipe file \u0111\u1ec3 th\u00f4ng b\u00e1o cho Yocto source code n\u00e0o c\u1ee7a package s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 build. Yocto Fetcher (Downloader) ti\u1ebfn h\u00e0nh download v\u00e0 b\u1ed5 sung c\u00e1c b\u1ea3n v\u00e1 v\u00e0o source code tr\u01b0\u1edbc khi ti\u1ebfn h\u00e0nh c\u00e1c b\u01b0\u1edbc ti\u1ebfp theo. ${IMAGE_INSTALL} Used by recipes to specify the packages to install into an image through the image class ${PACKAGES} The list of packages the recipe creates.","title":"Yocto"},{"location":"lnx_es/yocto/#terms-and-definitions-in-yocto","text":"C\u00e1c kh\u00e1i ni\u1ec7m n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 t\u1ea1i Yocto Reference Manual . Build Directory L\u00e0 khu v\u1ef1c Yocto s\u1eed d\u1ee5ng \u0111\u1ec3 build h\u1ec7 th\u1ed1ng. Trong tr\u01b0\u1eddng h\u1ee3p c\u1ee7a Petalinux 2017.4, Build Dir l\u00e0 /build. TOPDIR \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u tr\u1eef \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn Build Dir. Package \u0110\u1ed1i t\u01b0\u1ee3ng t\u00e1c \u0111\u1ed9ng \u0111\u1ebfn trong Yocto l\u00e0 Package. Trong \u0111\u00f3 m\u1ed9t application, library, bootloader hay kernel \u0111\u1ec1u \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a v\u00e0 coi l\u00e0 Package trong ph\u1ea1m vi c\u1ee7a Yocto project. Ng\u01b0\u1eddi d\u00f9ng c\u1ea7n cung c\u1ea5p c\u00e1c th\u00f4ng tin \u0111\u1ec3 Yocto c\u00f3 th\u1ec3 \"bake\" \u0111\u01b0\u1ee3c t\u1eebng package, th\u00f4ng tin n\u00e0y \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef d\u01b0\u1edbi d\u1ea1ng c\u00e1c Recipes file (with .bb extention). M\u1ed9t package \u0111\u01b0\u1ee3c \u0111\u1eb7t t\u00ean theo d\u1ea1ng: ${PN}-${EXTENDPE}${PV}-${PR}. Trong \u0111\u00f3: PN: package name, \u0111\u1ed3ng th\u1eddi l\u00e0 recipe name c\u1ee7a package \u0111\u00f3. PV: version of recipe PR: revision of recipe C\u00e1c kh\u00e1i ni\u1ec7m n\u00e0y r\u1ea5t h\u1eefu \u00edch trong qu\u00e1 tr\u00ecnh \u0111\u1ecdc c\u00e1c recipe files","title":"Terms and definitions in Yocto"},{"location":"lnx_es/yocto/#bitbake","text":"","title":"Bitbake"},{"location":"lnx_es/yocto/#references","text":"[1] Bitbake User Manual - yoctoproject.org [2] Yocto Project Overview and Concepts Mannual - yoctoproject.org","title":"References"},{"location":"lnx_es/yocto/#concept","text":"Yocto xem c\u00e1c packages (kh\u00e1i ni\u1ec7m packages trong Yocto r\u1ea5t r\u1ed9ng, n\u00f3 c\u00f3 th\u1ec3 l\u00e0 SDK, Linux Kernel, bootloader, g\u00f3i \u1ee9ng d\u1ee5ng, th\u01b0 vi\u00ean, ...) nh\u01b0 l\u00e0 c\u00e1c m\u00f3n \u0103n, trong \u0111\u00f3 Bitbake l\u00e0 \u0111\u1ea7u b\u1ebfp. *Bitbake \u0111\u01b0\u1ee3c vi\u1ebft t\u1eeb Python \u0110\u1ea7u b\u1ebfp Bitbake n\u1ea5u c\u00e1c m\u00f3n \u0103n d\u01b0\u1edbi c\u00e1c c\u00f4ng th\u1ee9c \u0111\u01b0\u1ee3c vi\u1ebft s\u1eb5n b\u1edfi ng\u01b0\u1eddi y\u00eau c\u1ea7u g\u1ecdi l\u00e0 recipe (/\u02c8res\u0259pi/). recipe b\u1ea3n ch\u1ea5t l\u00e0 m\u1ed9t file c\u00f3 ph\u1ea7n m\u1edf r\u1ed9ng l\u00e0 .bb . Yocto c\u00f3 m\u1ed9t b\u1ed9 c\u00fa ph\u00e1p d\u00e0nh ri\u00eang cho vi\u1ebft recipe .","title":"Concept"},{"location":"lnx_es/yocto/#working-flow","text":"Refer in 4.3.5 t\u1ea1i [2]. Trong Yocto, \u0111\u1ec3 thu\u1eadn ti\u1ec7n cho vi\u1ec7c \"n\u1ea5u \u0103n\" \u0111\u01b0\u1ee3c chuy\u00ean nghi\u1ec7p, qu\u00e1 tr\u00ecnh \"bake\" c\u1ee7a Bitbake \u0111\u01b0\u1ee3c chia ra c\u00e1c qu\u00e1 tr\u00ecnh nh\u1ecf. T\u1ea5t c\u1ea3 c\u00e1c m\u00f3n \u0103n \u0111\u1ec1u ph\u1ea3i \u0111\u01b0\u1ee3c ki\u1ec3m tra v\u00e0 th\u1ef1c hi\u1ec7n qua c\u00e1c b\u01b0\u1edbc n\u00e0y. C\u00e1c b\u01b0\u1edbc n\u00e0y \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i m\u1ed9t class: base.bbclass . V\u00e0 t\u1ea5t nhi\u00ean, ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 kh\u00f4ng s\u1eed d\u1ee5ng c\u00f4ng th\u1ee9c n\u1ea5u m\u1eb7c \u0111\u1ecbnh m\u00e0 thay \u0111\u1ed5i c\u00e1c b\u01b0\u1edbc n\u00e0y b\u1eb1ng c\u00e1c \u0111\u1ecbnh ngh\u0129a trong recipe c\u1ee7a h\u1ecd. C\u00e1c b\u01b0\u1edbc \u0111\u00f3 l\u00e0 Source Fetching, Patching do\\_fetch -> do_unpack -> do_patch Configuration, Compilation, and Staging do_configure -> do_compile -> do_install do_configure ti\u1ebfn h\u00e0nh c\u00e1c t\u00e1c v\u1ee5 c\u1ea5u h\u00ecnh tr\u01b0\u1edbc khi build m\u1ed9t g\u00f3i ph\u1ea7n m\u1ec1m. C\u00f3 th\u1ec3 h\u00ecnh dung qu\u00e1 tr\u00ecnh n\u00e0y gi\u1ed1ng nh\u01b0 ch\u1ea1y ./configure tr\u01b0\u1edbc khi make m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh. do_compile \u0111a ph\u1ea7n s\u1ebd ti\u1ebfn h\u00e0nh g\u1ecdi make \u0111\u1ebfn Makefile c\u1ee7a m\u00e3 ngu\u1ed3n g\u00f3i ph\u1ea7n m\u1ec1m. K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef ngay c\u00f9ng m\u1edbi m\u00e3 ngu\u1ed3n v\u1eeba \u0111\u01b0\u1ee3c build. G\u1ecdi l\u00e0 directory S/B. do_install Copy binarry file from S/B (k\u1ebft qu\u1ea3 c\u1ee7a task do_compile) dir to D (image - destination dir). Binary l\u01b0u tr\u1eef t\u1ea1i th\u01b0 m\u1ee5c D s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho qu\u00e1 c\u00e1c qu\u00e1 tr\u00ecnh do_package , do_packagedata v\u00e0 do_populate_sysroot Package Splitting do_package, do_packagedata M\u1ed9t b\u1ed9 m\u00e3 ngu\u1ed3n c\u00f3 th\u1ec3 compile m\u1ed9t l\u00fac ra r\u1ea5t nhi\u1ec1u \u1ee9ng d\u1ee5ng, c\u00e1c \u1ee9ng d\u1ee5ng n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c nh\u00f3m l\u1ea1i v\u1edbi nhau th\u00e0nh c\u00e1c packages. V\u00ed d\u1ee5 v\u1edbi m\u00e3 ngu\u1ed3n libiio c\u00f3 th\u1ec3 build ra \u0111\u01b0\u1ee3c c\u00e1c g\u00f3i nh\u01b0: libiio, libiio-test (ch\u1ee9a iio_infor), libiio-iiod (ch\u1ee9a IIO Deamon)... T\u00e1c d\u1ee5ng c\u1ee7a do_package l\u00e0 ph\u00e2n t\u00e1c c\u00e1c binary (c\u0169ng nh\u01b0 d\u1eef li\u1ec7u \u0111i k\u00e8m n\u1ebfu c\u00f3) th\u00e0nh c\u00e1c g\u00f3i ph\u1ea7n m\u1ec1m kh\u00e1c nhau. do_populate_sysroot \u0110\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong layers/core/meta/classes/staging.bbclass s\u1eed d\u1ee5ng \u0111\u1ec3 staging k\u1ebft qu\u1ea3 build tail build directory temporary \u0111\u1ebfn build/tmp/work/cortexa9hf-neon-xilinx-linux-gnueabi/libiio/0.15+gitAUTOINC+6ecff5d46e-r0/sysroot-destdir/ . Qu\u00e1 tr\u00ecnh -c do_populate_sysroot s\u1ebd ti\u1ebfn h\u00e0nh th\u00eam do_qa_staging v\u00e0 sstate_task_postfunc (\u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong sstate.bbclass ). H\u00e0m sstate_task_postfunc s\u1ebd ti\u1ebfn h\u00e0nh stagging file t\u1eeb sysroot-destdir \u0111\u1ebfn build/tmp/sysroots/plnx_arm . Hi\u1ec7n t\u1ea1i v\u1eabn ch\u01b0a t\u00ecm hi\u1ec3u \u0111\u01b0\u1ee3c t\u00e1c d\u1ee5ng c\u1ee7a th\u01b0 m\u1ee5c n\u00e0y c\u0169ng nh\u01b0 t\u00e1c d\u1ee5ng c\u1ee7a do_populate_sysroot . RPM Package Generation do_package_write_rpm \u0110\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong layers/core/meta/classes/package_rpm.bbclass c\u00f3 nhi\u1ec7m vu creates RPM packages (i.e. *.rpm files) and places them in the ${DEPLOY_DIR_RPM} directory in the package feeds area. Trong Petalinux 2017.4 (m\u1ed9t th\u1ef1c th\u1ec3 \u1ee9ng d\u1ee5ng Yocto) th\u00ec ${DEPLOY_DIR_RPM} \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0 build/tmp/deploy/rpm . C\u00e1c g\u00f3i ph\u1ea7n m\u1ec1m \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i d\u01b0\u1edbi \u0111\u1ecbnh d\u1ea1ng RPM s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a \u0111\u1ebfn th\u01b0 m\u1ee5c n\u00e0y. V\u00ed d\u1ee5 nh\u01b0 c\u00e1c g\u00f3i trong libiio: (li\u1ec7t k\u00ea c\u00e1c g\u00f3i t\u1ea1i \u0111\u00e2y). B\u1ea3n ch\u1ea5t h\u00e0m do_package_rpm trong package_rpm.bbclass s\u1ebd g\u1ecdi \u0111\u1ebfn c\u00f4ng c\u1ee5 rpmbuild - linux.die.net (m\u1ed9t c\u00f4ng c\u1ee5 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 build RPM package). Qu\u00e1 tr\u00ecnh ch\u1ea1y rpmbuild c\u1ea7n \u0111\u1ebfn SPEC File. Tham kh\u1ea3o th\u00eam v\u1ec1 SPEC file t\u1ea1i \u0111\u00e2y . Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n rpmbuild \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u1ea1i khu v\u1ef1c build c\u1ee7a t\u1eebng package. V\u00ed d\u1ee5 trong tr\u01b0\u1eddng h\u1ee3p package l\u00e0 libiio: build/tmp/work/cortexa9hf-neon-xilinx-linux-gnueabi/libiio/0.15+gitAUTOINC+6ecff5d46e-r0 For checking an un-installed RPM pkg, use rpm -qip <name>.rpm . Read more at: https://www.tecmint.com/20-practical-examples-of-rpm-commands-in-linux/ Nh\u01b0 v\u1eady, t\u1eeb c\u00e1c binary \u0111\u01b0\u1ee3c build b\u1edfi c\u00e1c t\u00e1c v\u1ee5 do_configure/do_compile/do_install , do_package_write_rpm s\u1ebd \u0111\u00f3ng g\u00f3i th\u00e0nh c\u00e1c rpm package s\u1eb5n s\u00e0ng cho c\u00e0i \u0111\u1eb7t. Rootfs Generation do_rootfs Ti\u1ebfn h\u00e0nh theo package petalinux-user-image . do_rootfs \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i layers/core/meta/classes/image.bbclass th\u1ef1c hi\u1ec7n t\u00ecm m\u1ed9t danh s\u00e1ch c\u00e1c package (.rpm, .deb) (th\u00f4ng tin v\u1ec1 c\u00e1c packages n\u00e0y \u0111\u01b0\u1ee3c ch\u1ee9a trong bi\u1ebfn m\u00f4i tr\u01b0\u1eddng PACKAGE_INSTALL ) \u0111\u1ec3 ti\u1ebfn h\u00e0nh copy \u0111\u1ebfn IMAGE_ROOTFS . Theo \u0111\u1ecbnh ngh\u0129a c\u1ee7a Yocto, IMAGE_ROOTFS l\u00e0 \"The location of the root filesystem while it is under construction\". Trong m\u1ed9t tr\u01b0\u1eddng h\u1ee3p th\u1ef1c t\u1ebf, IMAGE_ROOTFS l\u00e0: build/tmp/work/plnx_arm-xilinx-linux-gnueabi/petalinux-user-image/1.0-r0/rootfs What is relation ship between PACKAGE_INSTALL and IMAGE_INSTALL ? how Yocto creates these .rpm, .deb packages? IMAGE_ROOTFS l\u00e0 n\u01a1i ch\u1ee9a rootfs, k\u1ebft qu\u1ea3 build c\u1ee7a h\u1ec7 th\u1ed1ng. T\u1eeb rootfs c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i th\u00e0nh c\u00e1c \u0111\u1ecbnh d\u1ea1ng kh\u00e1c nhau nh\u01b0: cpio, ext4, ext3, jffs2, ... do_image_ext3/4 \u0110\u00f3ng g\u00f3i rootfs trong IMAGE_ROOTFS th\u00e0nh c\u00e1c \u0111\u1ecbnh d\u1ea1ng filesystem ext3/ext4. Ti\u1ebfn h\u00e0nh \u0111\u00f3ng g\u00f3i rootfs d\u01b0\u1edbi \u0111\u1ecbnh d\u1ea1ng ext3. B\u1ea3n ch\u1ea5t c\u1ee7a h\u00e0m n\u00e0y s\u1ebd g\u1ecdi \u0111\u1ebfn oe_mkext234fs \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong layers/core/meta/classes/image_types.bbclass . H\u00e0m oe_mkext234fs g\u1ecdi \u0111\u1ebfn mkfs.ext3/4 (l\u00e0 m\u1ed9t b\u1ed9 c\u00f4ng c\u1ee5 \u0111\u00f3ng g\u00f3i m\u1ed9t b\u1ed9 t\u1eadp tin d\u01b0\u1edbi d\u1ea1ng file c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho c\u00e1c \u0111\u1ecbnh d\u1ea1ng ext3/ext4) \u0111\u1ec3 ti\u1ebfn h\u00e0nh \u0111\u00f3ng g\u00f3i rootfs. SDK Generation","title":"Working flow"},{"location":"lnx_es/yocto/#recipe-syntax","text":"Sharing Functionality BitBake allows for metadata sharing through include files (.inc) and class files (.bbclass). inherit : l\u00e0 directive. V\u00ed d\u1ee5 inherit autotools \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 k\u1ebf th\u1eeba to\u00e0n b\u1ed9 h\u00e0m c\u1ee7a class autotools.bbclass. Ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 \"override\" c\u00e1c h\u00e0m c\u1ee7a class \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba b\u1eb1ng c\u00e1ch ph\u00e1t tri\u1ec3n c\u00e1c h\u00e0m ho\u1eb7c bi\u1ebfn \u0111\u00f3 sau directive inherit .","title":"Recipe syntax"},{"location":"lnx_es/yocto/#terms-and-definitions-in-bitbake","text":"File Download Support Bitbake cung c\u1ea5p c\u01a1 ch\u1ebf download/unpack/patching source code. Fetcher (Downloader) ti\u1ebfn h\u00e0nh download source code t\u1eeb local/remote repository. Qu\u00e1 tr\u00ecnh unpack th\u1ef1c hi\u1ec7n gi\u1ea3i n\u00e9n source code ngay sau qu\u00e1 tr\u00ecnh download source code. Unpacker h\u1ed7 tr\u1ee3 decompress/extract c\u00e1c file c\u00f3 ph\u1ea7n m\u1edf r\u1ed9ng nh\u01b0 sau: \".Z\", \".z\", \".gz\", \".xz\", \".zip\", \".jar\", \".ipk\", \".rpm\". \".srpm\", \".deb\" and \".bz2\".","title":"Terms and definitions in Bitbake"},{"location":"lnx_es/yocto/#bitbake-variables","text":"${SRC_URI} The list of source files - local or remote. \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng trong recipe file \u0111\u1ec3 th\u00f4ng b\u00e1o cho Yocto source code n\u00e0o c\u1ee7a package s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 build. Yocto Fetcher (Downloader) ti\u1ebfn h\u00e0nh download v\u00e0 b\u1ed5 sung c\u00e1c b\u1ea3n v\u00e1 v\u00e0o source code tr\u01b0\u1edbc khi ti\u1ebfn h\u00e0nh c\u00e1c b\u01b0\u1edbc ti\u1ebfp theo. ${IMAGE_INSTALL} Used by recipes to specify the packages to install into an image through the image class ${PACKAGES} The list of packages the recipe creates.","title":"Bitbake variables"},{"location":"lnx_es/zynq7000/","text":"Zynq7000","title":"Zynq7000"},{"location":"lnx_es/zynq7000/#zynq7000","text":"","title":"Zynq7000"},{"location":"lnx_es/docker/docker/","text":"","title":"Docker"},{"location":"lnx_es/dpdk/dpdk/","text":"","title":"DPDK"},{"location":"lnx_es/eeprom/eeprom/","text":"Electrically Erasable and Programmable Read-Only Memory Introduction Serial EEPROM devices are by far the most popular vehicle utilized in today\u2019s modern electronic equipment to store personal preference and configuration data . Applications span a wide spectrum of consumer, automotive, telecommunication, medical, industrial, and computing applications. This popularity stems from a unique combination of capabilities that cannot be found in any other memory solution. These features include: byte-write alterability nonvolatile data storage 1 million cycles of write endurance very low power supply voltage operation 100 year data retention low pin-count packages, low cost of ownership, and extremely low active and standby currents. What is EEPROM? Serial EEPROM Serial EEPROM uses serial interfaces likes: I2C or SPI. For I2C EEPROM, Read/Write operation populary has two mode: Byte Write and Page Write. Normaly, EEPROM data is 8 bit word. Each word is addressed by word address that its width depends on EEPROM size. For example, BR24G64-3A ROHM Semiconductor EEPROM with 64 Kb has to have 13 bit for addressing. Or AT24C08A Atmel EEPROM with 2 Kb uses 10 bit word address. Now we will take a look at how EEPROM device manages word address. Byte Write/Read BR24G64-3A With BR24G64-3A, it has 13 bit word address so timing for Byte Write Cycle will look like figure below. In this case, I2C master need to use 4 bytes for writing: 1 device address byte, 2 byte for word address (15th to 13th bit are ignored) and 1 byte for data word. In Linux, we can using i2ctransfer (a program in i2c-tools) for write a byte to EEPROM. For example: > i2ctransfer -y 1 w3@0x57 0x00 0x0a 0x55 (1) Command (1) is used to write to device 0x57 in I2C bus 1. Data 0x55 will be writen to address: 0x000a. Reading operation also has to use 2 bytes for word address. The difference here is using two I2C messages instead of using one I2C message in writing case. i2ctransfer command for reading case. > i2ctransfer -y 1 w2@0x57 0x00 0x00 r1 AT32C08A AT32C08A uses 10 bit for word address. Although using more than 8 bit for word address, AT32C08A has different way in write/read with BR24G64-3A. AT32C08A has to use 3 bytes for writing a byte: 1 device address byte, 1 byte for word address and 1 byte for data. To get 10 bit word address, AT32C08A borrows 2 LSB bit (P0 P1 in figure below) in device address byte. So, I2C transfer will look like:","title":"EEPROM"},{"location":"lnx_es/eeprom/eeprom/#electrically-erasable-and-programmable-read-only-memory","text":"","title":"Electrically Erasable and Programmable Read-Only Memory"},{"location":"lnx_es/eeprom/eeprom/#introduction","text":"Serial EEPROM devices are by far the most popular vehicle utilized in today\u2019s modern electronic equipment to store personal preference and configuration data . Applications span a wide spectrum of consumer, automotive, telecommunication, medical, industrial, and computing applications. This popularity stems from a unique combination of capabilities that cannot be found in any other memory solution. These features include: byte-write alterability nonvolatile data storage 1 million cycles of write endurance very low power supply voltage operation 100 year data retention low pin-count packages, low cost of ownership, and extremely low active and standby currents.","title":"Introduction"},{"location":"lnx_es/eeprom/eeprom/#what-is-eeprom","text":"","title":"What is EEPROM?"},{"location":"lnx_es/eeprom/eeprom/#serial-eeprom","text":"Serial EEPROM uses serial interfaces likes: I2C or SPI. For I2C EEPROM, Read/Write operation populary has two mode: Byte Write and Page Write. Normaly, EEPROM data is 8 bit word. Each word is addressed by word address that its width depends on EEPROM size. For example, BR24G64-3A ROHM Semiconductor EEPROM with 64 Kb has to have 13 bit for addressing. Or AT24C08A Atmel EEPROM with 2 Kb uses 10 bit word address. Now we will take a look at how EEPROM device manages word address.","title":"Serial EEPROM"},{"location":"lnx_es/eeprom/eeprom/#byte-writeread","text":"","title":"Byte Write/Read"},{"location":"lnx_es/eeprom/eeprom/#br24g64-3a","text":"With BR24G64-3A, it has 13 bit word address so timing for Byte Write Cycle will look like figure below. In this case, I2C master need to use 4 bytes for writing: 1 device address byte, 2 byte for word address (15th to 13th bit are ignored) and 1 byte for data word. In Linux, we can using i2ctransfer (a program in i2c-tools) for write a byte to EEPROM. For example: > i2ctransfer -y 1 w3@0x57 0x00 0x0a 0x55 (1) Command (1) is used to write to device 0x57 in I2C bus 1. Data 0x55 will be writen to address: 0x000a. Reading operation also has to use 2 bytes for word address. The difference here is using two I2C messages instead of using one I2C message in writing case. i2ctransfer command for reading case. > i2ctransfer -y 1 w2@0x57 0x00 0x00 r1","title":"BR24G64-3A"},{"location":"lnx_es/eeprom/eeprom/#at32c08a","text":"AT32C08A uses 10 bit for word address. Although using more than 8 bit for word address, AT32C08A has different way in write/read with BR24G64-3A. AT32C08A has to use 3 bytes for writing a byte: 1 device address byte, 1 byte for word address and 1 byte for data. To get 10 bit word address, AT32C08A borrows 2 LSB bit (P0 P1 in figure below) in device address byte. So, I2C transfer will look like:","title":"AT32C08A"},{"location":"lnx_es/linuxptp/linuxptp/","text":"Network Synchronization References 1588-2019 - IEEE Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems Introduction IEEE 1588 & ITU-T G.8260? Precision Time Protocol (PTP) is a two-way time transfer protocol that was introduced in the IEEE 1588-2002 standard. Since then a new version of PTP has evolved called PTPv2 that is addressed in IEEE 1588-2008. The IEEE 1588 standard defines the protocol for time and frequency synchronization in packet networks and it provides a flexible framework. It doesn\u2019t provide use cases, target any specificapplications, or give timing requirements. Application of the protocol for specific use cases is within the domain of corresponding standard bodies such as the International Telecommunication Union Telecommunication Standardization Sector. The International Telecommunication Union (ITU) is an agency of the United Nations (UN) that is responsible for information and communication technologies and ITU-T is the ITU Telecommunication Standardization Sector that coordinates standards for telecommunications. The ITU-T body is split into a number of study groups based on various topics. Study Group 15 (SG15) is the group that develops transport standardization. ITU\u2019s work plan is based on 4-year study periods. Synchronous Ethernet was standardized in the 2005 to 2008 period, IEEE 1588 carrying frequency in the 2009 to 2012 period, and phase and time transport in the 2013 to 2016 study period. ITU-T sets up a number of working groups called \u201cQuestions\u201d that study different topics. Question 13 (Q13), \u201cthe timing question\u201d, is the expert group that is responsible for the development of standards covering all aspects of frequency, phase, and time synchronization. It includes the clocks, network architecture and limits, metrics, and measurement techniques. LinuxPTP Fundamental The delay request-response mechanism uses the PTP messages Sync, Delay_Req, Delay_Resp, and possibly Follow_Up as shown in the timing diagram below. To calculate Mean Path Delay (MPD): MPD = [(t2 \u2013 t1) + (t4 \u2013 t3)]/2 = [(t2 \u2013 t3) + (t4 \u2013 t1)]/2 To calculate the Offset: Offset = t2 - t1 - (previous MPD)","title":"Linux PTP"},{"location":"lnx_es/linuxptp/linuxptp/#network-synchronization","text":"","title":"Network Synchronization"},{"location":"lnx_es/linuxptp/linuxptp/#references","text":"1588-2019 - IEEE Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems","title":"References"},{"location":"lnx_es/linuxptp/linuxptp/#introduction","text":"","title":"Introduction"},{"location":"lnx_es/linuxptp/linuxptp/#ieee-1588-itu-t-g8260","text":"Precision Time Protocol (PTP) is a two-way time transfer protocol that was introduced in the IEEE 1588-2002 standard. Since then a new version of PTP has evolved called PTPv2 that is addressed in IEEE 1588-2008. The IEEE 1588 standard defines the protocol for time and frequency synchronization in packet networks and it provides a flexible framework. It doesn\u2019t provide use cases, target any specificapplications, or give timing requirements. Application of the protocol for specific use cases is within the domain of corresponding standard bodies such as the International Telecommunication Union Telecommunication Standardization Sector. The International Telecommunication Union (ITU) is an agency of the United Nations (UN) that is responsible for information and communication technologies and ITU-T is the ITU Telecommunication Standardization Sector that coordinates standards for telecommunications. The ITU-T body is split into a number of study groups based on various topics. Study Group 15 (SG15) is the group that develops transport standardization. ITU\u2019s work plan is based on 4-year study periods. Synchronous Ethernet was standardized in the 2005 to 2008 period, IEEE 1588 carrying frequency in the 2009 to 2012 period, and phase and time transport in the 2013 to 2016 study period. ITU-T sets up a number of working groups called \u201cQuestions\u201d that study different topics. Question 13 (Q13), \u201cthe timing question\u201d, is the expert group that is responsible for the development of standards covering all aspects of frequency, phase, and time synchronization. It includes the clocks, network architecture and limits, metrics, and measurement techniques.","title":"IEEE 1588 &amp; ITU-T G.8260?"},{"location":"lnx_es/linuxptp/linuxptp/#linuxptp-fundamental","text":"The delay request-response mechanism uses the PTP messages Sync, Delay_Req, Delay_Resp, and possibly Follow_Up as shown in the timing diagram below. To calculate Mean Path Delay (MPD): MPD = [(t2 \u2013 t1) + (t4 \u2013 t3)]/2 = [(t2 \u2013 t3) + (t4 \u2013 t1)]/2 To calculate the Offset: Offset = t2 - t1 - (previous MPD)","title":"LinuxPTP Fundamental"},{"location":"lnx_es/makefile/makefile/","text":"Make system in Linux Original Note T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 chung v\u1ec1 Makefile, trong \u0111\u00f3 nh\u1eafc \u0111\u1ebfn c\u00e1c kh\u00e1i ni\u1ec7m quan tr\u1ecdng \u0111\u1ec3 c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c c\u00e1c Makefile ph\u1ee9c t\u1ea1p. make Kh\u00e1i ni\u1ec7m \"make\" l\u00e0 m\u1ed9t \"build tool\" \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1ecdi \u0111\u1ebfn c\u00e1c th\u00e0nh ph\u1ea7n trong m\u1ed9t toolchain (nh\u01b0 compiler, linker) \u0111\u1ec3 build ra executable programs t\u1eeb source code. \"make\" t\u1ef1 \u0111\u1ed9ng ph\u00e1t hi\u1ec7n \u0111\u01b0\u1ee3c ph\u1ea7n n\u00e0o c\u1ee7a source code \u0111\u01b0\u1ee3c s\u1eeda \u0111\u1ed5i \u0111\u1ec3 ti\u1ebfn h\u00e0nh build l\u1ea1i c\u1ee5c b\u1ed9 t\u1eebng b\u1ed9 ph\u1eadn \u0111\u00f3. Tr\u00e1nh \u0111\u01b0\u1ee3c tr\u01b0\u1eddng h\u1ee3p ph\u1ea3i build l\u1ea1i to\u00e0n b\u1ed9 h\u1ec7 th\u1ed1ng khi ch\u1ec9 m\u1ed9t ph\u1ea7n \u0111\u01b0\u1ee3c thay \u0111\u1ed5i. \"make\" c\u1ea7n m\u1ed9t file \u0111\u1eb7c bi\u1ec7t \u0111\u1ec3 m\u00f4 t\u1ea3 c\u00e1c b\u01b0\u1edbc \u0111\u1ec3 build ra image, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0: Makefile. Th\u00f4ng th\u01b0\u1eddng khi \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ebfn, \"make\" s\u1ebd t\u00ecm ki\u1ebfm trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i c\u00e1c t\u00ean file nh\u01b0 sau: makefile, Makefile ho\u1eb7c GNUmakefile. Trong tr\u01b0\u1eddng h\u1ee3p makefile kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1eb7t theo chu\u1ea9n tr\u00ean, khai b\u00e1o makefile v\u1edbi \"make\" b\u1eb1ng ch\u1ec9 d\u1eabn \u2013f <filename> ho\u1eb7c \u2013file=<name>. Makefile Makefile l\u00e0 t\u1eadp h\u1ee3p c\u00e1c \u0111o\u1ea1n l\u1ec7nh m\u00f4 t\u1ea3 cho \"make\" bi\u1ebft ph\u1ea3i l\u00e0m g\u00ec \u0111\u1ec3 build ch\u01b0\u01a1ng tr\u00ecnh. C\u00e1c \u0111o\u1ea1n l\u1ec7nh m\u00f4 t\u1ea3 n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Rules. Rules M\u1ed9t Rules c\u00f3 d\u1ea1ng nh\u01b0 sau target \u2026 : prerequisites \u2026 recipe \u2026 \u2026 Target: th\u00f4ng th\u01b0\u1eddng l\u00e0 \u0111\u1ea7u ra (executable ho\u1eb7c object file) c\u1ee7a make. Ngo\u00e0i ra trong make \u0111\u1ecbnh ngh\u0129a th\u00eam m\u1ed9t lo\u1ea1i target \u0111\u1eb7c bi\u1ec7t: Phony Targets. M\u1ed9t target \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a out-of-date khi: Target \u0111\u00f3 kh\u00f4ng t\u1ed3n t\u1ea1i. C\u00e1c prerequisites b\u1ecb thay \u0111\u1ed5i. Implicit Rules \u0110\u1ec3 thu\u1eadn ti\u1ec7n cho ng\u01b0\u1eddi d\u00f9ng c\u0169ng nh\u01b0 l\u00e0m \u0111\u01a1n gi\u1ea3n Makefile, \"make\" \u0111\u1ecbnh ngh\u0129a c\u00e1c Implicit Rules . Trong m\u1ed9t s\u1ed1 Rules, n\u1ebfu recipe kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a, \"make\" s\u1ebd th\u1ef1c hi\u1ec7n build theo m\u1ed9t s\u1ed1 lu\u1eadt ng\u1ea7m \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc. V\u00ed d\u1ee5 nh\u01b0 khi rule c\u00f3 d\u1ea1ng main: main.c Ho\u1eb7c \u0111\u01a1n gi\u1ea3n h\u01a1n n\u1eefa main: Trong rule tr\u00ean kh\u00f4ng m\u00f4 t\u1ea3 recipe \u0111\u1ec3 \"make\" c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh build, do \u0111\u00f3 \"make\" s\u1eed d\u1ee5ng implicit rule khi build v\u1edbi C source v\u00e0 s\u1ebd g\u1ecdi \u0111\u1ebfn: cc main.c \u2013o main Trong \u0111\u00f3 cc l\u00e0 system compiler. Variables Bi\u1ebfn (ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 g\u1ecdi l\u00e0 macro) \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong Makefile \u0111\u1ec3 \u0111\u1ea1i di\u1ec7n cho m\u1ed9t chu\u1ed7i k\u00fd t\u1ef1. Trong Makefile c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c Automatic Variables . $@: l\u00e0 target c\u1ee7a rules $<: l\u00e0 t\u00ean c\u1ee7a prerequisites $^: t\u00ean c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c prerequisites \u0111\u01b0\u1ee3c c\u00e1c nhau b\u1eb1ng d\u1ea5u c\u00e1ch tr\u1eafng.","title":"Make system in Linux"},{"location":"lnx_es/makefile/makefile/#make-system-in-linux","text":"Original Note T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 chung v\u1ec1 Makefile, trong \u0111\u00f3 nh\u1eafc \u0111\u1ebfn c\u00e1c kh\u00e1i ni\u1ec7m quan tr\u1ecdng \u0111\u1ec3 c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c c\u00e1c Makefile ph\u1ee9c t\u1ea1p.","title":"Make system in Linux"},{"location":"lnx_es/makefile/makefile/#make","text":"","title":"make"},{"location":"lnx_es/makefile/makefile/#khai-niem","text":"\"make\" l\u00e0 m\u1ed9t \"build tool\" \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1ecdi \u0111\u1ebfn c\u00e1c th\u00e0nh ph\u1ea7n trong m\u1ed9t toolchain (nh\u01b0 compiler, linker) \u0111\u1ec3 build ra executable programs t\u1eeb source code. \"make\" t\u1ef1 \u0111\u1ed9ng ph\u00e1t hi\u1ec7n \u0111\u01b0\u1ee3c ph\u1ea7n n\u00e0o c\u1ee7a source code \u0111\u01b0\u1ee3c s\u1eeda \u0111\u1ed5i \u0111\u1ec3 ti\u1ebfn h\u00e0nh build l\u1ea1i c\u1ee5c b\u1ed9 t\u1eebng b\u1ed9 ph\u1eadn \u0111\u00f3. Tr\u00e1nh \u0111\u01b0\u1ee3c tr\u01b0\u1eddng h\u1ee3p ph\u1ea3i build l\u1ea1i to\u00e0n b\u1ed9 h\u1ec7 th\u1ed1ng khi ch\u1ec9 m\u1ed9t ph\u1ea7n \u0111\u01b0\u1ee3c thay \u0111\u1ed5i. \"make\" c\u1ea7n m\u1ed9t file \u0111\u1eb7c bi\u1ec7t \u0111\u1ec3 m\u00f4 t\u1ea3 c\u00e1c b\u01b0\u1edbc \u0111\u1ec3 build ra image, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0: Makefile. Th\u00f4ng th\u01b0\u1eddng khi \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ebfn, \"make\" s\u1ebd t\u00ecm ki\u1ebfm trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i c\u00e1c t\u00ean file nh\u01b0 sau: makefile, Makefile ho\u1eb7c GNUmakefile. Trong tr\u01b0\u1eddng h\u1ee3p makefile kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1eb7t theo chu\u1ea9n tr\u00ean, khai b\u00e1o makefile v\u1edbi \"make\" b\u1eb1ng ch\u1ec9 d\u1eabn \u2013f <filename> ho\u1eb7c \u2013file=<name>.","title":"Kh\u00e1i ni\u1ec7m"},{"location":"lnx_es/makefile/makefile/#makefile","text":"Makefile l\u00e0 t\u1eadp h\u1ee3p c\u00e1c \u0111o\u1ea1n l\u1ec7nh m\u00f4 t\u1ea3 cho \"make\" bi\u1ebft ph\u1ea3i l\u00e0m g\u00ec \u0111\u1ec3 build ch\u01b0\u01a1ng tr\u00ecnh. C\u00e1c \u0111o\u1ea1n l\u1ec7nh m\u00f4 t\u1ea3 n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Rules.","title":"Makefile"},{"location":"lnx_es/makefile/makefile/#rules","text":"M\u1ed9t Rules c\u00f3 d\u1ea1ng nh\u01b0 sau target \u2026 : prerequisites \u2026 recipe \u2026 \u2026 Target: th\u00f4ng th\u01b0\u1eddng l\u00e0 \u0111\u1ea7u ra (executable ho\u1eb7c object file) c\u1ee7a make. Ngo\u00e0i ra trong make \u0111\u1ecbnh ngh\u0129a th\u00eam m\u1ed9t lo\u1ea1i target \u0111\u1eb7c bi\u1ec7t: Phony Targets. M\u1ed9t target \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a out-of-date khi: Target \u0111\u00f3 kh\u00f4ng t\u1ed3n t\u1ea1i. C\u00e1c prerequisites b\u1ecb thay \u0111\u1ed5i.","title":"Rules"},{"location":"lnx_es/makefile/makefile/#implicit-rules","text":"\u0110\u1ec3 thu\u1eadn ti\u1ec7n cho ng\u01b0\u1eddi d\u00f9ng c\u0169ng nh\u01b0 l\u00e0m \u0111\u01a1n gi\u1ea3n Makefile, \"make\" \u0111\u1ecbnh ngh\u0129a c\u00e1c Implicit Rules . Trong m\u1ed9t s\u1ed1 Rules, n\u1ebfu recipe kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a, \"make\" s\u1ebd th\u1ef1c hi\u1ec7n build theo m\u1ed9t s\u1ed1 lu\u1eadt ng\u1ea7m \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc. V\u00ed d\u1ee5 nh\u01b0 khi rule c\u00f3 d\u1ea1ng main: main.c Ho\u1eb7c \u0111\u01a1n gi\u1ea3n h\u01a1n n\u1eefa main: Trong rule tr\u00ean kh\u00f4ng m\u00f4 t\u1ea3 recipe \u0111\u1ec3 \"make\" c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh build, do \u0111\u00f3 \"make\" s\u1eed d\u1ee5ng implicit rule khi build v\u1edbi C source v\u00e0 s\u1ebd g\u1ecdi \u0111\u1ebfn: cc main.c \u2013o main Trong \u0111\u00f3 cc l\u00e0 system compiler.","title":"Implicit Rules"},{"location":"lnx_es/makefile/makefile/#variables","text":"Bi\u1ebfn (ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 g\u1ecdi l\u00e0 macro) \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong Makefile \u0111\u1ec3 \u0111\u1ea1i di\u1ec7n cho m\u1ed9t chu\u1ed7i k\u00fd t\u1ef1. Trong Makefile c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c Automatic Variables . $@: l\u00e0 target c\u1ee7a rules $<: l\u00e0 t\u00ean c\u1ee7a prerequisites $^: t\u00ean c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c prerequisites \u0111\u01b0\u1ee3c c\u00e1c nhau b\u1eb1ng d\u1ea5u c\u00e1ch tr\u1eafng.","title":"Variables"},{"location":"lnx_es/tips/tips/","text":"SSH for remote control Secure Shell (SSH) is a cryptographic network protocol for operating network services securely over an unsecured network. Typical applications include remote command-line login and remote command execution , but any network service can be secured with SSH. Advanced options Disable host key checking: ssh -o StrictHostKeyChecking=no Redirect known host file (~/.ssh/known_hosts) to /dev/null: ssh -o UserKnownHostsFile=/dev/null Execute scripts in remote machine: ssh user@host <<'ENDSSH' #commands to run on remote host ENDSSH Example ssh root@10.61.61.195 \"echo 1 > ~/test\" . This command will remote to root@10.61.61.195 machine and then execute \"echo 1 > ~/test\" Auto-generate password for ssh echo \"#!/bin/sh\" >> /tmp/genpass.sh echo \"echo $pass\" >> /tmp/genpass.sh export SSH_ASKPASS=\"/tmp/genpass.sh\" && export DISPLAY= setsid ssh root@10.61.61.195 ? setsid: what is this? See more at Bash Script SSH Automation Without a Password Prompt . Example commands timeout 20 setsid ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null References More information about SSH config can be found at https://linux.die.net/man/5/ssh_config TFTP Server Trivial File Transfer Protocol (TFTP) is a simple lockstep File Transfer Protocol which allows a client to get a file from or put a file onto a remote host ( Wiki ). TFTP uses UDP as its transport protocol. Install TFTP server With Ubuntu machine, install tftp by installing following packages: sudo apt-get install xinetd tftpd tftp Build tftp server for embedded system: How to build? Configure TFTP server Create /etc/xinetd.d/tftp and put this entry service tftp { protocol = udp port = 69 socket_type = dgram wait = yes user = nobody server = /usr/sbin/in.tftpd server_args = /tftpboot disable = no } Create a folder /tftpboot this should match whatever you gave in server_args. mostly it will be tftpboot sudo mkdir /tftpboot sudo chmod -R 777 /tftpboot sudo chown -R nobody /tftpboot Restart the xinetd service. newer systems: sudo service xinetd restart older systems: sudo /etc/init.d/xinetd restart Testing tftp server Create a file named test with some content in /tftpboot path of the tftp server. Obtain the ip address of the tftp server using ifconfig command. Now in some other system (client - which want to get file) follow the following steps. tftp 192.168.1.2 # tftp server ip tftp> get test Sent 159 bytes in 0.0 seconds tftp> quit cat test BusyBox Removable Disk Remount SD Card for clear Read-only Flag Sometimes, your SD card in someways is mounted in Read-only mode. In this case, you can not modify anything stored in these memory. To solve this problem, just re-mount its. Use sudo fdisk -l for show all disk Remount SD Card with folow command: sudo mount /dev/sdc -o remount,rw Backup SD card image Method 1: Command line Refer at: https://stackoverflow.com/questions/19355036/how-to-create-an-img-image-of-a-disc-sd-card-without-including-free-space Back up sudo dd if=/dev/mmcblk0 | gzip > /tmp/sdimage_backup.img.gz Restore cat backup.img.gz | gunzip | dd of=/dev/sdb Method 2: Disks utility in Ubuntu Using Google Drive in Ubuntu https://linuxconfig.org/google-drive-on-ubuntu-18-04-bionic-beaver-linux","title":"Tips"},{"location":"lnx_es/tips/tips/#ssh-for-remote-control","text":"Secure Shell (SSH) is a cryptographic network protocol for operating network services securely over an unsecured network. Typical applications include remote command-line login and remote command execution , but any network service can be secured with SSH. Advanced options Disable host key checking: ssh -o StrictHostKeyChecking=no Redirect known host file (~/.ssh/known_hosts) to /dev/null: ssh -o UserKnownHostsFile=/dev/null Execute scripts in remote machine: ssh user@host <<'ENDSSH' #commands to run on remote host ENDSSH Example ssh root@10.61.61.195 \"echo 1 > ~/test\" . This command will remote to root@10.61.61.195 machine and then execute \"echo 1 > ~/test\" Auto-generate password for ssh echo \"#!/bin/sh\" >> /tmp/genpass.sh echo \"echo $pass\" >> /tmp/genpass.sh export SSH_ASKPASS=\"/tmp/genpass.sh\" && export DISPLAY= setsid ssh root@10.61.61.195 ? setsid: what is this? See more at Bash Script SSH Automation Without a Password Prompt . Example commands timeout 20 setsid ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null References More information about SSH config can be found at https://linux.die.net/man/5/ssh_config","title":"SSH for remote control"},{"location":"lnx_es/tips/tips/#tftp-server","text":"Trivial File Transfer Protocol (TFTP) is a simple lockstep File Transfer Protocol which allows a client to get a file from or put a file onto a remote host ( Wiki ). TFTP uses UDP as its transport protocol. Install TFTP server With Ubuntu machine, install tftp by installing following packages: sudo apt-get install xinetd tftpd tftp Build tftp server for embedded system: How to build? Configure TFTP server Create /etc/xinetd.d/tftp and put this entry service tftp { protocol = udp port = 69 socket_type = dgram wait = yes user = nobody server = /usr/sbin/in.tftpd server_args = /tftpboot disable = no } Create a folder /tftpboot this should match whatever you gave in server_args. mostly it will be tftpboot sudo mkdir /tftpboot sudo chmod -R 777 /tftpboot sudo chown -R nobody /tftpboot Restart the xinetd service. newer systems: sudo service xinetd restart older systems: sudo /etc/init.d/xinetd restart Testing tftp server Create a file named test with some content in /tftpboot path of the tftp server. Obtain the ip address of the tftp server using ifconfig command. Now in some other system (client - which want to get file) follow the following steps. tftp 192.168.1.2 # tftp server ip tftp> get test Sent 159 bytes in 0.0 seconds tftp> quit cat test","title":"TFTP Server"},{"location":"lnx_es/tips/tips/#busybox","text":"","title":"BusyBox"},{"location":"lnx_es/tips/tips/#removable-disk","text":"Remount SD Card for clear Read-only Flag Sometimes, your SD card in someways is mounted in Read-only mode. In this case, you can not modify anything stored in these memory. To solve this problem, just re-mount its. Use sudo fdisk -l for show all disk Remount SD Card with folow command: sudo mount /dev/sdc -o remount,rw Backup SD card image Method 1: Command line Refer at: https://stackoverflow.com/questions/19355036/how-to-create-an-img-image-of-a-disc-sd-card-without-including-free-space Back up sudo dd if=/dev/mmcblk0 | gzip > /tmp/sdimage_backup.img.gz Restore cat backup.img.gz | gunzip | dd of=/dev/sdb Method 2: Disks utility in Ubuntu","title":"Removable Disk"},{"location":"lnx_es/tips/tips/#using-google-drive-in-ubuntu","text":"https://linuxconfig.org/google-drive-on-ubuntu-18-04-bionic-beaver-linux","title":"Using Google Drive in Ubuntu"},{"location":"lnx_es/version_control/git/","text":"Git Merge two Git repositories https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories Link local repo to remote git remote add origin <link_to_remote_repo> For example, git remote add origin git@github.com:vutang/test_git_repo.git All remote repo can be listed by using: git remote -v The results look like: origin git@github.com:vutang/test_git_repo.git (fetch) origin git@github.com:vutang/test_git_repo.git (push) Branches When a first commit is commited by git commit -m \"mesage\" . A master branch is created. git push origin master will push your local branch to remote. Create a new local branch: git branch <branch-name> . Switch to new branch: git checkout <branch-name> Push to remote repo: git push <remote-name> <branch-name> Pull a remote branch to local: git checkout <branch-name> Before, * master remotes/origin/HEAD -> origin/master remotes/origin/branch1 remotes/origin/master After, * branch1 master remotes/origin/HEAD -> origin/master remotes/origin/branch1 remotes/origin/master merge branches git merge <source> <dest> Commit Revert a commit in a branch: git reset --hard <commit-hash-value>","title":"Git"},{"location":"lnx_es/version_control/git/#git","text":"","title":"Git"},{"location":"lnx_es/version_control/git/#merge-two-git-repositories","text":"https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories","title":"Merge two Git repositories"},{"location":"lnx_es/version_control/git/#link-local-repo-to-remote","text":"git remote add origin <link_to_remote_repo> For example, git remote add origin git@github.com:vutang/test_git_repo.git All remote repo can be listed by using: git remote -v The results look like: origin git@github.com:vutang/test_git_repo.git (fetch) origin git@github.com:vutang/test_git_repo.git (push)","title":"Link local repo to remote"},{"location":"lnx_es/version_control/git/#branches","text":"When a first commit is commited by git commit -m \"mesage\" . A master branch is created. git push origin master will push your local branch to remote. Create a new local branch: git branch <branch-name> . Switch to new branch: git checkout <branch-name> Push to remote repo: git push <remote-name> <branch-name> Pull a remote branch to local: git checkout <branch-name> Before, * master remotes/origin/HEAD -> origin/master remotes/origin/branch1 remotes/origin/master After, * branch1 master remotes/origin/HEAD -> origin/master remotes/origin/branch1 remotes/origin/master merge branches git merge <source> <dest>","title":"Branches"},{"location":"lnx_es/version_control/git/#commit","text":"Revert a commit in a branch: git reset --hard <commit-hash-value>","title":"Commit"},{"location":"lnx_es/version_control/verctl/","text":"Version Control Information Version Control Client-Server Model In the client-server model, developers use a shared single repository. Subversion - SVN is a software versioning and revision control system distributed as open source under the Apache License. IBM Rational Team Concert Distributed Model In the distributed approach, each developer works directly with his or her own local repository, and changes are shared between repositories as a separate step. Git and Mercurcial (/m\u025c\u02d0r\u02c8kj\u028ari\u0259l/) are most popular version control tool. Web-based version control hosting services Github Gitlab Bitbucket Comparison from wiki: https://en.wikipedia.org/wiki/Comparison_of_source-code-hosting_facilities","title":"Version Control Information"},{"location":"lnx_es/version_control/verctl/#version-control-information","text":"","title":"Version Control Information"},{"location":"lnx_es/version_control/verctl/#version-control","text":"","title":"Version Control"},{"location":"lnx_es/version_control/verctl/#client-server-model","text":"In the client-server model, developers use a shared single repository. Subversion - SVN is a software versioning and revision control system distributed as open source under the Apache License. IBM Rational Team Concert","title":"Client-Server Model"},{"location":"lnx_es/version_control/verctl/#distributed-model","text":"In the distributed approach, each developer works directly with his or her own local repository, and changes are shared between repositories as a separate step. Git and Mercurcial (/m\u025c\u02d0r\u02c8kj\u028ari\u0259l/) are most popular version control tool.","title":"Distributed Model"},{"location":"lnx_es/version_control/verctl/#web-based-version-control-hosting-services","text":"Github Gitlab Bitbucket Comparison from wiki: https://en.wikipedia.org/wiki/Comparison_of_source-code-hosting_facilities","title":"Web-based version control hosting services"},{"location":"lnx_kernel/kernel_data_structure/","text":"Kernel Data Structure References [1] Linux Kernel Development, 3nd Linked List list_head: include/list.h#L24 The Linked List Structure Linked list is popular data structure that is used in programming. The Linux Kernel approach is different. Instead of turning the structure into a linked list, the Linux approach is to embed a linked list noed in the structure! The linked-list code is declared in the header file <linux/list.h> and the data structure is simple: struct list_head { struct list_head *next struct list_head *prev; }; embed in a structure: struct fox { unsigned long tail_length; /* length in centimeters of tail */ unsigned long weight; /* weight in kilograms */ bool is_fantastic; /* is this fox fantastic? */ struct list_head list; /* list of all fox structures */ }; From a pointer that points to the struct list_head in a structure, we can get pointer to this structure by using macro list_entry (see container_of() ): #define list_entry(ptr, type, member) \\ container_of(ptr, type, member) Example: struct fox red_fox, *fox_ptr; // fox_ptr is pointing to nothing struct list_head *list_ptr = &red_fox.list; // make list_ptr point to struct list inside red_fox fox_ptr = list_entry(list_ptr, struct fox, list); // fox_ptr now is pointing to red_fox Defining a Linked List There are two ways to define a linked-list: Defining listed-list with the first entry: Dynamic Allocation, struct fox *red_fox; red_fox = kmalloc(sizeof(*red_fox), GFP_KERNEL); red_fox->tail_length = 40; red_fox->weight = 6; red_fox->is_fantastic = false; INIT_LIST_HEAD(&red_fox->list); And static alocation, struct fox red_fox = { .tail_length = 40, .weight = 6, .list = LIST_HEAD_INIT(red_fox.list), }; Defining a empty linked-list: static LIST_HEAD(fox_list); The second approach is used popularly in Linux Kernel (see spi.c). Traversing Linked Lists The kernel (thank goodness) provides a nice set of interfaces for traversing linked lists and referencing the data structures that include them. The Basic Approach struct list_head *p; struct fox *f; list_for_each(p, fox_list) { /* p points to an entry (struct list_head) in the list */ f = list_entry(p, struct fox, list); // We need to use list_entry to get the \"fox\" structure } The Usable Approach struct fox *f; list_for_each_entry(f, &fox_list, list) { /* on each iteration, \u2018f\u2019 points to the next fox structure ... */ } container_of() container_of: include/linux/kerne.h#108 #define container_of(ptr, type, member) ({ \\ const typeof( ((type *)0)->member ) *__mptr = (ptr); \\ (type *)( (char *)__mptr - offsetof(type,member) );}) Assume that we have a structure: struct data { int data1; int data2; } And a pointer int *child_ptr point to data2 which is a member of struct data . int *child_ptr = &data2; We can user container_of() to get a pointer pointing to struct data . struct data *data_ptr = container_of(child_ptr, struct container, data2); Can we implement \"container_of\" in c for user space application?","title":"Kernel Data Structure"},{"location":"lnx_kernel/kernel_data_structure/#kernel-data-structure","text":"","title":"Kernel Data Structure"},{"location":"lnx_kernel/kernel_data_structure/#references","text":"[1] Linux Kernel Development, 3nd","title":"References"},{"location":"lnx_kernel/kernel_data_structure/#linked-list","text":"list_head: include/list.h#L24","title":"Linked List"},{"location":"lnx_kernel/kernel_data_structure/#the-linked-list-structure","text":"Linked list is popular data structure that is used in programming. The Linux Kernel approach is different. Instead of turning the structure into a linked list, the Linux approach is to embed a linked list noed in the structure! The linked-list code is declared in the header file <linux/list.h> and the data structure is simple: struct list_head { struct list_head *next struct list_head *prev; }; embed in a structure: struct fox { unsigned long tail_length; /* length in centimeters of tail */ unsigned long weight; /* weight in kilograms */ bool is_fantastic; /* is this fox fantastic? */ struct list_head list; /* list of all fox structures */ }; From a pointer that points to the struct list_head in a structure, we can get pointer to this structure by using macro list_entry (see container_of() ): #define list_entry(ptr, type, member) \\ container_of(ptr, type, member) Example: struct fox red_fox, *fox_ptr; // fox_ptr is pointing to nothing struct list_head *list_ptr = &red_fox.list; // make list_ptr point to struct list inside red_fox fox_ptr = list_entry(list_ptr, struct fox, list); // fox_ptr now is pointing to red_fox","title":"The Linked List Structure"},{"location":"lnx_kernel/kernel_data_structure/#defining-a-linked-list","text":"There are two ways to define a linked-list: Defining listed-list with the first entry: Dynamic Allocation, struct fox *red_fox; red_fox = kmalloc(sizeof(*red_fox), GFP_KERNEL); red_fox->tail_length = 40; red_fox->weight = 6; red_fox->is_fantastic = false; INIT_LIST_HEAD(&red_fox->list); And static alocation, struct fox red_fox = { .tail_length = 40, .weight = 6, .list = LIST_HEAD_INIT(red_fox.list), }; Defining a empty linked-list: static LIST_HEAD(fox_list); The second approach is used popularly in Linux Kernel (see spi.c).","title":"Defining a Linked List"},{"location":"lnx_kernel/kernel_data_structure/#traversing-linked-lists","text":"The kernel (thank goodness) provides a nice set of interfaces for traversing linked lists and referencing the data structures that include them. The Basic Approach struct list_head *p; struct fox *f; list_for_each(p, fox_list) { /* p points to an entry (struct list_head) in the list */ f = list_entry(p, struct fox, list); // We need to use list_entry to get the \"fox\" structure } The Usable Approach struct fox *f; list_for_each_entry(f, &fox_list, list) { /* on each iteration, \u2018f\u2019 points to the next fox structure ... */ }","title":"Traversing Linked Lists"},{"location":"lnx_kernel/kernel_data_structure/#container_of","text":"container_of: include/linux/kerne.h#108 #define container_of(ptr, type, member) ({ \\ const typeof( ((type *)0)->member ) *__mptr = (ptr); \\ (type *)( (char *)__mptr - offsetof(type,member) );}) Assume that we have a structure: struct data { int data1; int data2; } And a pointer int *child_ptr point to data2 which is a member of struct data . int *child_ptr = &data2; We can user container_of() to get a pointer pointing to struct data . struct data *data_ptr = container_of(child_ptr, struct container, data2); Can we implement \"container_of\" in c for user space application?","title":"container_of()"},{"location":"lnx_kernel/kernel_user_space/","text":"Kernel Space, User Space Interfaces http://wiki.tldp.org/kernel_user_space_howto","title":"Kernel Space, User Space Interfaces"},{"location":"lnx_kernel/kernel_user_space/#kernel-space-user-space-interfaces","text":"http://wiki.tldp.org/kernel_user_space_howto","title":"Kernel Space, User Space Interfaces"},{"location":"lnx_ldd/kernel_module/","text":"About Kernel Module Kernel Module Information Print log in Kernel module About dynamic debug: https://www.kernel.org/doc/html/v4.15/admin-guide/dynamic-debug-howto.html printk() function printk's usage is familiar with printf() in c programing. dev_* functions pr_* functions","title":"Kernel Module"},{"location":"lnx_ldd/kernel_module/#about-kernel-module","text":"","title":"About Kernel Module"},{"location":"lnx_ldd/kernel_module/#kernel-module-information","text":"","title":"Kernel Module Information"},{"location":"lnx_ldd/kernel_module/#print-log-in-kernel-module","text":"About dynamic debug: https://www.kernel.org/doc/html/v4.15/admin-guide/dynamic-debug-howto.html printk() function printk's usage is familiar with printf() in c programing. dev_* functions pr_* functions","title":"Print log in Kernel module"},{"location":"lnx_ldd/overview/","text":"Overview about Linux Device Driver T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 c\u00e1c kh\u00e1i ni\u1ec7m chung v\u1ec1 Linux Device Driver. C\u1ea7n c\u00f3 c\u00e1c b\u00e0i t\u00ecm hi\u1ec3u chuy\u00ean s\u00e2u v\u1ec1 c\u00e1c m\u1ee5c trong ph\u1ea7n n\u00e0y. Original note Linux System Overview Linux Device Model C\u00e1c thi\u1ebft b\u1ecb k\u1ebft n\u1ed1i \u0111\u1ebfn CPU \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Device . M\u1ed7i device n\u00e0y cung c\u1ea5p c\u00e1c t\u00e0i nguy\u00ean kh\u00e1c nhau \u0111\u1ebfn ng\u01b0\u1eddi d\u00f9ng, Linux kernel th\u00f4ng qua device driver \u0111\u1ec3 giao ti\u1ebfp \u0111\u1ebfn device v\u00e0 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean c\u1ee7a device \u0111\u00f3. C\u00e1c device k\u1ebft n\u1ed1i \u0111\u1ebfn CPU b\u1eb1ng m\u1ed9t bus. N\u00f3 c\u00f3 th\u1ec3 l\u00e0 c\u00e1c bus giao ti\u1ebfp v\u1edbi thi\u1ebft b\u1ecb ngo\u1ea1i vi nh\u01b0 SPI, I2C, ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 l\u00e0 system bus c\u1ee7a h\u1ec7 th\u1ed1ng. L\u01b0u \u00fd r\u1eb1ng Linux Kernel c\u0169ng nh\u00ecn bus gi\u1ed1ng nh\u01b0 m\u1ed9t device v\u00e0 t\u1ea5t nhi\u00ean device th\u00ec c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o. Do \u0111\u00f3 Linux Kernel c\u0169ng cung c\u1ea5p c\u00e1c quy tr\u00ecnh \u0111\u1ec3 \u0111\u0103ng k\u00fd m\u1ed9t bus v\u1edbi h\u1ec7 th\u1ed1ng. Trong qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng, d\u1ef1a v\u00e0o th\u00f4ng tin m\u00e0 device-tree cung c\u1ea5p v\u1ec1 c\u00e1c device trong h\u1ec7 th\u1ed1ng, Linux Kernel g\u1ecdi \u0111\u1ebfn c\u00e1c device driver t\u01b0\u01a1ng \u1ee9ng \u0111\u1ec3 d\u00f2 t\u00ecm v\u00e0 th\u00eam thi\u1ebft b\u1ecb v\u00e0o h\u1ec7 th\u1ed1ng. Platform device l\u00e0 c\u00e1c device \u0111\u1ea7u ti\u00ean \u0111\u01b0\u1ee3c d\u00f2 t\u00ecm v\u00e0 th\u00eam v\u00e0o h\u1ec7 th\u1ed1ng. \u0110\u01a1n gi\u1ea3n c\u00f3 th\u1ec3 hi\u1ec3u c\u00e1c platform device l\u00e0 c\u00e1c thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd tr\u1ef1c ti\u1ebfp trong v\u00f9ng nh\u1edb c\u1ee7a CPU, l\u00e0 c\u00e1c th\u1ef1c th\u1ec3 \u0111\u01b0\u1ee3c n\u1ed1i v\u1edbi system bus c\u1ee7a CPU. System bus n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 platform bus. Figure. An example about device model Kernel Module \u0110\u1ecbnh ngh\u0129a Kernel Module l\u00e0 m\u1ed9t \u0111o\u1ea1n m\u00e3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t ho\u1eb7c g\u1ee1 c\u00e0i \u0111\u1eb7t kh\u1ecfi Kernel theo y\u00eau c\u1ea7u. Kernel module gi\u00fap m\u1edf r\u1ed9ng ch\u1ee9c n\u0103ng cho kernel m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i kh\u1edfi \u0111\u1ed9ng l\u1ea1i h\u1ec7 th\u1ed1ng. Device Driver l\u00e0 m\u1ed9t lo\u1ea1i kernel module. Trong tr\u01b0\u1eddng h\u1ee3p c\u1ea7n th\u00eam m\u1ed9t ch\u1ee9c n\u0103ng v\u00e0o kernel trong khi kh\u00f4ng c\u00f3 kernel module, ng\u01b0\u1eddi ph\u00e1t tri\u1ec3n s\u1ebd c\u1ea7n ph\u1ea3i build l\u1ea1i c\u1ea3 h\u1ec7 th\u1ed1ng. M\u1ed9t blog vi\u1ebft v\u1ec1 Kernel Module t\u01b0\u01a1ng \u0111\u1ed1i hay v\u00e0 chi ti\u1ebft c\u00f3 th\u1ec3 xem th\u00eam t\u1ea1i \u0111\u00e2y . Blog \u0111\u01b0\u1ee3c vi\u1ebft b\u1edfi Derek Molloy. Kernel Module c\u0169ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i m\u1ed9t b\u00e0i vi\u1ebft c\u1ee7a ArchLinux (m\u1ed9t Linux Distro) t\u1ea1i \u0111\u00e2y . Ngo\u00e0i ra, tai trang web tldp.org c\u00f3 m\u1ed9t chu\u1ed7i c\u00e1c b\u00e0i vi\u1ebft li\u00ean quan \u0111\u1ebfn ph\u00e1t tri\u1ec3n Kernel module ( The Linux Kernel Module Programming Guide ). C\u00f3 hai d\u1ea1ng Kernel module: build-in v\u00e0 loadable file. Trong \u0111\u00f3 built-in module \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p v\u00e0o Kernel Image v\u00e0 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng trong qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng kernel. Ng\u01b0\u1eddi l\u1ea1i, loadable module c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng sau khi kernel \u0111\u00e3 kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng. Loadable Kernel Module (LKM) \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng b\u1eb1ng c\u00e1c c\u00e2u l\u1ec7nh nh\u01b0 modprobe ho\u1eb7c insmod. module_init & module_exit Kernel module c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh ch\u1ea1y trong Kernel Space, nh\u01b0ng kh\u00f4ng gi\u1ed1ng nh\u01b0 ch\u01b0\u01a1ng tr\u00ecnh b\u00ecnh th\u01b0\u1eddng, kernel module kh\u00f4ng b\u1eaft \u0111\u1ea7u b\u1eb1ng h\u00e0m \"main\". Macro module_init() v\u00e0 module_exit() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u0103ng k\u00fd c\u00e1c h\u00e0m kh\u1edfi t\u1ea1o v\u00e0 h\u00e0m h\u1ee7y cho kernel module. T\u00f9y thu\u1ed9c v\u00e0o kernel module l\u00e0 built-in hay LKM m\u00e0 n\u1ed9i d\u1ee5ng c\u1ee7a module_init/exit s\u1ebd kh\u00e1c nhau. Trong tr\u01b0\u1eddng h\u1ee3p l\u00e0 built-in module, module_init s\u1ebd g\u1ecdi \u0111\u1ebfn macro _init_call d\u00f9ng \u0111\u1ec3 \u0111\u0103ng k\u00fd v\u1edbi h\u1ec7 th\u1ed1ng l\u00e0 module s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o tr\u1ecdng qu\u00e1 tr\u00ecnh init. Hai macro \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/init.h. In log trong kernel Ph\u01b0\u01a1ng ph\u00e1p debug c\u01a1 b\u1ea3n v\u00e0 ph\u1ed5 bi\u1ebfn nh\u1ea5t khi \u0111i ph\u00e1t tri\u1ec3n m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 in log ch\u1ea1y c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00f3 ra m\u00e0n h\u00ecnh ho\u1eb7c file. Kernel module s\u1eed d\u1ee5ng l\u1ec7nh prink thay v\u00ec printf nh\u01b0 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng User space. Ngo\u00e0i ra c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00eam c\u00e1c h\u1ecd h\u00e0m dev_ v\u00e0 pr_ \u0111\u1ec3 in th\u00eam th\u00f4ng tin trong kernel module. C\u00e0i \u0111\u1eb7t LKM module v\u00e0o h\u1ec7 th\u1ed1ng \u0110\u1ec3 c\u00e0i \u0111\u1eb7t LKM v\u00e0o h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng l\u1ec7nh insmod/rmmod/lsmod . Ngo\u00e0i ra c\u00f3 th\u1ec3 d\u00f9ng th\u00eam modprobe. Qu\u00e1 tr\u00ecnh s\u1eed d\u1ee5ng modprobe ph\u1ee9c t\u1ea1p h\u01a1n insmod, c\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam [t\u1ea1i \u0111\u00e2y] . Trong qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t module v\u00e0o h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 th\u00eam c\u00e1c paramtters cho module. \u0110\u1ec3 li\u1ec7t k\u00ea to\u00e0n b\u1ed9 th\u00f4ng tin c\u1ee7a c\u00e1c module \u0111ang \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t trong h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng lsmod. Lsmod \u0111\u1ecdc th\u00f4ng tin t\u1eeb /proc/modules, ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 \u0111\u1ecdc tr\u1ef1c ti\u1ebfp t\u1eeb text file /proc/modules \u0111\u1ec3 bi\u1ebft th\u00eam \u0111\u01b0\u1ee3c th\u00f4ng tin c\u1ee7a c\u00e1c module \u0111ang ch\u1ea1y trong h\u1ec7 th\u1ed1ng. Khi m\u1ed9t module \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng, th\u00f4ng tin v\u1ec1 module n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y trong sysfs virtual file system /sys/module Compile a kernel module \u0110\u1ec3 build m\u1ed9t kernel module, Linux Kernel s\u1eed d\u1ee5ng m\u1ed9t h\u1ec7 th\u1ed1ng g\u1ecdi l\u00e0 kbuild. C\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam th\u00f4ng tin v\u1ec1 h\u1ec7 th\u1ed1ng kbuild n\u00e0y trong Kernel Documentation ( kbuild/modules.txt ). Trong m\u1ee5c 2.2 c\u1ee7a [1] c\u00f3 gi\u1edbi thi\u1ec7u v\u1ec1 build kernel module. Character Device Driver Device Driver l\u00e0 m\u1ed9t kernel module, c\u00f3 ch\u1ee9c n\u0103ng giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng v\u00e0 cung c\u1ea5p c\u00e1c giao di\u1ec7n \u0111\u1ec3 c\u00e1c module kh\u00e1c c\u1ee7a kernel c\u0169ng nh\u01b0 user c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean li\u00ean quan \u0111\u1ebfn c\u00e1c ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng. T\u00f9y thu\u1ed9c v\u00e0o lo\u1ea1i ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng m\u00e0 device driver \u0111\u01b0\u1ee3c chia ra l\u00e0m c\u00e1c lo\u1ea1i kh\u00e1c nhau. Trong t\u00e0i li\u1ec7u LDD3, device driver \u0111\u01b0\u1ee3c chia ra l\u00e0m 3 lo\u1ea1i ch\u00ednh: char module, block module v\u00e0 network module. Trong \u0111\u00f3 character device s\u1ebd \u0111\u01b0\u1ee3c t\u1eadp trung nghi\u00ean c\u1ee9u trong t\u00e0i li\u1ec7u n\u00e0y. Nh\u01b0 v\u1eady, m\u1ed9t device driver n\u00f3i chung c\u1ea7n th\u1ef1c hi\u1ec7n hai nhi\u1ec7m v\u1ee5 ch\u00ednh: Cung c\u1ea5p c\u00e1c giao di\u1ec7n \u0111\u1ec3 c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi User Space, qua \u0111\u00f3 c\u00e1c \u1ee9ng d\u1ee5ng c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi ph\u1ea7n c\u1ee9ng th\u00f4ng qua c\u00e1c giao di\u1ec7n n\u00e0y. Truy c\u1eadp \u0111\u1ebfn ph\u1ea7n c\u1ee9ng. Device driver \u0111\u01b0\u1ee3c sinh ra l\u00e0 \u0111\u1ec3 giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng. Trong t\u00e0i li\u1ec7u n\u00e0y s\u1ebd t\u00ecm hi\u1ec3u t\u1eebng nhi\u1ec7m v\u1ee5 tr\u00ean c\u1ee7a Device Driver. Device File Device file hay special file l\u00e0 m\u1ed9t giao di\u1ec7n \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi device driver. Th\u00f4ng th\u01b0\u1eddng c\u00e1c device file xu\u1ea5t hi\u1ec7n trong /dev/ v\u00e0 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi virtual file system. Ng\u01b0\u1eddi d\u00f9ng th\u00f4ng qua c\u00e1c System Call \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi device driver th\u00f4ng qua device file. C\u00e1c System Call li\u00ean quan \u0111\u1ebfn t\u01b0\u01a1ng t\u00e1c file \u0111\u01b0\u1ee3c x\u1eed l\u00fd b\u1edfi h\u1ec7 th\u1ed1ng VFS (Virtual File System) nh\u01b0: open(), close(), read(), write(), mmpa()... Qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c system call n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 r\u00f5 trong Chapter 12: The Virtual File System c\u1ee7a s\u00e1ch Understanding Linux Kernel. V\u1eady v\u1edbi m\u1ed9t normal file, c\u00e1c ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 t\u00e1c \u0111\u1ed9ng g\u00ec \u0111\u01b0\u1ee3c? Th\u00f4ng tin n\u00e0y c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u qua t\u1eeb kh\u00f3a \"Working with file in C\". Major & Minor M\u1ed7i Device File trong /dev/ \u0111\u01b0\u1ee3c \u0111\u1eb7c tr\u01b0ng b\u1edfi hai tham s\u1ed1: <Major, Minor> . Major \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh xem device \u0111\u00f3 t\u01b0\u01a1ng \u1ee9ng v\u1edbi driver n\u00e0o. Minor mang th\u00f4ng tin c\u1ee7a t\u1eebng thi\u1ebft b\u1ecb, v\u1ec1 c\u01a1 b\u1ea3n nhi\u1ec1u thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n b\u1eb1ng m\u1ed9t driver, do \u0111\u00f3 trong m\u1ed9t s\u1ed1 h\u1ec7 th\u1ed1ng, driver s\u1eed d\u1ee5ng Minor \u0111\u1ec3 ph\u00e2n bi\u1ec7t gi\u1eefa c\u00e1c thi\u1ebft b\u1ecb v\u1edbi nhau. Major v\u00e0 Minor t\u1ea1o th\u00e0nh m\u1ed9t c\u1eb7p s\u1ed1 unsigned \u0111\u1ec3 \u0111\u1eb7c tr\u01b0ng cho m\u1ed9t device, g\u1ecdi l\u00e0 Device Number. Kernel s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u dev_t \u0111\u1ec3 m\u00f4 t\u1ea3 hai tham s\u1ed1 n\u00e0y. Dev_t \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong header linux/types d\u01b0\u1edbi d\u1ea1ng m\u1ed9t s\u1ed1 32 bit. typedef __u32 __kernel_dev_t; typedef __kernel_dev_t dev_t; Trong \u0111\u00f3, 20 bit th\u1ea5p \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho Minor v\u00e0 c\u00e1c bit cao c\u00f2n l\u1ea1i \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho Major. C\u00e1c macro s\u1eed d\u1ee5ng cho dev_t nh\u01b0 MKDEV, MAJOR, MINOR \u0111\u01b0\u1ee3c khai b\u00e1o trong linux/k_dev_t.h . C\u00f3 th\u1ec3 t\u1ea1o m\u1ed9t Device File \u0111\u01a1n gi\u1ea3n b\u1eb1ng Command: mknod /dev/coffee c 12 2 . Khai b\u00e1o m\u1ed9t Character Device File C\u1ea5p ph\u00e1t Device Number H\u00e0m register_chrdev_region() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u0103ng k\u00fd device number. int register_chrdev_region(dev_t from, unsigned count, const char *name); Qu\u00e1 tr\u00ecnh n\u00e0y l\u00e0 c\u1ea5p ph\u00e1t t\u0129nh dev_t, trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p y\u00eau c\u1ea7u c\u1ea5p ph\u00e1t n\u00e0y kh\u00f4ng th\u00e0nh c\u00f4ng do y\u00eau c\u1ea7u c\u1ee7a driver kh\u00f4ng ph\u00f9 h\u1ee3p v\u1edbi y\u00eau c\u1ea7u hi\u1ec7n t\u1ea1i c\u1ee7a h\u1ec7 th\u1ed1ng. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng h\u00e0m alloc_chrdev_region() . Nguy\u00ean m\u1eabu c\u1ee7a h\u00e0m \u0111\u00f3 nh\u01b0 sau: int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,*const char *name); K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh c\u1ea5p ph\u00e1t device number l\u00e0 Major v\u00e0 m\u1ed9t d\u1ea3i Minor m\u00e0 driver c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng. \u0110\u0103ng k\u00fd Character Device File Kernel s\u1eed d\u1ee5ng m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u0111\u1ec3 l\u01b0u gi\u1eef th\u00f4ng tin c\u1ee7a m\u1ed9t character device: struct cdev. Struct cdev \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/cdev.h bao g\u1ed3m c\u00e1c tr\u01b0\u1eddng th\u00f4ng tin \u1edf b\u1ea3ng sau. structcdev{ struct kobject kobj; struct module *owner; const struct file_operations *ops; struct list_head list; dev_t dev; unsigned int count; } __randomize_layout; M\u1ed7i char device t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed9t device number dev_t v\u00e0 c\u00f3 c\u00e1c file_operations t\u01b0\u1edbng \u1ee9ng. C\u00e1c file_operations (\u0111\u1ecbnh ngh\u0129a trong linux/fs.h ) \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong b\u1ea3ng sau. struct file_operations { ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); int (*mmap) (struct file *, struct vm_area_struct *); long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long); [some feilds obmitted] } __randomize_layout; cdev_init & cdev_add Tr\u01b0\u1edbc khi kh\u1edfi t\u1ea1o v\u00e0 \u0111\u0103ng k\u00fd m\u1ed9t cdev v\u1edbi kernel, m\u1ed9t v\u00f9ng nh\u1edb s\u1eed d\u1ee5ng cho bi\u1ebfn cdev n\u00e0y ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o. Ph\u01b0\u01a1ng ph\u00e1p \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 khai b\u00e1o m\u1ed9t bi\u1ebfn to\u00e0n c\u1ee5c trong driver. Qu\u00e1 tr\u00ecnh cdev_init b\u1ea3n ch\u1ea5t l\u00e0 trang b\u1ecb file_openratons cho cdev v\u00e0 th\u00eam n\u00f3 v\u00e0o danh s\u00e1ch c\u00e1c thi\u1ebft b\u1ecb \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o trong h\u1ec7 th\u1ed1ng. H\u00e0m cdev_add ti\u1ebfn h\u00e0nh th\u00eam cdev v\u00e0o h\u1ec7 th\u1ed1ng. L\u01b0u \u00fd nguy\u00ean m\u1eabu h\u00e0m cdev_add nh\u01b0 sau: int cdev_add(struct cdev *p, dev_t dev, unsigned count); Trong \u0111\u00f3 con tr\u1ecf p \u0111\u01b0\u1ee3c tr\u1ecf \u0111\u1ebfn bi\u1ebfn cdev \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o, v\u00e0 dev_t dev l\u00e0 device number \u0111\u1ea7u ti\u00ean trong d\u00e3y c\u00e1c device number li\u00ean quan \u0111\u1ebfn cdev n\u00e0y, count l\u00e0 s\u1ed1 l\u01b0\u1ee3ng c\u00e1c minor number li\u00ean ti\u1ebfp sau MINOR(dev_t dev) li\u00ean quan \u0111\u1ebfn device n\u00e0y. Gi\u1ea3 s\u1eed ta ti\u1ebfn h\u00e0nh th\u00eam m\u1ed9t cdev nh\u01b0 sau: struct cdev mycdev; dev_t mydevno = MKDEV(246, 0); cdev_add(mycdev, mydevno, 4); V\u00e0 sau \u0111\u00f3 kh\u1edfi t\u1ea1o th\u00eam 4 files. mknod /dev/scull0 c 246 0 mknod /dev/scull1 c 246 1 mknod /dev/scull2 c 246 2 mknod /dev/scull3 c 246 3 Khi ti\u1ebfn h\u00e0nh \u0111\u1ecdc ghi c\u00e1c /dev/file n\u00e0y \u0111\u1ec3u tr\u1ea3 v\u1ec1 m\u1ed9t dev_t duy nh\u1ea5t <246, 0>. Mutex http://derekmolloy.ie/writing-a-linux-kernel-module-part-2-a-character-device/ MMAP https://nhauyeneducation.blogspot.com/2018/11/hieu-ve-to-chuc-bo-nho-linux-thong-qua.html?fbclid=IwAR2w4W3yttmtqbZYqcwzTQ95Qvs92ZXDdBXns9kgO7IeokpVvoc8OY3IVLo https://linux-kernel-labs.github.io/master/labs/memory_mapping.html IOCTL https://ufal.mff.cuni.cz/~jernej/2018/docs/predavanja06.pdf Ioctl - Input Output Control \u0111\u01b0\u1ee3c sinh ra \u0111\u1ec3 h\u1ed7 tr\u1ee3 ng\u01b0\u1eddi d\u00f9ng khai b\u00e1o th\u00eam c\u00e1c c\u00e2u l\u1ec7nh m\u1edbi ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng d\u00f2ng thi\u1ebft b\u1ecb. Trong v\u00ed d\u1ee5 li\u00ean quan \u0111\u1ebfn b\u00e0i \u0111\u00e0o t\u1ea1o, led_controller_core c\u00f3 hai tham s\u1ed1 c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u01b0\u1ee3c trong qu\u00e1 tr\u00ecnh ch\u1ea1y: SPEED: T\u1ed1c \u0111\u1ed9 LED. POSITION: V\u1ecb tr\u00ed LED nh\u00e1y. -> M\u1ee5c ti\u00eau c\u1ea7n ph\u1ea3i \u0111\u1ecbnh ngh\u0129a \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 c\u00e2u l\u1ec7nh \u0111\u1ec3 l\u00e0m v\u00ed d\u1ee5 trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n. Giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng Platform Device Giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng trong m\u1ed9t h\u1ec7 nh\u00fang r\u1ea5t \u0111a d\u1ea1ng. Ph\u01b0\u01a1ng ph\u00e1p giao ti\u1ebfp v\u1edbi ph\u1ea7n t\u1eed trong h\u1ec7 nh\u00fang ph\u1ee5 thu\u1ed9c v\u00e0o lo\u1ea1i thi\u1ebft b\u1ecb c\u1ee7a ph\u1ea7n t\u1eed \u0111\u00f3. Trong ph\u1ea1m vi b\u00e0i vi\u1ebft n\u00e0y s\u1ebd t\u01b0\u01a1ng t\u00e1c v\u1edbi m\u1ed9t lo\u1ea1i thi\u1ebft b\u1ecb: platform_device. struct resource platform_get_resource th\u1ef1c hi\u1ec7n t\u00ecm ki\u1ebfm t\u1ea5t c\u1ea3 c\u00e1c resource hi\u1ec7n t\u1ea1i c\u00f3 trong platform_device. Qu\u00e1 tr\u00ecnh t\u00ecm ki\u1ebfm d\u1ef1a v\u00e0o lo\u1ea1i resource \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/ioport.h. C\u00e1c lo\u1ea1i resource c\u01a1 b\u1ea3n nh\u01b0: IORESOURCE_MEM (memory) IORESOURCE_IRQ (interupt)","title":"Overview"},{"location":"lnx_ldd/overview/#overview-about-linux-device-driver","text":"T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 c\u00e1c kh\u00e1i ni\u1ec7m chung v\u1ec1 Linux Device Driver. C\u1ea7n c\u00f3 c\u00e1c b\u00e0i t\u00ecm hi\u1ec3u chuy\u00ean s\u00e2u v\u1ec1 c\u00e1c m\u1ee5c trong ph\u1ea7n n\u00e0y. Original note","title":"Overview about Linux Device Driver"},{"location":"lnx_ldd/overview/#linux-system-overview","text":"","title":"Linux System Overview"},{"location":"lnx_ldd/overview/#linux-device-model","text":"C\u00e1c thi\u1ebft b\u1ecb k\u1ebft n\u1ed1i \u0111\u1ebfn CPU \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Device . M\u1ed7i device n\u00e0y cung c\u1ea5p c\u00e1c t\u00e0i nguy\u00ean kh\u00e1c nhau \u0111\u1ebfn ng\u01b0\u1eddi d\u00f9ng, Linux kernel th\u00f4ng qua device driver \u0111\u1ec3 giao ti\u1ebfp \u0111\u1ebfn device v\u00e0 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean c\u1ee7a device \u0111\u00f3. C\u00e1c device k\u1ebft n\u1ed1i \u0111\u1ebfn CPU b\u1eb1ng m\u1ed9t bus. N\u00f3 c\u00f3 th\u1ec3 l\u00e0 c\u00e1c bus giao ti\u1ebfp v\u1edbi thi\u1ebft b\u1ecb ngo\u1ea1i vi nh\u01b0 SPI, I2C, ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 l\u00e0 system bus c\u1ee7a h\u1ec7 th\u1ed1ng. L\u01b0u \u00fd r\u1eb1ng Linux Kernel c\u0169ng nh\u00ecn bus gi\u1ed1ng nh\u01b0 m\u1ed9t device v\u00e0 t\u1ea5t nhi\u00ean device th\u00ec c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o. Do \u0111\u00f3 Linux Kernel c\u0169ng cung c\u1ea5p c\u00e1c quy tr\u00ecnh \u0111\u1ec3 \u0111\u0103ng k\u00fd m\u1ed9t bus v\u1edbi h\u1ec7 th\u1ed1ng. Trong qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng, d\u1ef1a v\u00e0o th\u00f4ng tin m\u00e0 device-tree cung c\u1ea5p v\u1ec1 c\u00e1c device trong h\u1ec7 th\u1ed1ng, Linux Kernel g\u1ecdi \u0111\u1ebfn c\u00e1c device driver t\u01b0\u01a1ng \u1ee9ng \u0111\u1ec3 d\u00f2 t\u00ecm v\u00e0 th\u00eam thi\u1ebft b\u1ecb v\u00e0o h\u1ec7 th\u1ed1ng. Platform device l\u00e0 c\u00e1c device \u0111\u1ea7u ti\u00ean \u0111\u01b0\u1ee3c d\u00f2 t\u00ecm v\u00e0 th\u00eam v\u00e0o h\u1ec7 th\u1ed1ng. \u0110\u01a1n gi\u1ea3n c\u00f3 th\u1ec3 hi\u1ec3u c\u00e1c platform device l\u00e0 c\u00e1c thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd tr\u1ef1c ti\u1ebfp trong v\u00f9ng nh\u1edb c\u1ee7a CPU, l\u00e0 c\u00e1c th\u1ef1c th\u1ec3 \u0111\u01b0\u1ee3c n\u1ed1i v\u1edbi system bus c\u1ee7a CPU. System bus n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 platform bus. Figure. An example about device model","title":"Linux Device Model"},{"location":"lnx_ldd/overview/#kernel-module","text":"","title":"Kernel Module"},{"location":"lnx_ldd/overview/#inh-nghia","text":"Kernel Module l\u00e0 m\u1ed9t \u0111o\u1ea1n m\u00e3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t ho\u1eb7c g\u1ee1 c\u00e0i \u0111\u1eb7t kh\u1ecfi Kernel theo y\u00eau c\u1ea7u. Kernel module gi\u00fap m\u1edf r\u1ed9ng ch\u1ee9c n\u0103ng cho kernel m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i kh\u1edfi \u0111\u1ed9ng l\u1ea1i h\u1ec7 th\u1ed1ng. Device Driver l\u00e0 m\u1ed9t lo\u1ea1i kernel module. Trong tr\u01b0\u1eddng h\u1ee3p c\u1ea7n th\u00eam m\u1ed9t ch\u1ee9c n\u0103ng v\u00e0o kernel trong khi kh\u00f4ng c\u00f3 kernel module, ng\u01b0\u1eddi ph\u00e1t tri\u1ec3n s\u1ebd c\u1ea7n ph\u1ea3i build l\u1ea1i c\u1ea3 h\u1ec7 th\u1ed1ng. M\u1ed9t blog vi\u1ebft v\u1ec1 Kernel Module t\u01b0\u01a1ng \u0111\u1ed1i hay v\u00e0 chi ti\u1ebft c\u00f3 th\u1ec3 xem th\u00eam t\u1ea1i \u0111\u00e2y . Blog \u0111\u01b0\u1ee3c vi\u1ebft b\u1edfi Derek Molloy. Kernel Module c\u0169ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i m\u1ed9t b\u00e0i vi\u1ebft c\u1ee7a ArchLinux (m\u1ed9t Linux Distro) t\u1ea1i \u0111\u00e2y . Ngo\u00e0i ra, tai trang web tldp.org c\u00f3 m\u1ed9t chu\u1ed7i c\u00e1c b\u00e0i vi\u1ebft li\u00ean quan \u0111\u1ebfn ph\u00e1t tri\u1ec3n Kernel module ( The Linux Kernel Module Programming Guide ). C\u00f3 hai d\u1ea1ng Kernel module: build-in v\u00e0 loadable file. Trong \u0111\u00f3 built-in module \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p v\u00e0o Kernel Image v\u00e0 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng trong qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng kernel. Ng\u01b0\u1eddi l\u1ea1i, loadable module c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng sau khi kernel \u0111\u00e3 kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng. Loadable Kernel Module (LKM) \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng b\u1eb1ng c\u00e1c c\u00e2u l\u1ec7nh nh\u01b0 modprobe ho\u1eb7c insmod.","title":"\u0110\u1ecbnh ngh\u0129a"},{"location":"lnx_ldd/overview/#module_init-module_exit","text":"Kernel module c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh ch\u1ea1y trong Kernel Space, nh\u01b0ng kh\u00f4ng gi\u1ed1ng nh\u01b0 ch\u01b0\u01a1ng tr\u00ecnh b\u00ecnh th\u01b0\u1eddng, kernel module kh\u00f4ng b\u1eaft \u0111\u1ea7u b\u1eb1ng h\u00e0m \"main\". Macro module_init() v\u00e0 module_exit() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u0103ng k\u00fd c\u00e1c h\u00e0m kh\u1edfi t\u1ea1o v\u00e0 h\u00e0m h\u1ee7y cho kernel module. T\u00f9y thu\u1ed9c v\u00e0o kernel module l\u00e0 built-in hay LKM m\u00e0 n\u1ed9i d\u1ee5ng c\u1ee7a module_init/exit s\u1ebd kh\u00e1c nhau. Trong tr\u01b0\u1eddng h\u1ee3p l\u00e0 built-in module, module_init s\u1ebd g\u1ecdi \u0111\u1ebfn macro _init_call d\u00f9ng \u0111\u1ec3 \u0111\u0103ng k\u00fd v\u1edbi h\u1ec7 th\u1ed1ng l\u00e0 module s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o tr\u1ecdng qu\u00e1 tr\u00ecnh init. Hai macro \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/init.h.","title":"module_init &amp; module_exit"},{"location":"lnx_ldd/overview/#in-log-trong-kernel","text":"Ph\u01b0\u01a1ng ph\u00e1p debug c\u01a1 b\u1ea3n v\u00e0 ph\u1ed5 bi\u1ebfn nh\u1ea5t khi \u0111i ph\u00e1t tri\u1ec3n m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 in log ch\u1ea1y c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00f3 ra m\u00e0n h\u00ecnh ho\u1eb7c file. Kernel module s\u1eed d\u1ee5ng l\u1ec7nh prink thay v\u00ec printf nh\u01b0 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng User space. Ngo\u00e0i ra c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00eam c\u00e1c h\u1ecd h\u00e0m dev_ v\u00e0 pr_ \u0111\u1ec3 in th\u00eam th\u00f4ng tin trong kernel module.","title":"In log trong kernel"},{"location":"lnx_ldd/overview/#cai-at-lkm-module-vao-he-thong","text":"\u0110\u1ec3 c\u00e0i \u0111\u1eb7t LKM v\u00e0o h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng l\u1ec7nh insmod/rmmod/lsmod . Ngo\u00e0i ra c\u00f3 th\u1ec3 d\u00f9ng th\u00eam modprobe. Qu\u00e1 tr\u00ecnh s\u1eed d\u1ee5ng modprobe ph\u1ee9c t\u1ea1p h\u01a1n insmod, c\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam [t\u1ea1i \u0111\u00e2y] . Trong qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t module v\u00e0o h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 th\u00eam c\u00e1c paramtters cho module. \u0110\u1ec3 li\u1ec7t k\u00ea to\u00e0n b\u1ed9 th\u00f4ng tin c\u1ee7a c\u00e1c module \u0111ang \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t trong h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng lsmod. Lsmod \u0111\u1ecdc th\u00f4ng tin t\u1eeb /proc/modules, ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 \u0111\u1ecdc tr\u1ef1c ti\u1ebfp t\u1eeb text file /proc/modules \u0111\u1ec3 bi\u1ebft th\u00eam \u0111\u01b0\u1ee3c th\u00f4ng tin c\u1ee7a c\u00e1c module \u0111ang ch\u1ea1y trong h\u1ec7 th\u1ed1ng. Khi m\u1ed9t module \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng, th\u00f4ng tin v\u1ec1 module n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y trong sysfs virtual file system /sys/module","title":"C\u00e0i \u0111\u1eb7t LKM module v\u00e0o h\u1ec7 th\u1ed1ng"},{"location":"lnx_ldd/overview/#compile-a-kernel-module","text":"\u0110\u1ec3 build m\u1ed9t kernel module, Linux Kernel s\u1eed d\u1ee5ng m\u1ed9t h\u1ec7 th\u1ed1ng g\u1ecdi l\u00e0 kbuild. C\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam th\u00f4ng tin v\u1ec1 h\u1ec7 th\u1ed1ng kbuild n\u00e0y trong Kernel Documentation ( kbuild/modules.txt ). Trong m\u1ee5c 2.2 c\u1ee7a [1] c\u00f3 gi\u1edbi thi\u1ec7u v\u1ec1 build kernel module.","title":"Compile a kernel module"},{"location":"lnx_ldd/overview/#character-device-driver","text":"Device Driver l\u00e0 m\u1ed9t kernel module, c\u00f3 ch\u1ee9c n\u0103ng giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng v\u00e0 cung c\u1ea5p c\u00e1c giao di\u1ec7n \u0111\u1ec3 c\u00e1c module kh\u00e1c c\u1ee7a kernel c\u0169ng nh\u01b0 user c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean li\u00ean quan \u0111\u1ebfn c\u00e1c ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng. T\u00f9y thu\u1ed9c v\u00e0o lo\u1ea1i ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng m\u00e0 device driver \u0111\u01b0\u1ee3c chia ra l\u00e0m c\u00e1c lo\u1ea1i kh\u00e1c nhau. Trong t\u00e0i li\u1ec7u LDD3, device driver \u0111\u01b0\u1ee3c chia ra l\u00e0m 3 lo\u1ea1i ch\u00ednh: char module, block module v\u00e0 network module. Trong \u0111\u00f3 character device s\u1ebd \u0111\u01b0\u1ee3c t\u1eadp trung nghi\u00ean c\u1ee9u trong t\u00e0i li\u1ec7u n\u00e0y. Nh\u01b0 v\u1eady, m\u1ed9t device driver n\u00f3i chung c\u1ea7n th\u1ef1c hi\u1ec7n hai nhi\u1ec7m v\u1ee5 ch\u00ednh: Cung c\u1ea5p c\u00e1c giao di\u1ec7n \u0111\u1ec3 c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi User Space, qua \u0111\u00f3 c\u00e1c \u1ee9ng d\u1ee5ng c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi ph\u1ea7n c\u1ee9ng th\u00f4ng qua c\u00e1c giao di\u1ec7n n\u00e0y. Truy c\u1eadp \u0111\u1ebfn ph\u1ea7n c\u1ee9ng. Device driver \u0111\u01b0\u1ee3c sinh ra l\u00e0 \u0111\u1ec3 giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng. Trong t\u00e0i li\u1ec7u n\u00e0y s\u1ebd t\u00ecm hi\u1ec3u t\u1eebng nhi\u1ec7m v\u1ee5 tr\u00ean c\u1ee7a Device Driver.","title":"Character Device Driver"},{"location":"lnx_ldd/overview/#device-file","text":"Device file hay special file l\u00e0 m\u1ed9t giao di\u1ec7n \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi device driver. Th\u00f4ng th\u01b0\u1eddng c\u00e1c device file xu\u1ea5t hi\u1ec7n trong /dev/ v\u00e0 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi virtual file system. Ng\u01b0\u1eddi d\u00f9ng th\u00f4ng qua c\u00e1c System Call \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi device driver th\u00f4ng qua device file. C\u00e1c System Call li\u00ean quan \u0111\u1ebfn t\u01b0\u01a1ng t\u00e1c file \u0111\u01b0\u1ee3c x\u1eed l\u00fd b\u1edfi h\u1ec7 th\u1ed1ng VFS (Virtual File System) nh\u01b0: open(), close(), read(), write(), mmpa()... Qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c system call n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 r\u00f5 trong Chapter 12: The Virtual File System c\u1ee7a s\u00e1ch Understanding Linux Kernel. V\u1eady v\u1edbi m\u1ed9t normal file, c\u00e1c ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 t\u00e1c \u0111\u1ed9ng g\u00ec \u0111\u01b0\u1ee3c? Th\u00f4ng tin n\u00e0y c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u qua t\u1eeb kh\u00f3a \"Working with file in C\".","title":"Device File"},{"location":"lnx_ldd/overview/#major-minor","text":"M\u1ed7i Device File trong /dev/ \u0111\u01b0\u1ee3c \u0111\u1eb7c tr\u01b0ng b\u1edfi hai tham s\u1ed1: <Major, Minor> . Major \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh xem device \u0111\u00f3 t\u01b0\u01a1ng \u1ee9ng v\u1edbi driver n\u00e0o. Minor mang th\u00f4ng tin c\u1ee7a t\u1eebng thi\u1ebft b\u1ecb, v\u1ec1 c\u01a1 b\u1ea3n nhi\u1ec1u thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n b\u1eb1ng m\u1ed9t driver, do \u0111\u00f3 trong m\u1ed9t s\u1ed1 h\u1ec7 th\u1ed1ng, driver s\u1eed d\u1ee5ng Minor \u0111\u1ec3 ph\u00e2n bi\u1ec7t gi\u1eefa c\u00e1c thi\u1ebft b\u1ecb v\u1edbi nhau. Major v\u00e0 Minor t\u1ea1o th\u00e0nh m\u1ed9t c\u1eb7p s\u1ed1 unsigned \u0111\u1ec3 \u0111\u1eb7c tr\u01b0ng cho m\u1ed9t device, g\u1ecdi l\u00e0 Device Number. Kernel s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u dev_t \u0111\u1ec3 m\u00f4 t\u1ea3 hai tham s\u1ed1 n\u00e0y. Dev_t \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong header linux/types d\u01b0\u1edbi d\u1ea1ng m\u1ed9t s\u1ed1 32 bit. typedef __u32 __kernel_dev_t; typedef __kernel_dev_t dev_t; Trong \u0111\u00f3, 20 bit th\u1ea5p \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho Minor v\u00e0 c\u00e1c bit cao c\u00f2n l\u1ea1i \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho Major. C\u00e1c macro s\u1eed d\u1ee5ng cho dev_t nh\u01b0 MKDEV, MAJOR, MINOR \u0111\u01b0\u1ee3c khai b\u00e1o trong linux/k_dev_t.h . C\u00f3 th\u1ec3 t\u1ea1o m\u1ed9t Device File \u0111\u01a1n gi\u1ea3n b\u1eb1ng Command: mknod /dev/coffee c 12 2 .","title":"Major &amp; Minor"},{"location":"lnx_ldd/overview/#khai-bao-mot-character-device-file","text":"","title":"Khai b\u00e1o m\u1ed9t Character Device File"},{"location":"lnx_ldd/overview/#cap-phat-device-number","text":"H\u00e0m register_chrdev_region() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u0103ng k\u00fd device number. int register_chrdev_region(dev_t from, unsigned count, const char *name); Qu\u00e1 tr\u00ecnh n\u00e0y l\u00e0 c\u1ea5p ph\u00e1t t\u0129nh dev_t, trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p y\u00eau c\u1ea7u c\u1ea5p ph\u00e1t n\u00e0y kh\u00f4ng th\u00e0nh c\u00f4ng do y\u00eau c\u1ea7u c\u1ee7a driver kh\u00f4ng ph\u00f9 h\u1ee3p v\u1edbi y\u00eau c\u1ea7u hi\u1ec7n t\u1ea1i c\u1ee7a h\u1ec7 th\u1ed1ng. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng h\u00e0m alloc_chrdev_region() . Nguy\u00ean m\u1eabu c\u1ee7a h\u00e0m \u0111\u00f3 nh\u01b0 sau: int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,*const char *name); K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh c\u1ea5p ph\u00e1t device number l\u00e0 Major v\u00e0 m\u1ed9t d\u1ea3i Minor m\u00e0 driver c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng.","title":"C\u1ea5p ph\u00e1t Device Number"},{"location":"lnx_ldd/overview/#ang-ky-character-device-file","text":"Kernel s\u1eed d\u1ee5ng m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u0111\u1ec3 l\u01b0u gi\u1eef th\u00f4ng tin c\u1ee7a m\u1ed9t character device: struct cdev. Struct cdev \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/cdev.h bao g\u1ed3m c\u00e1c tr\u01b0\u1eddng th\u00f4ng tin \u1edf b\u1ea3ng sau. structcdev{ struct kobject kobj; struct module *owner; const struct file_operations *ops; struct list_head list; dev_t dev; unsigned int count; } __randomize_layout; M\u1ed7i char device t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed9t device number dev_t v\u00e0 c\u00f3 c\u00e1c file_operations t\u01b0\u1edbng \u1ee9ng. C\u00e1c file_operations (\u0111\u1ecbnh ngh\u0129a trong linux/fs.h ) \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong b\u1ea3ng sau. struct file_operations { ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); int (*mmap) (struct file *, struct vm_area_struct *); long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long); [some feilds obmitted] } __randomize_layout;","title":"\u0110\u0103ng k\u00fd Character Device File"},{"location":"lnx_ldd/overview/#cdev_init-cdev_add","text":"Tr\u01b0\u1edbc khi kh\u1edfi t\u1ea1o v\u00e0 \u0111\u0103ng k\u00fd m\u1ed9t cdev v\u1edbi kernel, m\u1ed9t v\u00f9ng nh\u1edb s\u1eed d\u1ee5ng cho bi\u1ebfn cdev n\u00e0y ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o. Ph\u01b0\u01a1ng ph\u00e1p \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 khai b\u00e1o m\u1ed9t bi\u1ebfn to\u00e0n c\u1ee5c trong driver. Qu\u00e1 tr\u00ecnh cdev_init b\u1ea3n ch\u1ea5t l\u00e0 trang b\u1ecb file_openratons cho cdev v\u00e0 th\u00eam n\u00f3 v\u00e0o danh s\u00e1ch c\u00e1c thi\u1ebft b\u1ecb \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o trong h\u1ec7 th\u1ed1ng. H\u00e0m cdev_add ti\u1ebfn h\u00e0nh th\u00eam cdev v\u00e0o h\u1ec7 th\u1ed1ng. L\u01b0u \u00fd nguy\u00ean m\u1eabu h\u00e0m cdev_add nh\u01b0 sau: int cdev_add(struct cdev *p, dev_t dev, unsigned count); Trong \u0111\u00f3 con tr\u1ecf p \u0111\u01b0\u1ee3c tr\u1ecf \u0111\u1ebfn bi\u1ebfn cdev \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o, v\u00e0 dev_t dev l\u00e0 device number \u0111\u1ea7u ti\u00ean trong d\u00e3y c\u00e1c device number li\u00ean quan \u0111\u1ebfn cdev n\u00e0y, count l\u00e0 s\u1ed1 l\u01b0\u1ee3ng c\u00e1c minor number li\u00ean ti\u1ebfp sau MINOR(dev_t dev) li\u00ean quan \u0111\u1ebfn device n\u00e0y. Gi\u1ea3 s\u1eed ta ti\u1ebfn h\u00e0nh th\u00eam m\u1ed9t cdev nh\u01b0 sau: struct cdev mycdev; dev_t mydevno = MKDEV(246, 0); cdev_add(mycdev, mydevno, 4); V\u00e0 sau \u0111\u00f3 kh\u1edfi t\u1ea1o th\u00eam 4 files. mknod /dev/scull0 c 246 0 mknod /dev/scull1 c 246 1 mknod /dev/scull2 c 246 2 mknod /dev/scull3 c 246 3 Khi ti\u1ebfn h\u00e0nh \u0111\u1ecdc ghi c\u00e1c /dev/file n\u00e0y \u0111\u1ec3u tr\u1ea3 v\u1ec1 m\u1ed9t dev_t duy nh\u1ea5t <246, 0>.","title":"cdev_init &amp; cdev_add"},{"location":"lnx_ldd/overview/#mutex","text":"http://derekmolloy.ie/writing-a-linux-kernel-module-part-2-a-character-device/","title":"Mutex"},{"location":"lnx_ldd/overview/#mmap","text":"https://nhauyeneducation.blogspot.com/2018/11/hieu-ve-to-chuc-bo-nho-linux-thong-qua.html?fbclid=IwAR2w4W3yttmtqbZYqcwzTQ95Qvs92ZXDdBXns9kgO7IeokpVvoc8OY3IVLo https://linux-kernel-labs.github.io/master/labs/memory_mapping.html","title":"MMAP"},{"location":"lnx_ldd/overview/#ioctl","text":"https://ufal.mff.cuni.cz/~jernej/2018/docs/predavanja06.pdf Ioctl - Input Output Control \u0111\u01b0\u1ee3c sinh ra \u0111\u1ec3 h\u1ed7 tr\u1ee3 ng\u01b0\u1eddi d\u00f9ng khai b\u00e1o th\u00eam c\u00e1c c\u00e2u l\u1ec7nh m\u1edbi ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng d\u00f2ng thi\u1ebft b\u1ecb. Trong v\u00ed d\u1ee5 li\u00ean quan \u0111\u1ebfn b\u00e0i \u0111\u00e0o t\u1ea1o, led_controller_core c\u00f3 hai tham s\u1ed1 c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u01b0\u1ee3c trong qu\u00e1 tr\u00ecnh ch\u1ea1y: SPEED: T\u1ed1c \u0111\u1ed9 LED. POSITION: V\u1ecb tr\u00ed LED nh\u00e1y. -> M\u1ee5c ti\u00eau c\u1ea7n ph\u1ea3i \u0111\u1ecbnh ngh\u0129a \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 c\u00e2u l\u1ec7nh \u0111\u1ec3 l\u00e0m v\u00ed d\u1ee5 trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n.","title":"IOCTL"},{"location":"lnx_ldd/overview/#giao-tiep-voi-phan-cung","text":"","title":"Giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng"},{"location":"lnx_ldd/overview/#platform-device","text":"Giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng trong m\u1ed9t h\u1ec7 nh\u00fang r\u1ea5t \u0111a d\u1ea1ng. Ph\u01b0\u01a1ng ph\u00e1p giao ti\u1ebfp v\u1edbi ph\u1ea7n t\u1eed trong h\u1ec7 nh\u00fang ph\u1ee5 thu\u1ed9c v\u00e0o lo\u1ea1i thi\u1ebft b\u1ecb c\u1ee7a ph\u1ea7n t\u1eed \u0111\u00f3. Trong ph\u1ea1m vi b\u00e0i vi\u1ebft n\u00e0y s\u1ebd t\u01b0\u01a1ng t\u00e1c v\u1edbi m\u1ed9t lo\u1ea1i thi\u1ebft b\u1ecb: platform_device.","title":"Platform Device"},{"location":"lnx_ldd/overview/#struct-resource","text":"platform_get_resource th\u1ef1c hi\u1ec7n t\u00ecm ki\u1ebfm t\u1ea5t c\u1ea3 c\u00e1c resource hi\u1ec7n t\u1ea1i c\u00f3 trong platform_device. Qu\u00e1 tr\u00ecnh t\u00ecm ki\u1ebfm d\u1ef1a v\u00e0o lo\u1ea1i resource \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/ioport.h. C\u00e1c lo\u1ea1i resource c\u01a1 b\u1ea3n nh\u01b0: IORESOURCE_MEM (memory) IORESOURCE_IRQ (interupt)","title":"struct resource"},{"location":"lnx_ldd/audio/linux_audio/","text":"Audio in Linux ALSA Advanced Linux Sound Architecture (ALSA) is a software framework and part of the Linux kernel that provides an application programming interface (API) for sound card device drivers. The project to develop ALSA was led by Jaroslav Kysela, and it started in 1998 and was developed separately from the Linux kernel until it was introduced in the 2.5 development series in 2002. In the 2.6 version, ALSA replaced the previous system, Open Sound System (OSS) , by default (although a backwards-compatibility layer does exist). Figure. A block diagram for ALSA in Linux ALSA concept *TBD ASoC The ASoC (ALSA System on Chip) layer aims to provide better support for ALSA on embedded systems that use a system-on-chip (SoC) design. The codec class driver is platform independent and contains audio controls, audio interface capabilities, codec DAPM definition and codec IO functions. The platform class driver includes the audio DMA engine driver, digital audio interface (DAI) drivers (e.g. I2S, AC97, PCM) and any audio DSP drivers for that platform. The machine driver class acts as the glue that describes and binds the other component drivers together to form an ALSA \"sound card device\". It handles any machine specific controls and machine level audio events (e.g. turning on an amp at start of playback). ALSA SoC Layer in Kernel Document . For example with iMX8MQ and wm8960 Codec. wm8960.c is ASoC Codec Class driver : register a soc dai driver by calling: snd_soc_register_codec . This DAI driver provides two streams: playback & capture. It also provides DAI operation such as mute, free... define mixers and audio paths by calling SOC_* macro. imx-wm8960.c is ASoC Platform Driver . ALSA Application arecord & aplay arecord -t raw -f S16_LE -c 1 output.raw output.raw can be played by using aplay aplay -f S16_LE output.raw or extracted by a simple C program. #include <stdio.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> int main() { int16_t buf; int fd = open(\"./input\", O_RDWR); if (fd < 0) { printf(\"open file fail\\n\"); return 1; } while (read(fd, &buf, 2) > 0) printf(\"%d\\n\", buf); close(fd); return 0; } Raw data DAPM - Dynamic Audio Power Management Modern sound cards consist of many independent discrete components and each component has functional units that can be powered independently. Figure. Anatomy of a modern sound card (Lars-Peter Clausen \u2013 Analog Devices) What is DAPM? DAPM is model data flow and power dependencies in a directed graph. Each node in graph represents a functional unit (called widget ). Route or Path represent connections between functional units. Eache widget (node) has a type and this type defines how the widget behaves in the graph. E.g. Speaker, Microphone, Amplifier, DAC, ADC, internal supply, external supply, headphone output, line-in input, line-out output, audio interface, audio interface link, mixer, mux, input pin, output pin ... How DAPM works? DAPM operation has two phases: Phase 1: Determine target power state Phase 2: Power sequencing In phase 1, finding out the power state DAPM differentiates between three different categories of widgets: Enpoint widgets, Pass-through widgets, Supply widgets. Power state of eache widget in graph is determined. After Phase 1, target power state is determined. Widgets in graph is powered. Power-down all newly disabled widgets Perform routing changes (if any) Power-up all newly enabled widgets Case Study - WM8960 Macro for defining widgets can be found at /include/sound/soc-dapm.h . DAPM widgets in wm8960.c fall into a number of types: Stream Domain Widgets: ADCs (analog to digital converters), DACs (digital to analog converters). SND_SOC_DAPM_ADC(\"Left ADC\", \"Capture\", WM8960_POWER1, 3, 0), SND_SOC_DAPM_ADC(\"Right ADC\", \"Capture\", WM8960_POWER1, 2, 0), SND_SOC_DAPM_DAC(\"Left DAC\", \"Playback\", WM8960_POWER2, 8, 0), SND_SOC_DAPM_DAC(\"Right DAC\", \"Playback\", WM8960_POWER2, 7, 0), Path Domain Widgets: Path domain widgets have a ability to control or affect the audio signal or audio paths within the audio subsystem SOC_DAPM_SINGLE(\"Left Switch\", WM8960_MONOMIX1, 7, 1, 0), SOC_DAPM_SINGLE(\"Right Switch\", WM8960_MONOMIX2, 7, 1, 0), Machine Widgets appears in imx-wm8960.c . A machine widget is assigned to each machine audio component (non codec or DSP) that can be independently powered. e.g Microphone Bias, Jack Connectors. In iMX8-MQ, machine widget and codec widget interconnections are defined in device tree: audio-routing = \"Headphone Jack\", \"HP_L\", \"Headphone Jack\", \"HP_R\", \"Ext Spk\", \"SPK_LP\", \"Ext Spk\", \"SPK_LN\", \"LINPUT1\", \"Main MIC\", \"LINPUT2\", \"Main MIC\", \"RINPUT1\", \"Mic Jack\", \"Mic Jack\", \"MICB\", \"Main MIC\", \"MICB\", \"Playback\", \"CPU-Playback\", \"CPU-Capture\", \"Capture\"; Headphone Jack, Ext Spk, Main MIC, Mic Jack are machine widgets. Physical interface definitions I2S - Inter IC Sound What is I2S? and What is I2S used for? I2S - Inter IC Sound is an electrical serial bus interface standard used for connecting digital audio devices together. This standard was introduced in 1986 by Philips Semiconductor (now NXP Semiconductors ) and was last revised on June 5, 1996. What is I2S made from? Figure. I2S Bus Timing from I2S standard by Philips Seminconductors The bus consists of at least three lines: Bit clock line: Officially \"continuous serial clock (SCK)\".[1] Typically written \"bit clock (BCLK)\".[2] Word clock line: Officially \"word select (WS)\".[1] Typically called \"left-right clock (LRCLK)\"[2] or \"frame sync (FS)\". 0 = Left channel 1 = Right channel At least one multiplexed data line Officially \"serial data (SD)\",[1] but can be called SDATA, SDIN, SDOUT, DACDAT, ADCDAT, etc.[2] What kind of data is transfered in I2S? Digital Audio Data e.g. PCM SAI - Synchronous Audio Interface Synchronous Audio Interface or Serial Audio Interface ? It is quite hard to find definition for SAI in Internet. So, it will be defined by using an example from NPX IMX SoC. In IMX8M, NXP integrates an audio module called SAI/I2S. This module which is platform device (has its own address in CPU memory map) will receive audio data from external CODEC and transfer these data to CPU. It supports I2S bus standard. DAI - Digital Audio Interfaces ASoC currently supports the three main Digital Audio Interfaces (DAI) found on SoC controllers and portable audio CODECs today, namely AC97, I2S and PCM (PCM means a kind of bus, not a type of digital audio data). References [1] DAPM - Analog Device - Lars-Petter Clausen.","title":"Audio"},{"location":"lnx_ldd/audio/linux_audio/#audio-in-linux","text":"","title":"Audio in Linux"},{"location":"lnx_ldd/audio/linux_audio/#alsa","text":"Advanced Linux Sound Architecture (ALSA) is a software framework and part of the Linux kernel that provides an application programming interface (API) for sound card device drivers. The project to develop ALSA was led by Jaroslav Kysela, and it started in 1998 and was developed separately from the Linux kernel until it was introduced in the 2.5 development series in 2002. In the 2.6 version, ALSA replaced the previous system, Open Sound System (OSS) , by default (although a backwards-compatibility layer does exist). Figure. A block diagram for ALSA in Linux","title":"ALSA"},{"location":"lnx_ldd/audio/linux_audio/#alsa-concept","text":"*TBD","title":"ALSA concept"},{"location":"lnx_ldd/audio/linux_audio/#asoc","text":"The ASoC (ALSA System on Chip) layer aims to provide better support for ALSA on embedded systems that use a system-on-chip (SoC) design. The codec class driver is platform independent and contains audio controls, audio interface capabilities, codec DAPM definition and codec IO functions. The platform class driver includes the audio DMA engine driver, digital audio interface (DAI) drivers (e.g. I2S, AC97, PCM) and any audio DSP drivers for that platform. The machine driver class acts as the glue that describes and binds the other component drivers together to form an ALSA \"sound card device\". It handles any machine specific controls and machine level audio events (e.g. turning on an amp at start of playback). ALSA SoC Layer in Kernel Document . For example with iMX8MQ and wm8960 Codec. wm8960.c is ASoC Codec Class driver : register a soc dai driver by calling: snd_soc_register_codec . This DAI driver provides two streams: playback & capture. It also provides DAI operation such as mute, free... define mixers and audio paths by calling SOC_* macro. imx-wm8960.c is ASoC Platform Driver .","title":"ASoC"},{"location":"lnx_ldd/audio/linux_audio/#alsa-application","text":"","title":"ALSA Application"},{"location":"lnx_ldd/audio/linux_audio/#arecord-aplay","text":"arecord -t raw -f S16_LE -c 1 output.raw output.raw can be played by using aplay aplay -f S16_LE output.raw or extracted by a simple C program. #include <stdio.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> int main() { int16_t buf; int fd = open(\"./input\", O_RDWR); if (fd < 0) { printf(\"open file fail\\n\"); return 1; } while (read(fd, &buf, 2) > 0) printf(\"%d\\n\", buf); close(fd); return 0; } Raw data","title":"arecord &amp; aplay"},{"location":"lnx_ldd/audio/linux_audio/#dapm-dynamic-audio-power-management","text":"Modern sound cards consist of many independent discrete components and each component has functional units that can be powered independently. Figure. Anatomy of a modern sound card (Lars-Peter Clausen \u2013 Analog Devices)","title":"DAPM - Dynamic Audio Power Management"},{"location":"lnx_ldd/audio/linux_audio/#what-is-dapm","text":"DAPM is model data flow and power dependencies in a directed graph. Each node in graph represents a functional unit (called widget ). Route or Path represent connections between functional units. Eache widget (node) has a type and this type defines how the widget behaves in the graph. E.g. Speaker, Microphone, Amplifier, DAC, ADC, internal supply, external supply, headphone output, line-in input, line-out output, audio interface, audio interface link, mixer, mux, input pin, output pin ...","title":"What is DAPM?"},{"location":"lnx_ldd/audio/linux_audio/#how-dapm-works","text":"DAPM operation has two phases: Phase 1: Determine target power state Phase 2: Power sequencing In phase 1, finding out the power state DAPM differentiates between three different categories of widgets: Enpoint widgets, Pass-through widgets, Supply widgets. Power state of eache widget in graph is determined. After Phase 1, target power state is determined. Widgets in graph is powered. Power-down all newly disabled widgets Perform routing changes (if any) Power-up all newly enabled widgets","title":"How DAPM works?"},{"location":"lnx_ldd/audio/linux_audio/#case-study-wm8960","text":"Macro for defining widgets can be found at /include/sound/soc-dapm.h . DAPM widgets in wm8960.c fall into a number of types: Stream Domain Widgets: ADCs (analog to digital converters), DACs (digital to analog converters). SND_SOC_DAPM_ADC(\"Left ADC\", \"Capture\", WM8960_POWER1, 3, 0), SND_SOC_DAPM_ADC(\"Right ADC\", \"Capture\", WM8960_POWER1, 2, 0), SND_SOC_DAPM_DAC(\"Left DAC\", \"Playback\", WM8960_POWER2, 8, 0), SND_SOC_DAPM_DAC(\"Right DAC\", \"Playback\", WM8960_POWER2, 7, 0), Path Domain Widgets: Path domain widgets have a ability to control or affect the audio signal or audio paths within the audio subsystem SOC_DAPM_SINGLE(\"Left Switch\", WM8960_MONOMIX1, 7, 1, 0), SOC_DAPM_SINGLE(\"Right Switch\", WM8960_MONOMIX2, 7, 1, 0), Machine Widgets appears in imx-wm8960.c . A machine widget is assigned to each machine audio component (non codec or DSP) that can be independently powered. e.g Microphone Bias, Jack Connectors. In iMX8-MQ, machine widget and codec widget interconnections are defined in device tree: audio-routing = \"Headphone Jack\", \"HP_L\", \"Headphone Jack\", \"HP_R\", \"Ext Spk\", \"SPK_LP\", \"Ext Spk\", \"SPK_LN\", \"LINPUT1\", \"Main MIC\", \"LINPUT2\", \"Main MIC\", \"RINPUT1\", \"Mic Jack\", \"Mic Jack\", \"MICB\", \"Main MIC\", \"MICB\", \"Playback\", \"CPU-Playback\", \"CPU-Capture\", \"Capture\"; Headphone Jack, Ext Spk, Main MIC, Mic Jack are machine widgets.","title":"Case Study - WM8960"},{"location":"lnx_ldd/audio/linux_audio/#physical-interface-definitions","text":"","title":"Physical interface definitions"},{"location":"lnx_ldd/audio/linux_audio/#i2s-inter-ic-sound","text":"What is I2S? and What is I2S used for? I2S - Inter IC Sound is an electrical serial bus interface standard used for connecting digital audio devices together. This standard was introduced in 1986 by Philips Semiconductor (now NXP Semiconductors ) and was last revised on June 5, 1996. What is I2S made from? Figure. I2S Bus Timing from I2S standard by Philips Seminconductors The bus consists of at least three lines: Bit clock line: Officially \"continuous serial clock (SCK)\".[1] Typically written \"bit clock (BCLK)\".[2] Word clock line: Officially \"word select (WS)\".[1] Typically called \"left-right clock (LRCLK)\"[2] or \"frame sync (FS)\". 0 = Left channel 1 = Right channel At least one multiplexed data line Officially \"serial data (SD)\",[1] but can be called SDATA, SDIN, SDOUT, DACDAT, ADCDAT, etc.[2] What kind of data is transfered in I2S? Digital Audio Data e.g. PCM","title":"I2S - Inter IC Sound"},{"location":"lnx_ldd/audio/linux_audio/#sai-synchronous-audio-interface","text":"Synchronous Audio Interface or Serial Audio Interface ? It is quite hard to find definition for SAI in Internet. So, it will be defined by using an example from NPX IMX SoC. In IMX8M, NXP integrates an audio module called SAI/I2S. This module which is platform device (has its own address in CPU memory map) will receive audio data from external CODEC and transfer these data to CPU. It supports I2S bus standard.","title":"SAI - Synchronous Audio Interface"},{"location":"lnx_ldd/audio/linux_audio/#dai-digital-audio-interfaces","text":"ASoC currently supports the three main Digital Audio Interfaces (DAI) found on SoC controllers and portable audio CODECs today, namely AC97, I2S and PCM (PCM means a kind of bus, not a type of digital audio data).","title":"DAI - Digital Audio Interfaces"},{"location":"lnx_ldd/audio/linux_audio/#references","text":"[1] DAPM - Analog Device - Lars-Petter Clausen.","title":"References"},{"location":"lnx_ldd/gpio/gpio/","text":"General Purpose Input or Output Driver perspective V\u1ec1 c\u01a1 b\u1ea3n, c\u00e1c subsytem c\u1ee7a Linux Kernel nh\u01b0 SPI, I2C, GPIO ... \u0111\u1ec1u ho\u1ea1t \u0111\u1ed9ng v\u1edbi m\u00f4 h\u00ecnh (concept) t\u01b0\u01a1ng t\u1ef1 nhau. C\u00e1c t\u00e0i nguy\u00ean ph\u1ea7n c\u1ee9ng \u0111\u01b0\u1ee3c \u0111\u0103ng k\u00fd v\u1edbi Kernel, c\u00e1c module kh\u00e1c c\u1ee7a Kernel mu\u1ed1n truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n c\u1ee9ng n\u00e0y s\u1ebd c\u1ea7n ph\u1ea3i g\u1eedi y\u00eau c\u1ea7u. GPIO Controlller Driver : th\u1ef1c hi\u1ec7n \u0111\u0103ng k\u00fd m\u1ed9t struct gpio_chip v\u1edbi Linux kernel, khai b\u00e1o c\u00e1c t\u00e0i nguy\u00ean c\u00f3 th\u1ec3 cung c\u1ea5p \u0111\u01b0\u1ee3c c\u1ee7a GPIO controller. gpio_chip cung c\u1ea5p c\u00e1c ph\u01b0\u01a1ng th\u1ee9c nh\u01b0 request , set , get ... v\u00e0 th\u00f4ng qua c\u00e1c ph\u01b0\u01a1ng th\u1ee9c n\u00e0y c\u00f3 th\u1ec3 t\u00e1c \u0111\u1ed9ng \u0111\u1ebfn ph\u1ea7n c\u1ee9ng GPIO. gpio@e000a000 { compatible = \"xlnx,zynq-gpio-1.0\"; #gpio-cells = <0x2>; clocks = <0x1 0x2a>; gpio-controller; interrupt-parent = <0x3>; interrupts = <0x0 0x14 0x4>; reg = <0xe000a000 0x1000>; ... }; Zynq GPIO Controller is described as a node in Device Tree . User modules : c\u00e1c module kh\u00e1c trong trong tr\u01b0\u1eddng h\u1ee3p mu\u1ed1n s\u1eed d\u1ee5ng m\u1ed9t pin GPIO thu\u1ed9c quy\u1ec1n qu\u1ea3n l\u00fd c\u1ee7a GPIO Controller s\u1ebd g\u1eedi y\u00eau c\u1ea7u \u0111\u1ebfn kernel \u0111\u1ec3 xin t\u00e0i nguy\u00ean. GPIO Subsystem cung c\u1ea5p c\u00e1c APIs nh\u01b0 gpio_request_one v\u00e0 gpio_request_array \u0111\u1ec3 c\u00e1c module c\u00f3 th\u1ec3 y\u00eau c\u1ea7u t\u00e0i nguy\u00ean. N\u1ebfu qu\u00e1 tr\u00ecnh y\u00eau c\u1ea7u t\u00e0i nguy\u00ean th\u00e0nh c\u00f4ng, module s\u1ebd \u0111i\u1ec1u khi\u1ec3n GPIO th\u00f4ng qua c\u00e1c APIs nh\u01b0 gpio_set_value v\u00e0 gpio_get_value . Li\u00ean k\u1ebft gi\u1eefa Other module v\u00e0 Controller driver : gpio_number <-1-> struct gpio_desc *<-2-> struct gpio_chip * Qu\u00e1 tr\u00ecnh 1, t\u1eeb gpio_number c\u00f3 th\u1ec3 g\u1ecdi \u0111\u1ebfn gpio_desc b\u1eb1ng c\u00e1c API nh\u01b0 gpio_to_desc . V\u1ec1 b\u1ea3n ch\u1ea5t, gpio_desc \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef b\u1eb1ng m\u1ed9t m\u1ea3ng t\u0129nh: static struct gpio_desc gpio_desc[ARCH_NR_GPIOS]; trong \u0111\u00f3 gpio_number l\u00e0 ch\u1ec9 s\u1ed1 c\u1ee7a m\u1ea3ng t\u0129nh n\u00e0y, do \u0111\u00f3 truy c\u1eadp \u0111\u1ebfn gpio_desc c\u1ee7a m\u1ed9t gpio_number \u0111\u01a1n gi\u1ea3n l\u00e0 truy c\u1eadp \u0111\u1ebfn m\u1ed9t ph\u1ea7n t\u1eed c\u1ee7a m\u1ea3ng. Qu\u00e1 tr\u00ecnh 2, gpio_desc ch\u1ee9a con tr\u1ecf tr\u1ecf \u0111\u1ebfn struct gpio_chip *chip; , do \u0111\u00f3 t\u1eeb gpio_desc c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng truy c\u1eadp \u0111\u01b0\u1ee3c \u0111\u1ebfn gpio_chip (desc->chip). Quy tr\u00ecnh g\u1eedi y\u00eau c\u1ea7u v\u00e0 s\u1eed d\u1ee5ng GPIO \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong m\u1ed9t t\u00e0i li\u1ec7u khoa h\u1ecdc trong m\u1ee5c References. Userspace software perspective Truy c\u1eadp tr\u1ef1c ti\u1ebfp t\u1eeb c\u00e1c device attribute trong sysfs GPIO Class Trong gpiolib-sysfs.c khai b\u00e1o struct class gpio_class trong h\u00e0m __init : status = class_register(&gpio_class); V\u1edbi thu\u1ed9c t\u00ednh gpio_class_attrs : static struct class_attribute gpio_class_attrs[] = { __ATTR(export, 0200, NULL, export_store), __ATTR(unexport, 0200, NULL, unexport_store), __ATTR_NULL, }; static struct class gpio_class = { .name = \"gpio\", .owner = THIS_MODULE, .class_attrs = gpio_class_attrs, }; K\u1ebft qu\u1ea3 trong sys/class/gpio/ xu\u1ea5t hi\u1ec7n hai thu\u1ed9c t\u00ednh export/unexport . /sys/class/gpio# ls -l --w------- 1 root root 4096 Jan 1 00:00 export lrwxrwxrwx 1 root root 0 Jan 1 00:00 gpiochip0 -> ../../devices/soc0/amba/e000a000.gpio/gpio/gpiochip0 --w------- 1 root root 4096 Jan 1 00:00 unexport Hai thu\u1ed9c t\u00ednh export/unexport \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 y\u00eau c\u1ea7u/h\u1ee7y y\u00eau c\u1ea7u \u0111\u1ed1i v\u1edbi m\u1ed9t GPIO. GPIO controller device Trong qu\u00e1 tr\u00ecnh controller driver \u0111\u0103ng k\u00fd GPIO v\u1edbi Kernel (gpiolib), c\u00e1c attribute c\u1ee7a gpiochip device \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o th\u00f4ng qua int gpiochip_export(struct gpio_chip *chip) . K\u1ebft qu\u1ea3 l\u00e0 m\u1ed9t device \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o: /sys/devices/soc0/amba/e000a000.gpio/gpio/gpiochip0 C\u00e1c thu\u1ed9c t\u00ednh b\u00ean trong device n\u00e0y c\u00f3 d\u1ea1ng nh\u01b0 sau -r--r--r-- 1 root root 4096 Jan 1 00:00 base lrwxrwxrwx 1 root root 0 Jan 1 00:00 device -> ../../../e000a000.gpio -r--r--r-- 1 root root 4096 Jan 1 00:00 label -r--r--r-- 1 root root 4096 Jan 1 00:00 ngpio drwxr-xr-x 2 root root 0 Jan 1 00:00 power lrwxrwxrwx 1 root root 0 Jan 1 00:00 subsystem -> ../../../../../../class/gpio -rw-r--r-- 1 root root 4096 Jan 1 00:00 uevent GPIO Pin Device \u0110\u1ec3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c m\u1ed9t pin GPIO, c\u1ea7n c\u00f3 qu\u00e1 tr\u00ecnh g\u1eedi y\u00eau c\u1ea7u \u0111\u1ebfn h\u1ec7 th\u1ed1ng. Qu\u00e1 tr\u00ecnh n\u00e0y c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00f4ng qua API gpio_request_array ho\u1eb7c s\u1eed d\u1ee5ng c\u00e1c attributes export/unexport . V\u1ec1 c\u01a1 b\u1ea3n hai qu\u00e1 tr\u00ecnh n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n g\u1ecdi \u0111\u1ebfn API int gpiod_export(struct gpio_desc *desc, bool direction_may_change) \u0111\u1ec3 t\u1ea1o ra c\u00e1c GPIO device. dev = device_create(&gpio_class, desc->chip->dev, MKDEV(0, 0), desc, ioname ? ioname : \"gpio%u\", desc_to_gpio(desc)); V\u00ed d\u1ee5 v\u1edbi gpioN, device xu\u1ea5t hi\u1ec7n trong h\u1ec7 th\u1ed1ng nh\u01b0 sau: /sys/devices/soc0/amba/e000a000.gpio/gpio/gpioN C\u00e1c thu\u1ed9c t\u00ednh \u0111\u00f3 bao g\u1ed3m: /sys/devices/soc0/amba/e000a000.gpio/gpio/gpio1# ls -l -rw-r--r-- 1 root root 4096 Jan 3 22:42 active_low lrwxrwxrwx 1 root root 0 Jan 3 22:42 device -> ../../../e000a000.gpio -rw-r--r-- 1 root root 4096 Jan 3 22:42 direction -rw-r--r-- 1 root root 4096 Jan 3 22:42 edge drwxr-xr-x 2 root root 0 Jan 3 22:42 power lrwxrwxrwx 1 root root 0 Jan 3 22:42 subsystem -> ../../../../../../class/gpio -rw-r--r-- 1 root root 4096 Jan 3 22:42 uevent -rw-r--r-- 1 root root 4096 Jan 3 22:42 value Truy c\u1eadp th\u00f4ng qua c\u00e1c user module V\u1ec1 c\u01a1 b\u1ea3n, qu\u00e1 tr\u00ecnh truy c\u1eadp m\u1ed9t ch\u00e2n GPIO th\u00f4ng qua m\u1ed9t user module c\u0169ng \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u01b0\u01a1ng t\u1ef1 nh\u01b0 truy c\u1eadp tr\u1ef1c ti\u1ebfp qua c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a gpio class v\u00e0 gpio device . Qu\u00e1 tr\u00ecnh n\u00e0y ch\u1ec9 kh\u00e1c nhau \u1edf ph\u01b0\u01a1ng th\u1ee9c giao ti\u1ebfp gi\u1eefa User Space v\u00e0 Kernel Space. Thay v\u00ec tr\u1ef1c ti\u1ebfp s\u1eed d\u1ee5ng c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a gpio class th\u00ec c\u00e1c \u1ee9ng d\u1ee5ng user space s\u1ebd t\u01b0\u01a1ng t\u00e1c qua c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a User module (c\u00f3 th\u1ec3 l\u00e0 IOCTL ho\u1eb7c device attributes). Hardware perspective Zynq7000 In Zynq, GPIO controller registers are memory mapped at base address 0xe000a000. Figure. GPIO pin in Zynq7000 References GPIO in the kernel: an introduction - lwn.net","title":"GPIO"},{"location":"lnx_ldd/gpio/gpio/#general-purpose-input-or-output","text":"","title":"General Purpose Input or Output"},{"location":"lnx_ldd/gpio/gpio/#driver-perspective","text":"V\u1ec1 c\u01a1 b\u1ea3n, c\u00e1c subsytem c\u1ee7a Linux Kernel nh\u01b0 SPI, I2C, GPIO ... \u0111\u1ec1u ho\u1ea1t \u0111\u1ed9ng v\u1edbi m\u00f4 h\u00ecnh (concept) t\u01b0\u01a1ng t\u1ef1 nhau. C\u00e1c t\u00e0i nguy\u00ean ph\u1ea7n c\u1ee9ng \u0111\u01b0\u1ee3c \u0111\u0103ng k\u00fd v\u1edbi Kernel, c\u00e1c module kh\u00e1c c\u1ee7a Kernel mu\u1ed1n truy c\u1eadp \u0111\u1ebfn c\u00e1c ph\u1ea7n c\u1ee9ng n\u00e0y s\u1ebd c\u1ea7n ph\u1ea3i g\u1eedi y\u00eau c\u1ea7u. GPIO Controlller Driver : th\u1ef1c hi\u1ec7n \u0111\u0103ng k\u00fd m\u1ed9t struct gpio_chip v\u1edbi Linux kernel, khai b\u00e1o c\u00e1c t\u00e0i nguy\u00ean c\u00f3 th\u1ec3 cung c\u1ea5p \u0111\u01b0\u1ee3c c\u1ee7a GPIO controller. gpio_chip cung c\u1ea5p c\u00e1c ph\u01b0\u01a1ng th\u1ee9c nh\u01b0 request , set , get ... v\u00e0 th\u00f4ng qua c\u00e1c ph\u01b0\u01a1ng th\u1ee9c n\u00e0y c\u00f3 th\u1ec3 t\u00e1c \u0111\u1ed9ng \u0111\u1ebfn ph\u1ea7n c\u1ee9ng GPIO. gpio@e000a000 { compatible = \"xlnx,zynq-gpio-1.0\"; #gpio-cells = <0x2>; clocks = <0x1 0x2a>; gpio-controller; interrupt-parent = <0x3>; interrupts = <0x0 0x14 0x4>; reg = <0xe000a000 0x1000>; ... }; Zynq GPIO Controller is described as a node in Device Tree . User modules : c\u00e1c module kh\u00e1c trong trong tr\u01b0\u1eddng h\u1ee3p mu\u1ed1n s\u1eed d\u1ee5ng m\u1ed9t pin GPIO thu\u1ed9c quy\u1ec1n qu\u1ea3n l\u00fd c\u1ee7a GPIO Controller s\u1ebd g\u1eedi y\u00eau c\u1ea7u \u0111\u1ebfn kernel \u0111\u1ec3 xin t\u00e0i nguy\u00ean. GPIO Subsystem cung c\u1ea5p c\u00e1c APIs nh\u01b0 gpio_request_one v\u00e0 gpio_request_array \u0111\u1ec3 c\u00e1c module c\u00f3 th\u1ec3 y\u00eau c\u1ea7u t\u00e0i nguy\u00ean. N\u1ebfu qu\u00e1 tr\u00ecnh y\u00eau c\u1ea7u t\u00e0i nguy\u00ean th\u00e0nh c\u00f4ng, module s\u1ebd \u0111i\u1ec1u khi\u1ec3n GPIO th\u00f4ng qua c\u00e1c APIs nh\u01b0 gpio_set_value v\u00e0 gpio_get_value . Li\u00ean k\u1ebft gi\u1eefa Other module v\u00e0 Controller driver : gpio_number <-1-> struct gpio_desc *<-2-> struct gpio_chip * Qu\u00e1 tr\u00ecnh 1, t\u1eeb gpio_number c\u00f3 th\u1ec3 g\u1ecdi \u0111\u1ebfn gpio_desc b\u1eb1ng c\u00e1c API nh\u01b0 gpio_to_desc . V\u1ec1 b\u1ea3n ch\u1ea5t, gpio_desc \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef b\u1eb1ng m\u1ed9t m\u1ea3ng t\u0129nh: static struct gpio_desc gpio_desc[ARCH_NR_GPIOS]; trong \u0111\u00f3 gpio_number l\u00e0 ch\u1ec9 s\u1ed1 c\u1ee7a m\u1ea3ng t\u0129nh n\u00e0y, do \u0111\u00f3 truy c\u1eadp \u0111\u1ebfn gpio_desc c\u1ee7a m\u1ed9t gpio_number \u0111\u01a1n gi\u1ea3n l\u00e0 truy c\u1eadp \u0111\u1ebfn m\u1ed9t ph\u1ea7n t\u1eed c\u1ee7a m\u1ea3ng. Qu\u00e1 tr\u00ecnh 2, gpio_desc ch\u1ee9a con tr\u1ecf tr\u1ecf \u0111\u1ebfn struct gpio_chip *chip; , do \u0111\u00f3 t\u1eeb gpio_desc c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng truy c\u1eadp \u0111\u01b0\u1ee3c \u0111\u1ebfn gpio_chip (desc->chip). Quy tr\u00ecnh g\u1eedi y\u00eau c\u1ea7u v\u00e0 s\u1eed d\u1ee5ng GPIO \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong m\u1ed9t t\u00e0i li\u1ec7u khoa h\u1ecdc trong m\u1ee5c References.","title":"Driver perspective"},{"location":"lnx_ldd/gpio/gpio/#userspace-software-perspective","text":"Truy c\u1eadp tr\u1ef1c ti\u1ebfp t\u1eeb c\u00e1c device attribute trong sysfs GPIO Class Trong gpiolib-sysfs.c khai b\u00e1o struct class gpio_class trong h\u00e0m __init : status = class_register(&gpio_class); V\u1edbi thu\u1ed9c t\u00ednh gpio_class_attrs : static struct class_attribute gpio_class_attrs[] = { __ATTR(export, 0200, NULL, export_store), __ATTR(unexport, 0200, NULL, unexport_store), __ATTR_NULL, }; static struct class gpio_class = { .name = \"gpio\", .owner = THIS_MODULE, .class_attrs = gpio_class_attrs, }; K\u1ebft qu\u1ea3 trong sys/class/gpio/ xu\u1ea5t hi\u1ec7n hai thu\u1ed9c t\u00ednh export/unexport . /sys/class/gpio# ls -l --w------- 1 root root 4096 Jan 1 00:00 export lrwxrwxrwx 1 root root 0 Jan 1 00:00 gpiochip0 -> ../../devices/soc0/amba/e000a000.gpio/gpio/gpiochip0 --w------- 1 root root 4096 Jan 1 00:00 unexport Hai thu\u1ed9c t\u00ednh export/unexport \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 y\u00eau c\u1ea7u/h\u1ee7y y\u00eau c\u1ea7u \u0111\u1ed1i v\u1edbi m\u1ed9t GPIO. GPIO controller device Trong qu\u00e1 tr\u00ecnh controller driver \u0111\u0103ng k\u00fd GPIO v\u1edbi Kernel (gpiolib), c\u00e1c attribute c\u1ee7a gpiochip device \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o th\u00f4ng qua int gpiochip_export(struct gpio_chip *chip) . K\u1ebft qu\u1ea3 l\u00e0 m\u1ed9t device \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o: /sys/devices/soc0/amba/e000a000.gpio/gpio/gpiochip0 C\u00e1c thu\u1ed9c t\u00ednh b\u00ean trong device n\u00e0y c\u00f3 d\u1ea1ng nh\u01b0 sau -r--r--r-- 1 root root 4096 Jan 1 00:00 base lrwxrwxrwx 1 root root 0 Jan 1 00:00 device -> ../../../e000a000.gpio -r--r--r-- 1 root root 4096 Jan 1 00:00 label -r--r--r-- 1 root root 4096 Jan 1 00:00 ngpio drwxr-xr-x 2 root root 0 Jan 1 00:00 power lrwxrwxrwx 1 root root 0 Jan 1 00:00 subsystem -> ../../../../../../class/gpio -rw-r--r-- 1 root root 4096 Jan 1 00:00 uevent GPIO Pin Device \u0110\u1ec3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c m\u1ed9t pin GPIO, c\u1ea7n c\u00f3 qu\u00e1 tr\u00ecnh g\u1eedi y\u00eau c\u1ea7u \u0111\u1ebfn h\u1ec7 th\u1ed1ng. Qu\u00e1 tr\u00ecnh n\u00e0y c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00f4ng qua API gpio_request_array ho\u1eb7c s\u1eed d\u1ee5ng c\u00e1c attributes export/unexport . V\u1ec1 c\u01a1 b\u1ea3n hai qu\u00e1 tr\u00ecnh n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n g\u1ecdi \u0111\u1ebfn API int gpiod_export(struct gpio_desc *desc, bool direction_may_change) \u0111\u1ec3 t\u1ea1o ra c\u00e1c GPIO device. dev = device_create(&gpio_class, desc->chip->dev, MKDEV(0, 0), desc, ioname ? ioname : \"gpio%u\", desc_to_gpio(desc)); V\u00ed d\u1ee5 v\u1edbi gpioN, device xu\u1ea5t hi\u1ec7n trong h\u1ec7 th\u1ed1ng nh\u01b0 sau: /sys/devices/soc0/amba/e000a000.gpio/gpio/gpioN C\u00e1c thu\u1ed9c t\u00ednh \u0111\u00f3 bao g\u1ed3m: /sys/devices/soc0/amba/e000a000.gpio/gpio/gpio1# ls -l -rw-r--r-- 1 root root 4096 Jan 3 22:42 active_low lrwxrwxrwx 1 root root 0 Jan 3 22:42 device -> ../../../e000a000.gpio -rw-r--r-- 1 root root 4096 Jan 3 22:42 direction -rw-r--r-- 1 root root 4096 Jan 3 22:42 edge drwxr-xr-x 2 root root 0 Jan 3 22:42 power lrwxrwxrwx 1 root root 0 Jan 3 22:42 subsystem -> ../../../../../../class/gpio -rw-r--r-- 1 root root 4096 Jan 3 22:42 uevent -rw-r--r-- 1 root root 4096 Jan 3 22:42 value Truy c\u1eadp th\u00f4ng qua c\u00e1c user module V\u1ec1 c\u01a1 b\u1ea3n, qu\u00e1 tr\u00ecnh truy c\u1eadp m\u1ed9t ch\u00e2n GPIO th\u00f4ng qua m\u1ed9t user module c\u0169ng \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u01b0\u01a1ng t\u1ef1 nh\u01b0 truy c\u1eadp tr\u1ef1c ti\u1ebfp qua c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a gpio class v\u00e0 gpio device . Qu\u00e1 tr\u00ecnh n\u00e0y ch\u1ec9 kh\u00e1c nhau \u1edf ph\u01b0\u01a1ng th\u1ee9c giao ti\u1ebfp gi\u1eefa User Space v\u00e0 Kernel Space. Thay v\u00ec tr\u1ef1c ti\u1ebfp s\u1eed d\u1ee5ng c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a gpio class th\u00ec c\u00e1c \u1ee9ng d\u1ee5ng user space s\u1ebd t\u01b0\u01a1ng t\u00e1c qua c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a User module (c\u00f3 th\u1ec3 l\u00e0 IOCTL ho\u1eb7c device attributes).","title":"Userspace software perspective"},{"location":"lnx_ldd/gpio/gpio/#hardware-perspective","text":"Zynq7000 In Zynq, GPIO controller registers are memory mapped at base address 0xe000a000. Figure. GPIO pin in Zynq7000","title":"Hardware perspective"},{"location":"lnx_ldd/gpio/gpio/#references","text":"GPIO in the kernel: an introduction - lwn.net","title":"References"},{"location":"lnx_ldd/i2c/i2c/","text":"I2C Platform T\u0103ng Thi\u00ean V\u0169, Trung t\u00e2m nghi\u00ean c\u1ee9u c\u00f4ng ngh\u1ec7 m\u1ea1ng Viettel, H\u00e0 N\u1ed9i, 2/2018 Introduction T\u00e0i li\u1ec7u m\u00f4 t\u1ea3 c\u00e1c ki\u1ebfn th\u1ee9c t\u00ecm hi\u1ec3u \u0111\u01b0\u1ee3c v\u1ec1 I2C Platform tr\u00ean Linux \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u1ef1c t\u1ebf tr\u00ean ph\u1ea7n c\u1ee9ng ZC706 v\u00e0 FMCJESDADC1. T\u00e0i li\u1ec7u l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh m\u1edf r\u1ed9ng t\u00ecm hi\u1ec3u d\u1ef1a tr\u00ean y\u00eau c\u1ea7u ban \u0111\u1ea7u c\u1ee7a \u201cB\u00e0i t\u1eadp 6: Vi\u1ebft \u1ee9ng d\u1ee5ng \u0111\u1ecdc/ghi chip EEPROM th\u00f4ng qua bus I2C tr\u00ean KIT ho\u1eb7c RRU\u201d trong ch\u01b0\u01a1ng tr\u00ecnh Linux Training c\u1ee7a ph\u00f2ng Firmware \u2013 VTBR-VTTEK. I2C l\u00e0 m\u1ed9t bus r\u1ea5t ph\u1ed5 bi\u1ebfn \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho giao ti\u1ebfp gi\u1eefa master (m\u1ed9t ho\u1eb7c nhi\u1ec1u) v\u00e0 c\u00e1c thi\u1ebft b\u1ecb slave. H\u00ecnh d\u01b0\u1edbi m\u00f4 t\u1ea3 m\u1ed9t topo c\u01a1 b\u1ea3n k\u1ebft n\u1ed1i c\u00e1c thi\u1ebft b\u1ecb ngo\u1ea1i vi v\u1edbi Microprocessor th\u00f4ng qua bus I2C. Figure. I2C Bus ZC706 board tri\u1ec3n khai hai c\u1ed5ng I2C ( H\u00ecnh ) [2]: PL-Side: c\u1ed5ng IIC_SCL/SDA_MAIN tr\u00ean Bank 10. PS-Side: c\u1ed5ng IIC_SDA/SCL_MAIN tr\u00ean Bank 501. Figure. I2C Bus in ZC706 KIT Hi\u1ec7n t\u1ea1i, tr\u00ean project ph\u1ea7n c\u1ee9ng ZC706 v\u00e0 FMCJESDADC1 (k\u1ebft n\u1ed1i v\u1edbi nhau qua bus FMC-HPC), h\u1ec7 th\u1ed1ng bus I2C \u0111\u01b0\u1ee3c minh h\u1ecda trong s\u01a1 \u0111\u1ed3 H\u00ecnh d\u01b0\u1edbi . FPGA Project cung c\u1ea5p b\u1edfi ADI s\u1eed d\u1ee5ng Xilinx AXI I2C Controller (implement tr\u00ean FPGA) cho m\u1ee5c \u0111\u00edch giao ti\u1ebfp v\u1edbi c\u00e1c thi\u1ebft b\u1ecb I2C tr\u00ean m\u1ea1ch th\u00f4ng qua bus tr\u00ean PL Bank 10. Figure. Bus I2C tr\u00ean ph\u1ea7n c\u1ee9ng ZC706/FMCJESDDAC1 I2C Platform C\u00e1c th\u00e0nh ph\u1ea7n c\u01a1 b\u1ea3n c\u1ee7a i2c platform H\u00ecnh 2.1 m\u00f4 t\u1ea3 c\u00e1c th\u00e0nh ph\u1ea7n c\u01a1 b\u1ea3n c\u1ee7a m\u1ed9t i2c platform tr\u00ean Linux. \u1ee8ng d\u1ee5ng i2ctool tr\u00ean t\u1ea7ng User Space t\u01b0\u01a1ng t\u00e1c v\u1edbi c\u00e1c file /dev/i2c-n t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c bus i2c. Th\u00f4ng qua c\u00e1c module i2c-dev , i2c-core v\u00e0 i2c-driver , \u1ee9ng d\u1ee5ng i2ctool c\u00f3 th\u1ec3 truy nh\u1eadp \u0111\u1ebfn c\u00e1c thi\u1ebft b\u1ecb i2c tr\u00ean ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng v\u1edbi bus i2c \u0111\u01b0\u1ee3c \u0111\u1ea1i di\u1ec7n b\u1eb1ng file /dev/i2c-n . Figure. C\u00e1c th\u00e0nh ph\u1ea7n trong I2C Platform Trong ph\u1ea7n ti\u1ebfp theo s\u1ebd t\u00ecm hi\u1ec3u r\u00f5 h\u01a1n c\u00e1c th\u00e0nh ph\u1ea7n trong h\u1ec7 th\u1ed1ng tr\u00ean, c\u0169ng nh\u01b0 c\u00e1ch h\u1ec7 th\u1ed1ng ho\u1ea1t \u0111\u1ed9ng. C\u00e1c c\u1ea5u tr\u00fac d\u1eef li\u1ec7u quan tr\u1ecdng \u0110\u1ec3 c\u00f3 th\u1ec3 qu\u1ea3n l\u00ed v\u00e0 truy c\u1eadp \u0111\u1ebfn c\u00e1c thi\u1ebft b\u1ecb i2c, i2c platform s\u1eed d\u1ee5ng c\u00e1c c\u1ea5u tr\u00fac d\u1eef li\u1ec7u nh\u01b0: i2c_client , i2c_adapter v\u00e0 i2c_algorithm . Trong \u0111\u00f3: i2c_client \u0111\u1ea1i di\u1ec7n cho c\u00e1c thi\u1ebft b\u1ecb tr\u00ean m\u1ed9t bus i2c; i2c_adapter v\u00e0 i2c algorithm cung c\u1ea5p c\u00e1c ph\u01b0\u01a1ng th\u1ee9c (c\u00e1c h\u00e0m master_xfer() , smbus_xfer() ) \u0111\u1ec3 c\u00f3 th\u1ec3 truy nh\u1eadp \u0111\u1ebfn c\u00e1c thi\u1ebft b\u1ecb i2c. M\u1ed1i quan h\u1ec7 gi\u1eefa c\u00e1c struct n\u00e0y th\u1ec3 hi\u1ec7n trong H\u00ecnh 2.2. Figure. C\u00e1c c\u1ea5u tr\u00fac d\u1eef li\u1ec7u quan tr\u1ecdng li\u00ean quan \u0111\u1ebfn i2c platform Struct i2c_client Tr\u00ean m\u1ed9t bus i2c c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t ho\u1eb7c nhi\u1ec1u thi\u1ebft b\u1ecb, m\u1ed7i thi\u1ebft b\u1ecb tr\u00ean bus s\u1ebd \u0111\u01b0\u1ee3c driver \u0111\u0103ng k\u00ed v\u1edbi h\u1ec7 \u0111i\u1ec1u h\u00e0nh th\u00f4ng qua m\u1ed9t struct i2c_client (H\u00ecnh 2.3). \u0110\u1eb7c tr\u01b0ng nh\u1ea5t c\u1ee7a struct i2c_client n\u00e0y l\u00e0 tr\u01b0\u1eddng addr n\u01a1i ch\u1ee9a \u0111\u1ecba ch\u1ec9 c\u1ee7a thi\u1ebft b\u1ecb tr\u00ean bus i2c \u0111\u1ec3 ph\u00e2n bi\u1ec7t v\u1edbi c\u00e1c thi\u1ebft b\u1ecb kh\u00e1c. struct i2c_client { unsigned short flags; /* div., see below */ unsigned short addr; /* chip address - NOTE: 7bit */ /* addresses are stored in the */ /* _LOWER_ 7 bits */ char name[I2C_NAME_SIZE]; struct i2c_adapter *adapter; /* the adapter we sit on */ struct device dev; /* the device structure */ int irq; /* irq issued by device */ struct list_head detected; #if IS_ENABLED(CONFIG_I2C_SLAVE) i2c_slave_cb_t slave_cb; /* callback for slave mode */ #endif }; i2c_client ch\u1ee9a con tr\u1ecf \u0111\u1ec3 tr\u1ecf \u0111\u1ebfn adapter c\u1ee7a driver t\u01b0\u01a1ng \u1ee9ng v\u1edbi bus i2c. Struct i2c_adapter v\u00e0 i2c_algorithm Driver qu\u1ea3n l\u00ed c\u00e1c thi\u1ebft b\u1ecb th\u00f4ng qua struct i2c_client v\u00e0 cung c\u1ea5p ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c thi\u1ebft b\u1ecb n\u00e0y th\u00f4ng qua struct i2c_adapter . struct i2c_adapter { struct module *owner; unsigned int class; /* classes to allow probing for */ const struct i2c_algorithm *algo; /* the algo to access the bus*/ void *algo_data; /* data fields that are valid for all devices */ const struct i2c_lock_operations *lock_ops; struct rt_mutex bus_lock; struct rt_mutex mux_lock; int timeout; /* in jiffies */ int retries; struct device dev; /* the adapter device */ int nr; char name[48]; \u2026 }; I2c_adapter ch\u1ee9a c\u00e1c th\u00f4ng tin c\u01a1 b\u1ea3n c\u1ee7a bus nh\u01b0 name , nr (number) \u0111\u1ec3 \u0111\u1ecbnh danh bus i2c m\u00e0 driver \u0111ang qu\u1ea3n l\u00ed. Ngo\u00e0i ra, i2c_adapter ch\u1ee9a i2c_algorithm ch\u1ee9a c\u00e1c con tr\u1ecf \u0111\u1ec3 tr\u1ecf \u0111\u1ebfn h\u00e0m truy nh\u1eadp. struct i2c_algorithm { /* If an adapter algorithm can't do I2C-level access, set master_xfer to NULL. If an adapter algorithm can do SMBus access, set smbus_xfer. If set to NULL, the SMBus protocol is simulated using common I2C messages */ /* master_xfer should return the number of messages successfully processed, or a negative value on error */ int (*master_xfer)(struct i2c_adapter *adap, struct i2c_msg *msgs, int num); int (*smbus_xfer) (struct i2c_adapter *adap, u16 addr, unsigned short flags, char read_write, u8 command, int size, union i2c_smbus_data *data); /* To determine what the adapter supports */ u32 (*functionality) (struct i2c_adapter *); #if IS_ENABLED(CONFIG_I2C_SLAVE) int (*reg_slave)(struct i2c_client *client); int (*unreg_slave)(struct i2c_client *client); #endif }; Qu\u00e1 tr\u00ecnh driver probing m\u1ed9t thi\u1ebft b\u1ecb M\u1ed7i I2C Bus Driver \u0111\u1ec1u ch\u1ee9a struct i2c_algorithm qu\u1ea3n l\u00ed c\u00e1c h\u00e0m truy nh\u1eadp \u0111\u1ebfn thi\u1ebft b\u1ecb i2c. V\u00ed d\u1ee5 nh\u01b0 Xilinx I2C Controller Driver : static const struct i2c_algorithm xiic_algorithm = { .master_xfer = xiic_xfer, .functionality = xiic_func, }; Ho\u1eb7c nh\u01b0 Cadence I2C Controller Drivers : static const struct i2c_algorithm cdns_i2c_algo = { .master_xfer = cdns_i2c_master_xfer, .functionality = cdns_i2c_func, }; Qu\u00e1 tr\u00ecnh probing m\u1ed9t thi\u1ebft b\u1ecb v\u1ec1 b\u1ea3n ch\u1ea5t l\u00e0 qu\u00e1 tr\u00ecnh kh\u1edfi t\u1ea1o i2c_adapter (H\u00ecnh 2.6-1) v\u00e0 c\u00e1c i2c_client (H\u00ecnh 2.6-2). V\u00ed d\u1ee5 \u0111\u1ed1i v\u1edbi Xilinx I2C Controller driver, i2c_adapter \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o nh\u01b0 sau: static struct i2c_adapter xiic_adapter = { .owner = THIS_MODULE, .name = DRIVER_NAME, .class = I2C_CLASS_DEPRECATED, .algo = &xiic_algorithm, }; H\u00e0m probe c\u1ee7a driver s\u1ebd g\u1ecdi \u0111\u1ebfn i2c_add_adapter v\u00e0 i2c_new_divice() \u0111\u1ec3 \u0111\u0103ng k\u00ed i2c_adapter v\u00e0 i2c_client v\u00e0o h\u1ec7 th\u1ed1ng. Nh\u01b0 v\u1eady, sau qu\u00e1 tr\u00ecnh driver probing, v\u1edbi m\u1ed7i thi\u1ebft b\u1ecb tr\u00ean bus i2c \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u0103ng k\u00ed v\u00e0 c\u1ea5p ph\u00e1t m\u1ed9t i2c_client t\u01b0\u01a1ng \u1ee9ng, c\u00e1c i2c_client n\u00e0y s\u1eed d\u1ee5ng i2c_adapter \u0111\u1ec3 truy nh\u1eadp v\u00e0o thi\u1ebft b\u1ecb tr\u00ean ph\u1ea7n c\u1ee9ng. Qu\u00e1 tr\u00ecnh truy nh\u1eadp m\u1ed9t thi\u1ebft b\u1ecb tr\u00ean bus i2c t\u1eeb User Space L\u1ea5y i2c_adapter Sau khi i2c driver th\u1ef1c hi\u1ec7n probing thi\u1ebft b\u1ecb, m\u1ed9t i2c_adapter \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t v\u00e0 kh\u1edfi t\u1ea1o. \u0110\u1ec3 ti\u1ebfn h\u00e0nh truy nh\u1eadp \u0111\u01b0\u1ee3c thi\u1ebft b\u1ecb th\u00f4ng qua c\u00e1c ph\u01b0\u01a1ng th\u1ee9c cung c\u1ea5p b\u1edfi adapter, i2c_tool c\u1ea7n l\u1ea5y \u0111\u01b0\u1ee3c i2c_adapter n\u00e0y. Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong khi th\u1ef1c hi\u1ec7n h\u00e0m open() tr\u00ean user space. sprintf(filename, \"/dev/i2c-%d\", i2cbus); file = open(filename, O_RDWR); H\u00e0m open() tr\u00ean User Space s\u1ebd g\u1ecdi \u0111\u1ebfn ph\u01b0\u01a1ng th\u1ee9c open()trong Kernel Space c\u1ee7a file /dev/i2c-%d . Trong ph\u01b0\u01a1ng th\u1ee9c open , h\u00e0m i2c_get_adapter \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ec3 t\u00ecm ki\u1ebfm i2c_adapter . i2c_dev = i2c_dev_get_by_minor(minor); if (!i2c_dev) return -ENODEV; adap = i2c_get_adapter(i2c_dev->adap->nr); if (!adap) return -ENODEV; Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong H\u00ecnh 2.6-4. Kh\u1edfi t\u1ea1o m\u1ed9t i2c_client \u1ea3o B\u1ea3n ch\u1ea5t m\u1ed7i thi\u1ebft b\u1ecb tr\u00ean bus i2c \u0111\u01b0\u1ee3c qu\u1ea3n l\u00ed b\u1edfi i2c-core th\u00f4ng qua c\u00e1c c\u1ea5u tr\u00fac i2c_client . Nh\u01b0ng trong qu\u00e1 tr\u00ecnh truy nh\u1eadp \u0111\u1ebfn thi\u1ebft b\u1ecb, i2c-dev kh\u00f4ng s\u1eed d\u1ee5ng c\u00e1c i2c_client n\u00e0y m\u00e0 c\u1ea5p ph\u00e1t m\u1ed9t i2c_client m\u1edbi \u0111\u1ec3 tr\u1ecf \u0111\u1ebfn i2c_adapter v\u1eeba \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y \u1edf qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn \u1edf m\u1ee5c 2.3.1. Qu\u00e1 tr\u00ecnh kh\u1edfi t\u1ea1o i2c_client n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong H\u00ecnh 2.6-5. client = kzalloc(sizeof(*client), GFP_KERNEL); if (!client) { i2c_put_adapter(adap); return -ENOMEM; } snprintf(client->name, I2C_NAME_SIZE, \"i2c-dev %d\", adap->nr); client->adapter = adap; file->private_data = client; Nh\u01b0 v\u1eady, sau qu\u00e1 tr\u00ecnh open() file, i2c-dev \u0111\u00e3 c\u00f3 m\u1ed9t struct i2c_client (tr\u1ecf \u0111\u1ebfn i2c_adapter \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o l\u00fac driver probe). I2c-dev s\u1ebd s\u1eed d\u1ee5ng i2c_client n\u00e0y \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi thi\u1ebft b\u1ecb. Qu\u00e1 tr\u00ecnh truy nh\u1eadp th\u00f4ng qua ph\u01b0\u01a1ng th\u1ee9c IOCTL c\u1ee7a /dev/i2c-%d Set Slave Addr Tr\u01b0\u1edbc khi ti\u1ebfn h\u00e0nh truy nh\u1eadp v\u00e0o m\u1ed9t device tr\u00ean bus i2c, qu\u00e1 tr\u00ecnh \u0111\u1ea7u ti\u00ean ph\u1ea3i ti\u1ebfn h\u00e0nh setup \u0111\u1ecba ch\u1ec9 m\u00e0 device c\u1ea7n truy c\u1eadp \u0111\u1ebfn. Trong ph\u01b0\u01a1ng th\u1ee9c IOCTL c\u1ee7a i2c file cung c\u1ea5p command I2C_SLAVE_FORCE \u0111\u1ec3 g\u00e1n \u0111\u1ecba ch\u1ec9 c\u1ee7a device cho i2c_client struct \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o t\u1eeb qu\u00e1 tr\u00ecnh open file. case I2C_SLAVE_FORCE: if ((arg > 0x3ff) || (((client->flags & I2C_M_TEN) == 0) && arg > 0x7f)) return -EINVAL; if (cmd == I2C_SLAVE && i2cdev_check_addr(client->adapter, arg)) return -EBUSY; /* REVISIT: address could become busy later */ client->addr = arg; return 0; Bi\u1ebfn \u201cclient\u201d l\u00e0 i2c_client \u1ea3o \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t trong ph\u01b0\u01a1ng th\u1ee9c open(). Truy nh\u1eadp \u0111\u1ebfn device Ph\u01b0\u01a1ng th\u1ee9c IOCTL c\u1ee7a i2c file cung c\u1ea5p command I2C_SMBUS v\u00e0 g\u1ecdi \u0111\u1ebfn h\u00e0m i2cdev_ioctl_smbus() \u0111\u1ec3 truy nh\u1eadp \u0111\u1ebfn thi\u1ebft b\u1ecb. B\u1ea3n ch\u1ea5t c\u1ee7a h\u00e0m i2cdev_ioctl_smbus() l\u00e0 g\u1ecdi \u0111\u1ebfn h\u00e0m xfer c\u1ee7a adapter. Tr\u00ean User Space g\u1ecdi \u0111\u1ebfn ph\u01b0\u01a1ng th\u1ee9c ioctl c\u1ee7a /dev/i2c-%d . static inline __s32 i2c_smbus_access(int file, char read_write, __u8 command, int size, union i2c_smbus_data *data) { struct i2c_smbus_ioctl_data args; args.read_write = read_write; args.command = command; args.size = size; args.data = data; return ioctl(file,I2C_SMBUS,&args); } Qu\u00e1 tr\u00ecnh n\u00e0y s\u1ebd g\u1ecdi \u0111\u1ebfn h\u00e0m i2cdev_ioctl_smbus( ) trong i2c-dev trong Kernel Space m\u00e0 b\u1ea3n ch\u1ea5t l\u00e0 g\u1ecdi \u0111\u1ebfn h\u00e0m smbus_xfer() c\u1ee7a i2c_adapter: res = adapter->algo->smbus_xfer(adapter, addr, flags, read_write, command, protocol, data); I2C MUX I2C MUX \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 m\u1edf r\u1ed9ng bus I2C \u0111\u1ec3 c\u00f3 th\u1ec3 h\u1ed7 tr\u1ee3 k\u1ebft n\u1ed1i \u0111\u1ebfn nhi\u1ec1u thi\u1ebft b\u1ecb h\u01a1n. Board ZC706 s\u1eed d\u1ee5ng IC I2C MUX PCA 9548 (H\u00ecnh 1.2). Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n probing c\u00e1c thi\u1ebft b\u1ecb tr\u00ean c\u00e1c k\u00eanh c\u1ee7a PCA 9548 Driver \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong H\u00ecnh 2.7. B\u1ea3n ch\u1ea5t c\u1ee7a qu\u00e1 tr\u00ecnh n\u00e0y l\u00e0 kh\u1edfi t\u1ea1o c\u00e1c i2c_adapter t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c k\u00eanh b\u1eb1ng h\u00e0m i2c_add_mux_adapter() trong i2c-mux module. C\u00e1c i2c_adapter c\u1ee7a c\u00e1c k\u00eanh t\u01b0\u01a1ng \u1ee9ng b\u1ea3n ch\u1ea5t s\u1ebd s\u1eed d\u1ee5ng c\u00e1c h\u00e0m smbus_xfer v\u00e0 master_xfer c\u1ee7a \u201cparent adapter\u201d (ch\u00ednh l\u00e0 adapter \u0111\u00e3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o tr\u1ecdng Xilinx I2C Driver Controller). i2c-mux module s\u1eed d\u1ee5ng struct i2c_mux_priv \u0111\u1ec3 qu\u1ea3n l\u00ed chung c\u00e1c channel. /* multiplexer per channel data */ struct i2c_mux_priv { struct i2c_adapter adap; struct i2c_algorithm algo; struct i2c_adapter *parent; struct device *mux_dev; void *mux_priv; u32 chan_id; int (*select)(struct i2c_adapter *, void *mux_priv, u32 chan_id); int (*deselect)(struct i2c_adapter *, void *mux_priv, u32 chan_id); }; Ngo\u00e0i ra, PCA 9548 cung c\u1ea5p th\u00eam h\u00e0m select v\u00e0 deselect \u0111\u1ec3 ch\u1ecdn k\u00eanh tr\u01b0\u1edbc khi ti\u1ebfn h\u00e0nh truy nh\u1eadp thi\u1ebft b\u1ecb. static int pca954x_select_chan(struct i2c_adapter *adap, void *client, u32 chan); static int pca954x_deselect_mux(struct i2c_adapter *adap, void *client, u32 chan); Refereneces [1] TI SL VA704 \u2013 Application Report \u2013 Understanding the I2C Bus. [2] Xilinx UG954 - ZC706 Evaluation Board for the Zynq-7000 XC7Z045 All Programmable SoC User Guide.","title":"I2C Subsystem"},{"location":"lnx_ldd/i2c/i2c/#i2c-platform","text":"T\u0103ng Thi\u00ean V\u0169, Trung t\u00e2m nghi\u00ean c\u1ee9u c\u00f4ng ngh\u1ec7 m\u1ea1ng Viettel, H\u00e0 N\u1ed9i, 2/2018","title":"I2C Platform"},{"location":"lnx_ldd/i2c/i2c/#introduction","text":"T\u00e0i li\u1ec7u m\u00f4 t\u1ea3 c\u00e1c ki\u1ebfn th\u1ee9c t\u00ecm hi\u1ec3u \u0111\u01b0\u1ee3c v\u1ec1 I2C Platform tr\u00ean Linux \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u1ef1c t\u1ebf tr\u00ean ph\u1ea7n c\u1ee9ng ZC706 v\u00e0 FMCJESDADC1. T\u00e0i li\u1ec7u l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh m\u1edf r\u1ed9ng t\u00ecm hi\u1ec3u d\u1ef1a tr\u00ean y\u00eau c\u1ea7u ban \u0111\u1ea7u c\u1ee7a \u201cB\u00e0i t\u1eadp 6: Vi\u1ebft \u1ee9ng d\u1ee5ng \u0111\u1ecdc/ghi chip EEPROM th\u00f4ng qua bus I2C tr\u00ean KIT ho\u1eb7c RRU\u201d trong ch\u01b0\u01a1ng tr\u00ecnh Linux Training c\u1ee7a ph\u00f2ng Firmware \u2013 VTBR-VTTEK. I2C l\u00e0 m\u1ed9t bus r\u1ea5t ph\u1ed5 bi\u1ebfn \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho giao ti\u1ebfp gi\u1eefa master (m\u1ed9t ho\u1eb7c nhi\u1ec1u) v\u00e0 c\u00e1c thi\u1ebft b\u1ecb slave. H\u00ecnh d\u01b0\u1edbi m\u00f4 t\u1ea3 m\u1ed9t topo c\u01a1 b\u1ea3n k\u1ebft n\u1ed1i c\u00e1c thi\u1ebft b\u1ecb ngo\u1ea1i vi v\u1edbi Microprocessor th\u00f4ng qua bus I2C. Figure. I2C Bus ZC706 board tri\u1ec3n khai hai c\u1ed5ng I2C ( H\u00ecnh ) [2]: PL-Side: c\u1ed5ng IIC_SCL/SDA_MAIN tr\u00ean Bank 10. PS-Side: c\u1ed5ng IIC_SDA/SCL_MAIN tr\u00ean Bank 501. Figure. I2C Bus in ZC706 KIT Hi\u1ec7n t\u1ea1i, tr\u00ean project ph\u1ea7n c\u1ee9ng ZC706 v\u00e0 FMCJESDADC1 (k\u1ebft n\u1ed1i v\u1edbi nhau qua bus FMC-HPC), h\u1ec7 th\u1ed1ng bus I2C \u0111\u01b0\u1ee3c minh h\u1ecda trong s\u01a1 \u0111\u1ed3 H\u00ecnh d\u01b0\u1edbi . FPGA Project cung c\u1ea5p b\u1edfi ADI s\u1eed d\u1ee5ng Xilinx AXI I2C Controller (implement tr\u00ean FPGA) cho m\u1ee5c \u0111\u00edch giao ti\u1ebfp v\u1edbi c\u00e1c thi\u1ebft b\u1ecb I2C tr\u00ean m\u1ea1ch th\u00f4ng qua bus tr\u00ean PL Bank 10. Figure. Bus I2C tr\u00ean ph\u1ea7n c\u1ee9ng ZC706/FMCJESDDAC1","title":"Introduction"},{"location":"lnx_ldd/i2c/i2c/#i2c-platform_1","text":"","title":"I2C Platform"},{"location":"lnx_ldd/i2c/i2c/#cac-thanh-phan-co-ban-cua-i2c-platform","text":"H\u00ecnh 2.1 m\u00f4 t\u1ea3 c\u00e1c th\u00e0nh ph\u1ea7n c\u01a1 b\u1ea3n c\u1ee7a m\u1ed9t i2c platform tr\u00ean Linux. \u1ee8ng d\u1ee5ng i2ctool tr\u00ean t\u1ea7ng User Space t\u01b0\u01a1ng t\u00e1c v\u1edbi c\u00e1c file /dev/i2c-n t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c bus i2c. Th\u00f4ng qua c\u00e1c module i2c-dev , i2c-core v\u00e0 i2c-driver , \u1ee9ng d\u1ee5ng i2ctool c\u00f3 th\u1ec3 truy nh\u1eadp \u0111\u1ebfn c\u00e1c thi\u1ebft b\u1ecb i2c tr\u00ean ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng v\u1edbi bus i2c \u0111\u01b0\u1ee3c \u0111\u1ea1i di\u1ec7n b\u1eb1ng file /dev/i2c-n . Figure. C\u00e1c th\u00e0nh ph\u1ea7n trong I2C Platform Trong ph\u1ea7n ti\u1ebfp theo s\u1ebd t\u00ecm hi\u1ec3u r\u00f5 h\u01a1n c\u00e1c th\u00e0nh ph\u1ea7n trong h\u1ec7 th\u1ed1ng tr\u00ean, c\u0169ng nh\u01b0 c\u00e1ch h\u1ec7 th\u1ed1ng ho\u1ea1t \u0111\u1ed9ng.","title":"C\u00e1c th\u00e0nh ph\u1ea7n c\u01a1 b\u1ea3n c\u1ee7a i2c platform"},{"location":"lnx_ldd/i2c/i2c/#cac-cau-truc-du-lieu-quan-trong","text":"\u0110\u1ec3 c\u00f3 th\u1ec3 qu\u1ea3n l\u00ed v\u00e0 truy c\u1eadp \u0111\u1ebfn c\u00e1c thi\u1ebft b\u1ecb i2c, i2c platform s\u1eed d\u1ee5ng c\u00e1c c\u1ea5u tr\u00fac d\u1eef li\u1ec7u nh\u01b0: i2c_client , i2c_adapter v\u00e0 i2c_algorithm . Trong \u0111\u00f3: i2c_client \u0111\u1ea1i di\u1ec7n cho c\u00e1c thi\u1ebft b\u1ecb tr\u00ean m\u1ed9t bus i2c; i2c_adapter v\u00e0 i2c algorithm cung c\u1ea5p c\u00e1c ph\u01b0\u01a1ng th\u1ee9c (c\u00e1c h\u00e0m master_xfer() , smbus_xfer() ) \u0111\u1ec3 c\u00f3 th\u1ec3 truy nh\u1eadp \u0111\u1ebfn c\u00e1c thi\u1ebft b\u1ecb i2c. M\u1ed1i quan h\u1ec7 gi\u1eefa c\u00e1c struct n\u00e0y th\u1ec3 hi\u1ec7n trong H\u00ecnh 2.2. Figure. C\u00e1c c\u1ea5u tr\u00fac d\u1eef li\u1ec7u quan tr\u1ecdng li\u00ean quan \u0111\u1ebfn i2c platform","title":"C\u00e1c c\u1ea5u tr\u00fac d\u1eef li\u1ec7u quan tr\u1ecdng"},{"location":"lnx_ldd/i2c/i2c/#struct-i2c_client","text":"Tr\u00ean m\u1ed9t bus i2c c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t ho\u1eb7c nhi\u1ec1u thi\u1ebft b\u1ecb, m\u1ed7i thi\u1ebft b\u1ecb tr\u00ean bus s\u1ebd \u0111\u01b0\u1ee3c driver \u0111\u0103ng k\u00ed v\u1edbi h\u1ec7 \u0111i\u1ec1u h\u00e0nh th\u00f4ng qua m\u1ed9t struct i2c_client (H\u00ecnh 2.3). \u0110\u1eb7c tr\u01b0ng nh\u1ea5t c\u1ee7a struct i2c_client n\u00e0y l\u00e0 tr\u01b0\u1eddng addr n\u01a1i ch\u1ee9a \u0111\u1ecba ch\u1ec9 c\u1ee7a thi\u1ebft b\u1ecb tr\u00ean bus i2c \u0111\u1ec3 ph\u00e2n bi\u1ec7t v\u1edbi c\u00e1c thi\u1ebft b\u1ecb kh\u00e1c. struct i2c_client { unsigned short flags; /* div., see below */ unsigned short addr; /* chip address - NOTE: 7bit */ /* addresses are stored in the */ /* _LOWER_ 7 bits */ char name[I2C_NAME_SIZE]; struct i2c_adapter *adapter; /* the adapter we sit on */ struct device dev; /* the device structure */ int irq; /* irq issued by device */ struct list_head detected; #if IS_ENABLED(CONFIG_I2C_SLAVE) i2c_slave_cb_t slave_cb; /* callback for slave mode */ #endif }; i2c_client ch\u1ee9a con tr\u1ecf \u0111\u1ec3 tr\u1ecf \u0111\u1ebfn adapter c\u1ee7a driver t\u01b0\u01a1ng \u1ee9ng v\u1edbi bus i2c.","title":"Struct i2c_client"},{"location":"lnx_ldd/i2c/i2c/#struct-i2c_adapter-va-i2c_algorithm","text":"Driver qu\u1ea3n l\u00ed c\u00e1c thi\u1ebft b\u1ecb th\u00f4ng qua struct i2c_client v\u00e0 cung c\u1ea5p ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 truy c\u1eadp \u0111\u1ebfn c\u00e1c thi\u1ebft b\u1ecb n\u00e0y th\u00f4ng qua struct i2c_adapter . struct i2c_adapter { struct module *owner; unsigned int class; /* classes to allow probing for */ const struct i2c_algorithm *algo; /* the algo to access the bus*/ void *algo_data; /* data fields that are valid for all devices */ const struct i2c_lock_operations *lock_ops; struct rt_mutex bus_lock; struct rt_mutex mux_lock; int timeout; /* in jiffies */ int retries; struct device dev; /* the adapter device */ int nr; char name[48]; \u2026 }; I2c_adapter ch\u1ee9a c\u00e1c th\u00f4ng tin c\u01a1 b\u1ea3n c\u1ee7a bus nh\u01b0 name , nr (number) \u0111\u1ec3 \u0111\u1ecbnh danh bus i2c m\u00e0 driver \u0111ang qu\u1ea3n l\u00ed. Ngo\u00e0i ra, i2c_adapter ch\u1ee9a i2c_algorithm ch\u1ee9a c\u00e1c con tr\u1ecf \u0111\u1ec3 tr\u1ecf \u0111\u1ebfn h\u00e0m truy nh\u1eadp. struct i2c_algorithm { /* If an adapter algorithm can't do I2C-level access, set master_xfer to NULL. If an adapter algorithm can do SMBus access, set smbus_xfer. If set to NULL, the SMBus protocol is simulated using common I2C messages */ /* master_xfer should return the number of messages successfully processed, or a negative value on error */ int (*master_xfer)(struct i2c_adapter *adap, struct i2c_msg *msgs, int num); int (*smbus_xfer) (struct i2c_adapter *adap, u16 addr, unsigned short flags, char read_write, u8 command, int size, union i2c_smbus_data *data); /* To determine what the adapter supports */ u32 (*functionality) (struct i2c_adapter *); #if IS_ENABLED(CONFIG_I2C_SLAVE) int (*reg_slave)(struct i2c_client *client); int (*unreg_slave)(struct i2c_client *client); #endif };","title":"Struct i2c_adapter v\u00e0 i2c_algorithm"},{"location":"lnx_ldd/i2c/i2c/#qua-trinh-driver-probing-mot-thiet-bi","text":"M\u1ed7i I2C Bus Driver \u0111\u1ec1u ch\u1ee9a struct i2c_algorithm qu\u1ea3n l\u00ed c\u00e1c h\u00e0m truy nh\u1eadp \u0111\u1ebfn thi\u1ebft b\u1ecb i2c. V\u00ed d\u1ee5 nh\u01b0 Xilinx I2C Controller Driver : static const struct i2c_algorithm xiic_algorithm = { .master_xfer = xiic_xfer, .functionality = xiic_func, }; Ho\u1eb7c nh\u01b0 Cadence I2C Controller Drivers : static const struct i2c_algorithm cdns_i2c_algo = { .master_xfer = cdns_i2c_master_xfer, .functionality = cdns_i2c_func, }; Qu\u00e1 tr\u00ecnh probing m\u1ed9t thi\u1ebft b\u1ecb v\u1ec1 b\u1ea3n ch\u1ea5t l\u00e0 qu\u00e1 tr\u00ecnh kh\u1edfi t\u1ea1o i2c_adapter (H\u00ecnh 2.6-1) v\u00e0 c\u00e1c i2c_client (H\u00ecnh 2.6-2). V\u00ed d\u1ee5 \u0111\u1ed1i v\u1edbi Xilinx I2C Controller driver, i2c_adapter \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o nh\u01b0 sau: static struct i2c_adapter xiic_adapter = { .owner = THIS_MODULE, .name = DRIVER_NAME, .class = I2C_CLASS_DEPRECATED, .algo = &xiic_algorithm, }; H\u00e0m probe c\u1ee7a driver s\u1ebd g\u1ecdi \u0111\u1ebfn i2c_add_adapter v\u00e0 i2c_new_divice() \u0111\u1ec3 \u0111\u0103ng k\u00ed i2c_adapter v\u00e0 i2c_client v\u00e0o h\u1ec7 th\u1ed1ng. Nh\u01b0 v\u1eady, sau qu\u00e1 tr\u00ecnh driver probing, v\u1edbi m\u1ed7i thi\u1ebft b\u1ecb tr\u00ean bus i2c \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u0103ng k\u00ed v\u00e0 c\u1ea5p ph\u00e1t m\u1ed9t i2c_client t\u01b0\u01a1ng \u1ee9ng, c\u00e1c i2c_client n\u00e0y s\u1eed d\u1ee5ng i2c_adapter \u0111\u1ec3 truy nh\u1eadp v\u00e0o thi\u1ebft b\u1ecb tr\u00ean ph\u1ea7n c\u1ee9ng.","title":"Qu\u00e1 tr\u00ecnh driver probing m\u1ed9t thi\u1ebft b\u1ecb"},{"location":"lnx_ldd/i2c/i2c/#qua-trinh-truy-nhap-mot-thiet-bi-tren-bus-i2c-tu-user-space","text":"","title":"Qu\u00e1 tr\u00ecnh truy nh\u1eadp m\u1ed9t thi\u1ebft b\u1ecb tr\u00ean bus i2c t\u1eeb User Space"},{"location":"lnx_ldd/i2c/i2c/#lay-i2c_adapter","text":"Sau khi i2c driver th\u1ef1c hi\u1ec7n probing thi\u1ebft b\u1ecb, m\u1ed9t i2c_adapter \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t v\u00e0 kh\u1edfi t\u1ea1o. \u0110\u1ec3 ti\u1ebfn h\u00e0nh truy nh\u1eadp \u0111\u01b0\u1ee3c thi\u1ebft b\u1ecb th\u00f4ng qua c\u00e1c ph\u01b0\u01a1ng th\u1ee9c cung c\u1ea5p b\u1edfi adapter, i2c_tool c\u1ea7n l\u1ea5y \u0111\u01b0\u1ee3c i2c_adapter n\u00e0y. Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong khi th\u1ef1c hi\u1ec7n h\u00e0m open() tr\u00ean user space. sprintf(filename, \"/dev/i2c-%d\", i2cbus); file = open(filename, O_RDWR); H\u00e0m open() tr\u00ean User Space s\u1ebd g\u1ecdi \u0111\u1ebfn ph\u01b0\u01a1ng th\u1ee9c open()trong Kernel Space c\u1ee7a file /dev/i2c-%d . Trong ph\u01b0\u01a1ng th\u1ee9c open , h\u00e0m i2c_get_adapter \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ec3 t\u00ecm ki\u1ebfm i2c_adapter . i2c_dev = i2c_dev_get_by_minor(minor); if (!i2c_dev) return -ENODEV; adap = i2c_get_adapter(i2c_dev->adap->nr); if (!adap) return -ENODEV; Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong H\u00ecnh 2.6-4.","title":"L\u1ea5y i2c_adapter"},{"location":"lnx_ldd/i2c/i2c/#khoi-tao-mot-i2c_client-ao","text":"B\u1ea3n ch\u1ea5t m\u1ed7i thi\u1ebft b\u1ecb tr\u00ean bus i2c \u0111\u01b0\u1ee3c qu\u1ea3n l\u00ed b\u1edfi i2c-core th\u00f4ng qua c\u00e1c c\u1ea5u tr\u00fac i2c_client . Nh\u01b0ng trong qu\u00e1 tr\u00ecnh truy nh\u1eadp \u0111\u1ebfn thi\u1ebft b\u1ecb, i2c-dev kh\u00f4ng s\u1eed d\u1ee5ng c\u00e1c i2c_client n\u00e0y m\u00e0 c\u1ea5p ph\u00e1t m\u1ed9t i2c_client m\u1edbi \u0111\u1ec3 tr\u1ecf \u0111\u1ebfn i2c_adapter v\u1eeba \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y \u1edf qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn \u1edf m\u1ee5c 2.3.1. Qu\u00e1 tr\u00ecnh kh\u1edfi t\u1ea1o i2c_client n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong H\u00ecnh 2.6-5. client = kzalloc(sizeof(*client), GFP_KERNEL); if (!client) { i2c_put_adapter(adap); return -ENOMEM; } snprintf(client->name, I2C_NAME_SIZE, \"i2c-dev %d\", adap->nr); client->adapter = adap; file->private_data = client; Nh\u01b0 v\u1eady, sau qu\u00e1 tr\u00ecnh open() file, i2c-dev \u0111\u00e3 c\u00f3 m\u1ed9t struct i2c_client (tr\u1ecf \u0111\u1ebfn i2c_adapter \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o l\u00fac driver probe). I2c-dev s\u1ebd s\u1eed d\u1ee5ng i2c_client n\u00e0y \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi thi\u1ebft b\u1ecb.","title":"Kh\u1edfi t\u1ea1o m\u1ed9t i2c_client \u1ea3o"},{"location":"lnx_ldd/i2c/i2c/#qua-trinh-truy-nhap-thong-qua-phuong-thuc-ioctl-cua-devi2c-d","text":"","title":"Qu\u00e1 tr\u00ecnh truy nh\u1eadp th\u00f4ng qua ph\u01b0\u01a1ng th\u1ee9c IOCTL c\u1ee7a /dev/i2c-%d"},{"location":"lnx_ldd/i2c/i2c/#set-slave-addr","text":"Tr\u01b0\u1edbc khi ti\u1ebfn h\u00e0nh truy nh\u1eadp v\u00e0o m\u1ed9t device tr\u00ean bus i2c, qu\u00e1 tr\u00ecnh \u0111\u1ea7u ti\u00ean ph\u1ea3i ti\u1ebfn h\u00e0nh setup \u0111\u1ecba ch\u1ec9 m\u00e0 device c\u1ea7n truy c\u1eadp \u0111\u1ebfn. Trong ph\u01b0\u01a1ng th\u1ee9c IOCTL c\u1ee7a i2c file cung c\u1ea5p command I2C_SLAVE_FORCE \u0111\u1ec3 g\u00e1n \u0111\u1ecba ch\u1ec9 c\u1ee7a device cho i2c_client struct \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o t\u1eeb qu\u00e1 tr\u00ecnh open file. case I2C_SLAVE_FORCE: if ((arg > 0x3ff) || (((client->flags & I2C_M_TEN) == 0) && arg > 0x7f)) return -EINVAL; if (cmd == I2C_SLAVE && i2cdev_check_addr(client->adapter, arg)) return -EBUSY; /* REVISIT: address could become busy later */ client->addr = arg; return 0; Bi\u1ebfn \u201cclient\u201d l\u00e0 i2c_client \u1ea3o \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t trong ph\u01b0\u01a1ng th\u1ee9c open().","title":"Set Slave Addr"},{"location":"lnx_ldd/i2c/i2c/#truy-nhap-en-device","text":"Ph\u01b0\u01a1ng th\u1ee9c IOCTL c\u1ee7a i2c file cung c\u1ea5p command I2C_SMBUS v\u00e0 g\u1ecdi \u0111\u1ebfn h\u00e0m i2cdev_ioctl_smbus() \u0111\u1ec3 truy nh\u1eadp \u0111\u1ebfn thi\u1ebft b\u1ecb. B\u1ea3n ch\u1ea5t c\u1ee7a h\u00e0m i2cdev_ioctl_smbus() l\u00e0 g\u1ecdi \u0111\u1ebfn h\u00e0m xfer c\u1ee7a adapter. Tr\u00ean User Space g\u1ecdi \u0111\u1ebfn ph\u01b0\u01a1ng th\u1ee9c ioctl c\u1ee7a /dev/i2c-%d . static inline __s32 i2c_smbus_access(int file, char read_write, __u8 command, int size, union i2c_smbus_data *data) { struct i2c_smbus_ioctl_data args; args.read_write = read_write; args.command = command; args.size = size; args.data = data; return ioctl(file,I2C_SMBUS,&args); } Qu\u00e1 tr\u00ecnh n\u00e0y s\u1ebd g\u1ecdi \u0111\u1ebfn h\u00e0m i2cdev_ioctl_smbus( ) trong i2c-dev trong Kernel Space m\u00e0 b\u1ea3n ch\u1ea5t l\u00e0 g\u1ecdi \u0111\u1ebfn h\u00e0m smbus_xfer() c\u1ee7a i2c_adapter: res = adapter->algo->smbus_xfer(adapter, addr, flags, read_write, command, protocol, data);","title":"Truy nh\u1eadp \u0111\u1ebfn device"},{"location":"lnx_ldd/i2c/i2c/#i2c-mux","text":"I2C MUX \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 m\u1edf r\u1ed9ng bus I2C \u0111\u1ec3 c\u00f3 th\u1ec3 h\u1ed7 tr\u1ee3 k\u1ebft n\u1ed1i \u0111\u1ebfn nhi\u1ec1u thi\u1ebft b\u1ecb h\u01a1n. Board ZC706 s\u1eed d\u1ee5ng IC I2C MUX PCA 9548 (H\u00ecnh 1.2). Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n probing c\u00e1c thi\u1ebft b\u1ecb tr\u00ean c\u00e1c k\u00eanh c\u1ee7a PCA 9548 Driver \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong H\u00ecnh 2.7. B\u1ea3n ch\u1ea5t c\u1ee7a qu\u00e1 tr\u00ecnh n\u00e0y l\u00e0 kh\u1edfi t\u1ea1o c\u00e1c i2c_adapter t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c k\u00eanh b\u1eb1ng h\u00e0m i2c_add_mux_adapter() trong i2c-mux module. C\u00e1c i2c_adapter c\u1ee7a c\u00e1c k\u00eanh t\u01b0\u01a1ng \u1ee9ng b\u1ea3n ch\u1ea5t s\u1ebd s\u1eed d\u1ee5ng c\u00e1c h\u00e0m smbus_xfer v\u00e0 master_xfer c\u1ee7a \u201cparent adapter\u201d (ch\u00ednh l\u00e0 adapter \u0111\u00e3 \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o tr\u1ecdng Xilinx I2C Driver Controller). i2c-mux module s\u1eed d\u1ee5ng struct i2c_mux_priv \u0111\u1ec3 qu\u1ea3n l\u00ed chung c\u00e1c channel. /* multiplexer per channel data */ struct i2c_mux_priv { struct i2c_adapter adap; struct i2c_algorithm algo; struct i2c_adapter *parent; struct device *mux_dev; void *mux_priv; u32 chan_id; int (*select)(struct i2c_adapter *, void *mux_priv, u32 chan_id); int (*deselect)(struct i2c_adapter *, void *mux_priv, u32 chan_id); }; Ngo\u00e0i ra, PCA 9548 cung c\u1ea5p th\u00eam h\u00e0m select v\u00e0 deselect \u0111\u1ec3 ch\u1ecdn k\u00eanh tr\u01b0\u1edbc khi ti\u1ebfn h\u00e0nh truy nh\u1eadp thi\u1ebft b\u1ecb. static int pca954x_select_chan(struct i2c_adapter *adap, void *client, u32 chan); static int pca954x_deselect_mux(struct i2c_adapter *adap, void *client, u32 chan);","title":"I2C MUX"},{"location":"lnx_ldd/i2c/i2c/#refereneces","text":"[1] TI SL VA704 \u2013 Application Report \u2013 Understanding the I2C Bus. [2] Xilinx UG954 - ZC706 Evaluation Board for the Zynq-7000 XC7Z045 All Programmable SoC User Guide.","title":"Refereneces"},{"location":"lnx_ldd/jesd/jesd/","text":"","title":"JESD"},{"location":"lnx_ldd/pcie/pcie/","text":"Just PCIe","title":"PCIe"},{"location":"lnx_ldd/platform_dev/platform_device/","text":"","title":"Platform Device"},{"location":"lnx_ldd/spi_dev/spi_advance/","text":"Advanced SPI Extend number of CS signal SPI GPIO","title":"SPI Device Advance"},{"location":"lnx_ldd/spi_dev/spi_advance/#advanced-spi","text":"","title":"Advanced SPI"},{"location":"lnx_ldd/spi_dev/spi_advance/#extend-number-of-cs-signal","text":"","title":"Extend number of CS signal"},{"location":"lnx_ldd/spi_dev/spi_advance/#spi-gpio","text":"","title":"SPI GPIO"},{"location":"lnx_ldd/spi_dev/spi_dev/","text":"SPI Device Driver Hanoi - Tuesday, January 29, 2019 - by VuTang Introduction SPI l\u00e0 chu\u1ea9n giao ti\u1ebfp n\u1ed1i ti\u1ebfp d\u1ef1a tr\u00ean m\u00f4 h\u00ecnh Master-Slaves, trong \u0111\u00f3 m\u1ed9t master c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i \u0111\u1ebfn m\u1ed9t ho\u1eb7c nhi\u1ec1u thi\u1ebft b\u1ecb slave. M\u1ed9t bus SPI th\u00f4ng th\u01b0\u1eddng c\u00f3 4 t\u00edn hi\u1ec7u: SCLK: clock d\u00f9ng cho \u0111\u1ed3ng b\u1ed9 t\u00edn hi\u1ec7u SS: Slave Select, d\u00f9ng \u0111\u1ec3 \u0111\u00e1nh d\u1ea5u thi\u1ebft b\u1ecb Slave n\u00e0o \u0111\u01b0\u1ee3c active \u0111\u1ec3 trao \u0111\u1ed5i d\u1eef li\u1ec7u. Pin n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1ecdi b\u1eb1ng c\u00e1c t\u00ean kh\u00e1c nh\u01b0: CS (chip sellect), LE (Latch Enable), \u2026 T\u00edn hi\u1ec7u SS th\u00f4ng th\u01b0\u1eddng active m\u1ee9c th\u1ea5p. MISO: d\u1eef li\u1ec7u v\u00e0o c\u1ee7a master MOSI: d\u1eef li\u1ec7u ra c\u1ee7a master. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, pin MISO/MOSI c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng chung tr\u00ean m\u1ed9t \u0111\u01b0\u1eddng t\u00edn hi\u1ec7u \u0111\u1ea3m nhi\u1ec7m c\u1ea3 hai ch\u1ee9c n\u0103ng in/out. Figure. SPI bus signals SPI Subsystem in Linux C\u00e1c ki\u1ebfn th\u1ee9c trong technote n\u00e0y \u0111\u01b0\u1ee3c kh\u00e1i qu\u00e1t h\u00f3a sau qu\u00e1 tr\u00ecnh t\u00ecm hi\u1ec3u h\u1ec7 th\u1ed1ng SPI s\u1eed d\u1ee5ng Cadence Controller v\u00e0 SPI-GPIO, do \u0111\u00f3 c\u00f3 th\u1ec3 kh\u00f4ng mang \u0111\u01b0\u1ee3c t\u00ednh t\u1ed5ng qu\u00e1t h\u00f3a l\u00ean to\u00e0n b\u1ed9 c\u00e1c thi\u1ebft b\u1ecb SPI. spi.h : defines important data structures what are used for SPI subsystem. spi.c : SPI core APIs are implemented in this file. SPI Device Driver Model Trong Figure 1 th\u1ec3 hi\u1ec7n m\u00f4 h\u00ecnh c\u1ee7a m\u1ed9t h\u1ec7 th\u1ed1ng SPI trong Linux, bao g\u1ed3m: V\u1ec1 ph\u1ea7n c\u1ee9ng, m\u1ed9t SPI device (slave device) \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u1edbi SPI controller th\u00f4ng qua m\u1ed9t bus v\u1eadt l\u00fd (c\u00e1c t\u00edn hi\u1ec7u c\u1ee7a SPI bus m\u00f4 t\u1ea3 \u1edf ph\u1ea7n tr\u01b0\u1edbc \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf tr\u00ean m\u1ea1ch c\u1ee9ng). M\u1ed9t SPI device \u0111\u01b0\u1ee3c \u0111\u1eb7c m\u00f4 t\u1ea3 b\u1edfi struct spi_device . V\u1ec1 ph\u1ea7n m\u1ec1m, hai th\u1ef1c th\u1ec3 ph\u1ea7n c\u1ee9ng tr\u00ean c\u1ea7n driver \u0111\u1ec3 giao ti\u1ebfp v\u00e0 qu\u1ea3n l\u00fd, driver cho controller ( controller driver ) v\u00e0 driver cho spi device ( protocol driver - this deffinition is used in Linux Kernel official document). Linux Kernel provides a sub-system to manage these device drivers, called SPI-core. All controller driver & protocol driver have to register to Spi-core. C\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u0111\u1eb7c quan tr\u1ecdng nh\u1ea5t cho m\u1ed9t controller l\u00e0 struct spi_master Figure 1. Components in SPI Subsystem SPI Message & Transfer Th\u00f4ng tin trao \u0111\u1ed5i gi\u1eefa controller v\u00e0 device \u0111\u01b0\u1ee3c kh\u00e1i qu\u00e1t h\u00f3a trong Linux SPI subsystem th\u00e0nh d\u1ea1ng c\u00e1c message. C\u00e1c message n\u00e0y \u0111\u01b0\u1ee3c chia nh\u1ecf th\u00e0nh c\u00e1c transfer. Linux cung c\u1ea5p struct spi_message v\u00e0 struct spi_transfer \u0111\u1ec3 m\u00f4 t\u1ea3 c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y. C\u00e1c struct n\u00e0y \u0111\u1ec1u \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong spi.h. Figure. SPI msg has a list of SPI transfer spi_message ch\u1ee9a m\u1ed9t danh s\u00e1ch c\u00e1c transfer: struct spi_message { struct list_head transfers; ... } Qu\u00e1 tr\u00ecnh duy\u1ec7t to\u00e0n b\u1ed9 transfers trong list c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n nh\u01b0 sau: list_for_each_entry(xfer, &msg->transfers, transfer_list) { ... } this function is used in spi_transfer_one_message() - a default implementation of transfer_one_message() in spi.c. See in Kernel Data Structure for more information about Linked List in device driver development. For Engineer So, what is mission for engineer in a SPI system? Ph\u00e1t tri\u1ec3n protocol driver: c\u00e1c \u1ee9ng d\u1ee5ng tr\u00ean t\u1ea7ng \u1ee9ng d\u1ee5ng c\u1ea7n truy c\u1eadp \u0111\u1ebfn th\u00f4ng tin tr\u00ean c\u00e1c SPI Device (v\u00ed d\u1ee5 nh\u01b0 \u0111\u1ecdc gi\u00e1 tr\u1ecb nhi\u1ec7t \u0111\u1ed9 t\u1eeb m\u1ed9t c\u1ea3m bi\u1ebfn, c\u1ea5u h\u00ecnh t\u00edn hi\u1ec7u clock cho m\u1ed9t h\u1ec7 th\u1ed1ng...). Do \u0111\u00f3 nhi\u1ec7m v\u1ee5 \u0111\u1ea7u ti\u00ean c\u1ee7a m\u1ed9t k\u1ef9 s\u01b0 l\u00e0 ph\u00e1t tri\u1ec3n Protocol Driver \u0111\u1ec3 cung c\u1ea5p c\u00e1c API giao ti\u1ebfp \u0111\u1ec3 \u1ee9ng d\u1ee5ng c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn ph\u1ea7n c\u1ee9ng ch\u1ee9a giao di\u1ec7n SPI. Ph\u00e1t tri\u1ec3n controller driver: th\u00f4ng th\u01b0\u1eddng driver c\u1ee7a controller th\u01b0\u1eddng \u0111\u01b0\u1ee3c c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n t\u00edch h\u1ee3p k\u00e8m v\u1edbi controller. Nhi\u1ec7m v\u1ee5 c\u1ee7a k\u1ef9 s\u01b0 trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p l\u00e0 ti\u1ebfn h\u00e0nh thay \u0111\u1ed5i controller driver n\u00e0y cho ph\u00f9 h\u1ee3p v\u1edbi h\u1ec7 th\u1ed1ng hi\u1ec7n t\u1ea1i. Ngo\u00e0i ra, k\u1ef9 s\u01b0 c\u00f3 th\u1ec3 ph\u00e1t tri\u1ec3n th\u00eam c\u00e1c controller driver \u0111\u1ec3 ph\u00f9 h\u1ee3p v\u1edbi y\u00eau c\u1ea7u c\u1ee7a h\u1ec7 th\u1ed1ng. B\u1ed5 sung th\u00eam m\u1ed9t s\u1ed1 ch\u1ee9c n\u0103ng cho SPI-Core: giao di\u1ec7n SPI v\u1edbi c\u00e1c t\u00edn hi\u1ec7u nh\u01b0 m\u1ee5c gi\u1edbi thi\u1ec7u l\u00e0 giao di\u1ec7n chu\u1ea9n, trong khi c\u00e1c bi\u1ebfn t\u1ea5u c\u1ee7a giao di\u1ec7n SPI trong th\u1ef1c t\u1ebf l\u00e0 r\u1ea5t nhi\u1ec1u. Nh\u1eefng bi\u1ebfn t\u1ea5u n\u00e0y y\u00eau c\u1ea7u k\u1ef9 s\u01b0 ph\u1ea3i hi\u1ec3u s\u00e2u v\u1ec1 SPI-Core \u0111\u1ec3 trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p c\u00f3 th\u1ec3 b\u1ed5 sung th\u00eam m\u1ed9t s\u1ed1 API. V\u1ec1 t\u01b0 t\u01b0\u1edfng ph\u00e1t tri\u1ec3n, qu\u00e1 tr\u00ecnh vi\u1ebft m\u1ed9t driver ph\u1ea3i \u0111\u1ed9c l\u1eadp v\u1edbi Linux kernel, do \u0111\u00f3 ho\u1ea1t \u0111\u1ed9ng thay \u0111\u1ed5i v\u00e0 b\u1ed5 sung v\u00e0o SPI-Core n\u00e0y n\u00ean h\u1ea1n ch\u1ebf v\u00ec r\u00f5 r\u00e0ng can thi\u1ec7p v\u00e0o SPI-Core t\u1ee9c l\u00e0 \u00edt nhi\u1ec1u can thi\u1ec7p v\u00e0o Linux Kernel. Protocol Driver C\u00e1c ph\u1ea7n kh\u00e1c c\u1ee7a h\u1ec7 th\u1ed1ng (v\u00ed d\u1ee5 nh\u01b0 c\u00e1c \u1ee9ng d\u1ee5ng tr\u00ean user space, c\u00e1c kernel module kh\u00e1c) s\u1eed d\u1ee5ng c\u00e1c API c\u1ee7a Protocol Driver \u0111\u1ec3 c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi SPI Device. T\u01b0\u1ee3ng t\u1ef1 nh\u01b0 controller driver v\u00e0 platform device driver, spi protocol driver c\u0169ng c\u1ea7n ch\u1ee9a c\u00e1c th\u1ee7 t\u1ee5c c\u01a1 b\u1ea3n c\u1ee7a m\u1ed9t device driver. Khai b\u00e1o spi driver struct spi_driver v\u00e0 \u0111\u0103ng k\u00fd v\u1edbi kernel b\u1eb1ng macro module_spi_driver() . Struct driver n\u00e0y ch\u1ee9a c\u00e1c con tr\u1ecf ch\u1ec9 \u0111\u1ebfn c\u00e1c h\u00e0m kh\u1edfi tao (probe) v\u00e0 h\u00e0m h\u1ee7y (remove) c\u1ee7a driver, c\u00e1c h\u00e0m n\u00e0y sau khi \u0111\u01b0\u1ee3c \u0111\u0103ng k\u00fd s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi Kernel. Khai b\u00e1o id_table struct spi_device_id ch\u1ee9a th\u00f4ng tin c\u1ee7a c\u00e1c device m\u00e0 driver n\u00e0y h\u1ed7 tr\u1ee3. Probing H\u00e0m probing c\u1ee7a Protocol Driver c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng nh\u01b0: L\u1ea5y th\u00f4ng tin c\u1ee7a struct spi_device *spi l\u01b0u tr\u1eef n\u1ed9i b\u1ed9 c\u1ee7a module \u0111\u1ec3 s\u1eed d\u1ee5ng cho c\u00e1c API kh\u00e1c. Th\u1ef1c hi\u1ec7n c\u1ea5u h\u00ecnh ban \u0111\u1ea7u cho spi device. C\u00e1c API kh\u00e1c Gi\u1ed1ng nh\u01b0 c\u00e1c Device Driver kh\u00e1c, protocol driver c\u00f3 ch\u1ee9a c\u00e1c API cung c\u1ea5p c\u00e1c c\u1ed5ng giao ti\u1ebfp v\u1edbi User Space th\u00f4ng quan Device File (/dev/), procfs, sysfs. Th\u00f4ng qua c\u00e1c system call nh\u01b0 IOCTL, read, write..., c\u00e1c \u1ee9ng d\u1ee5ng user space c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn thi\u1ebft b\u1ecb. V\u1ea5n \u0111\u1ec1 \u0111\u1eb7t ra l\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 Protocol Driver c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c \u0111\u1ebfn Spi device? SPI-Write & SPI-Read Protocol uses APIs from SPI-core to communicate with SPI device. These APIs are: int spi_write(struct spi_device *spi, const void *buf, size_t len) Take buffer (with length) as a pointer and then initialize a spi message. This message will be sent to slave device through spi controller (this procedure will be discussed detail in next part). In example below, spi_write is used in a function for writing a value to a register (specified by address) in device. An message with header (0x80), register address (addr) and expected value (val) will be sent to device. int xxx_write(struct spi_device *spi, unsigned addr, unsigned val) { unsigned char txbuf[3]; int rc; txbuf[0] = 0x00; txbuf[1] = addr & 0xFF; txbuf[2] = val; rc = spi_write(spi, txbuf, 3); return rc; } int spi_write_then_read(struct spi_device *spi, const void *txbuf, unsigned n_tx, void *rxbuf, unsigned n_rx) API n\u00e0y th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecdc thanh ghi c\u1ee7a m\u1ed9t thi\u1ebft b\u1ecb. M\u1ed9t b\u1ea3n tin t\u1eeb controller \u0111\u01b0\u1ee3c g\u1eedi cho device v\u1ec1 y\u00eau c\u1ea7u \u0111\u1ecdc thanh ghi, device ph\u1ea3n h\u1ed3i th\u00f4ng tin cho controller v\u00e0 tr\u1ea3 l\u1ea1i k\u1ebft qu\u1ea3 cho protocl driver. Trong v\u00ed d\u1ee5 sau, user buffer c\u00f3 k\u00edch th\u01b0\u1edbc 3 bytes \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 tx_buf v\u00e0 rx_buf (2 bytes \u0111\u1ea7u ti\u00ean \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho tx, 1 byte ti\u1ebfp theo s\u1eed d\u1ee5ng cho rx). Message buf[0:1] \u0111\u01b0\u1ee3c g\u1eedi \u0111i \u0111\u1ebfn device, k\u1ebft qu\u1ea3 tr\u1ea3 l\u1ea1i c\u1ee7a device \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef trong buf[2]. int xxx_read(struct spi_device *spi, unsigned addr) { unsigned char buf[3]; int rc; buf[0] = 0x80; buf[1] = addr & 0xFF; buf[2] = 0x00; rc = spi_write_then_read(spi, buf, 2, &buf[2],1); return (rc < 0 ? rc : buf[2]); } B\u1ea3n ch\u1ea5t ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c API tr\u00ean s\u1ebd \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 \u1edf trong ph\u1ea7n cu\u1ed1i c\u1ee7a t\u00e0i li\u1ec7u n\u00e0y. Controller Driver L\u00e0 kernel module giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi SPI Controller. SPI controller n\u00e0y c\u00f3 th\u1ec3 l\u00e0 Hard-controller (nh\u01b0 controller c\u1ee7a Cadence \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p s\u1eb5n trong ngo\u1ea1i vi c\u1ee7a SoC) ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 l\u00e0 Soft-controller nh\u01b0 SPI-GPIO (Bitbanging). Probing controller Initialize a spi master M\u1ed9t controller s\u1ebd \u0111\u01b0\u1ee3c \u0111\u1eb7c tr\u01b0ng b\u1edfi ki\u1ec3u d\u1eef li\u1ec7u: struct spi_master (\u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong: linux/include/spi/spi.h). Qu\u00e1 tr\u00ecnh khai b\u00e1o controller \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong h\u00e0m probe. struct spi_master *master; /*Allocate spi master*/ master = spi_alloc_master(&spi->dev, sizeof(*spi_ad9250)); if (!master) return -ENOMEM; Set spi master to spi private private data Th\u00f4ng th\u01b0\u1eddng, con tr\u1ecf ch\u1ee9a \u0111\u1ecba ch\u1ec9 c\u1ee7a spi_master s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef trong c\u00e1c private data c\u1ee7a device \u0111\u1ec3 thu\u1eadn ti\u1ec7n cho qu\u00e1 tr\u00ecnh s\u1eed d\u1ee5ng sau n\u00e0y. C\u1ee5 th\u1ec3 c\u00e1c API \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u tr\u1eef master v\u00e0o drvdata nh\u01b0 sau: N\u1ebfu controller l\u00e0 m\u1ed9t platform device pdev : platform_set_drvdata(pdev, master); N\u1ebfu controller l\u00e0 m\u1ed9t spi device spi : spi_set_drvdata(spi, master) Register spi master ret = spi_register_master(master); if (ret) { dev_err(&pdev->dev, \"spi_register_master failed\\n\"); return -1; } Unregister spi master V\u00ed d\u1ee5 \u0111\u1ed1i v\u1edbi tr\u01b0\u1eddng h\u1ee3p controller l\u00e0 spi device: struct spi_master *master = spi_get_drvdata(spi); spi_unregister_master(master); Declare devices in Device Tree Qu\u00e1 tr\u00ecnh khai b\u00e1o m\u1ed9t thi\u1ebft b\u1ecb trong device tree c\u1ea7n l\u01b0u \u00fd \u0111\u1ebfn: thu\u1ed9c t\u00ednh num-cs c\u1ee7m father-node Thu\u1ed9c t\u00ednh spi-max-frequency c\u1ee7a node (why???) spi@e0006000 { compatible = \"xlnx,zynq-spi-r1p6\"; reg = <0xe0006000 0x1000>; status = \"okay\"; interrupt-parent = <0x1>; interrupts = <0x0 0x1a 0x4>; clocks = <0x2 0x19 0x2 0x22>; clock-names = \"ref_clk\", \"pclk\"; #address-cells = <0x1>; #size-cells = <0x0>; spi-fmcjesdadc1@0 { #address-cells = <0x1>; #size-cells = <0x0>; compatible = \"spi-ad9250\"; reg = <0x0>; spi-max-frequency = <0x989680>; ad9517@1 { #clock-cells = <0x1>; compatible = \"ad9517-1\"; reg = <0x1>; spi-max-frequency = <0x989680>; adi,spi-3wire-enable; clocks = <0x4 0x5>; clock-names = \"refclk\", \"clkin\"; clock-output-names = \"out0\", \"out1\", \"out2\", \"out3\", \"out4\", \"out5\", \"out6\", \"out7\"; linux,phandle = <0x15>; phandle = <0x15>; }; ad9250-0@0 { compatible = \"ad9250\"; reg = <0x2>; spi-max-frequency = <0x989680>; clocks = <0x6>; clock-names = \"adc_clk\"; linux,phandle = <0x11>; phandle = <0x11>; }; Struct spi_master V\u1edbi t\u1ea5t c\u1ea3 c\u00e1c spi controller, spi controller driver c\u1ea7n c\u00f3 c\u00e1c h\u00e0m th\u1ee7 t\u1ee5c \u0111\u1ec3 c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi c\u00e1c controller t\u01b0\u01a1ng \u1ee9ng. C\u00e1c h\u00e0m v\u00e0 th\u1ee7 t\u1ee5c n\u00e0y \u0111\u01b0\u1ee3c chu\u1ea9n h\u00f3a v\u00e0 kh\u00e1i qu\u00e1t h\u00f3a th\u00e0nh m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u: struct spi_master. Struct spi_master \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong spi.h . About struct spi_master transfer_one_message : transfer a single message. SPI GPIO (bitbanging) uses this method. transfer_one : transfer a single spi_transfer. SPI Cadence controller uses this method. Register devices from device \u0110\u0103ng k\u00fd c\u00e1c thi\u1ebft b\u1ecb thu\u1ed9c bus SPI m\u00e0 spi master \u0111ang qu\u1ea3n l\u00fd b\u1eb1ng API: static void of_register_spi_devices(struct spi_master *master); API n\u00e0y s\u1ebd duy\u1ec7t h\u1ebft t\u1ea5t c\u1ea3 c\u00e1c child-node xu\u1ea5t hi\u1ec7n tr\u00ean Device Tree v\u00e0 ti\u1ebfn h\u00e0nh th\u00eam thi\u1ebft b\u1ecb \u0111\u00f3 v\u00e0o h\u1ec7 th\u1ed1ng b\u1eb1ng API: spi_add_device Controller Driver, Protocol Driver & SPI-Core M\u1ee5c n\u00e0y m\u00f4 t\u1ea3 qu\u00e1 tr\u00ecnh Protocol Driver th\u00f4ng qua c\u00e1c API \u0111\u1ec3 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean c\u1ee7a Controller Driver. spi_write/spi_read C\u00e1c protocol driver g\u1ecdi \u0111\u1ebfn c\u00e1c API nh\u01b0 spi_write/spi_read/spi_write_then_read , b\u1ea3n ch\u1ea5t trong c\u00e1c API n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n c\u00e1c b\u01b0\u1edbc sau: Khai b\u00e1o v\u00e0 c\u1ea5p ph\u00e1t struct spi_transfer v\u00e0 struct spi_message struct spi_transfer t = { .tx_buf = buf, .len = len, }; struct spi_message m; spi_message_init(&m); spi_message_add_tail(&t, &m); G\u1ecdi \u0111\u1ebfn spi_sync - blocking/synchronous SPI data transfers. spi_sync s\u1ebd g\u1ecdi \u0111\u1ebfn con tr\u1ecf h\u00e0m master->transfer , m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c cung c\u1ea5p b\u1edfi spi_master . master->transfer(spi, message); master->transfer \u0110a ph\u1ea7n trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p, controller trong m\u1ed9t l\u00fac s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c r\u1ea5t nhi\u1ec1u y\u00eau c\u1ea7u trao \u0111\u1ed5i th\u00f4ng tin v\u1edbi c\u00e1c device. Do \u0111\u00f3, \u0111\u1ec3 tr\u00e1nh qu\u00e1 tr\u00ecnh xung \u0111\u1ed9t trong chia s\u1ebb t\u00e0i nguy\u00ean li\u00ean quan \u0111\u1ebfn controller, SPI-core s\u1eed d\u1ee5ng m\u00f4 h\u00ecnh h\u00e0ng \u0111\u1ee3i cho c\u00e1c y\u00eau c\u1ea7u. master->transfer l\u00e0m vi\u1ec7c nh\u01b0 th\u1ebf n\u00e0o trong SPI subsytem? Trong qu\u00e1 tr\u00ecnh \u0111\u0103ng k\u00fd spi_master cho controller driver, API spi_register_master kh\u1edfi t\u1ea1o m\u1ed9t h\u00e0ng \u0111\u1ee3i cho spi_master b\u1eb1ng API spi_master_initialize_queue (h\u00e0m n\u00e0y s\u1ebd g\u1ecdi \u0111\u1ebfn spi_init_queue ). spi_init_queue n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n kh\u1edfi t\u1ea1o m\u1ed9t kernel thread b\u1eb1ng kthread_run . SPI-core s\u1eed d\u1ee5ng kh\u00e1i ni\u1ec7m kworker v\u00e0 kwork \u0111\u1ec3 x\u1eed l\u00fd c\u00e1c master->transfer . master->transfer v\u00e0 kworker/kwork V\u1ec1 t\u01b0 t\u01b0\u1edfng kworker/kwork trong Linux Kernel, m\u1ed9t kworker \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t t\u00e0i nguy\u00ean (CPU) s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec1 ho\u00e0n th\u00e0nh c\u00e1c kwork . Trong SPI-subsystem c\u0169ng ho\u1ea1t \u0111\u1ed9ng v\u1edbi c\u01a1 ch\u1ebf t\u01b0\u01a1ng t\u1ef1, m\u1ed7i master \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o m\u1ed9t struct kthread_worker kworker b\u1eb1ng API init_kthread_worker trong spi_init_queue . spi_init_queue \u0111\u1ed3ng th\u1eddi kh\u1edfi t\u1ea1o m\u1ed9t kernel thread d\u00e0nh ri\u00eang \u0111\u1ec3 th\u1ef1c hi\u1ec7n kthread_worker n\u00e0y. \u0110\u1ed1i v\u1edbi Cadence Controller, h\u00e0m master->transfer \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1eb1ng spi_queued_transfer trong SPI core. Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n c\u1ee7a spi_queued_transfer b\u1ea3n ch\u1ea5t l\u00e0 \u0111\u01b0a spi_message v\u00e0o work queue \u0111\u1ec3 ch\u1edd kwork x\u1eed l\u00fd. Nh\u01b0 v\u1eady, c\u00e1c request message t\u1eeb protocol driver \u0111\u01b0\u1ee3c x\u1ebfp th\u00e0nh h\u00e0ng \u0111\u1ec3 kworker/kwork x\u1eed l\u00fd. B\u1ea3n ch\u1ea5t kwork->fn tr\u1ecf \u0111\u1ebfn spi_pump_messages . spi_pump_messages Th\u1ef1c hi\u1ec7n \"b\u01a1m\" b\u1ea3n tin v\u00e0o SPI bus b\u1eb1ng c\u00e1c g\u1ecdi \u0111\u1ebfn master->transfer_one_message master->transfer_one_message transfer_one_message c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong controller driver. Trong tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong qu\u00e1 tr\u00ecnh khai b\u00e1o spi_master c\u1ee7a controller driver, transfer_one_message \u0111\u01b0\u1ee3c tr\u1ecf \u0111\u1ebfn h\u00e0m spi_transfer_one_massge \u0111\u1ecbnh ngh\u0129a trong SPI core. What's next? spi_master c\u00f3 th\u1ec3 c\u1ea7n cung c\u1ea5p h\u00e0m cho c\u00e1c ph\u01b0\u01a1ng th\u1ee9c nh\u01b0: transfer_one_message , transfer_one . V\u1eady kh\u00e1c nhau gi\u1eefa hai ph\u01b0\u01a1ng th\u1ee9c n\u00e0y l\u00e0 g\u00ec? M\u00f4 t\u1ea3 c\u00e1c tr\u01b0\u1eddng h\u1ee3p thi\u1ebft k\u1ebf SPI bus trong th\u1ef1c t\u1ebf. Refereneces Groking the Linux SPI Subsystem - Embedded Linux Conference 2017 spi/spi-summary - Linux Kernel Document ( link ) The Linux Kernel - SPI","title":"SPI Device"},{"location":"lnx_ldd/spi_dev/spi_dev/#spi-device-driver","text":"Hanoi - Tuesday, January 29, 2019 - by VuTang","title":"SPI Device Driver"},{"location":"lnx_ldd/spi_dev/spi_dev/#introduction","text":"SPI l\u00e0 chu\u1ea9n giao ti\u1ebfp n\u1ed1i ti\u1ebfp d\u1ef1a tr\u00ean m\u00f4 h\u00ecnh Master-Slaves, trong \u0111\u00f3 m\u1ed9t master c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i \u0111\u1ebfn m\u1ed9t ho\u1eb7c nhi\u1ec1u thi\u1ebft b\u1ecb slave. M\u1ed9t bus SPI th\u00f4ng th\u01b0\u1eddng c\u00f3 4 t\u00edn hi\u1ec7u: SCLK: clock d\u00f9ng cho \u0111\u1ed3ng b\u1ed9 t\u00edn hi\u1ec7u SS: Slave Select, d\u00f9ng \u0111\u1ec3 \u0111\u00e1nh d\u1ea5u thi\u1ebft b\u1ecb Slave n\u00e0o \u0111\u01b0\u1ee3c active \u0111\u1ec3 trao \u0111\u1ed5i d\u1eef li\u1ec7u. Pin n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1ecdi b\u1eb1ng c\u00e1c t\u00ean kh\u00e1c nh\u01b0: CS (chip sellect), LE (Latch Enable), \u2026 T\u00edn hi\u1ec7u SS th\u00f4ng th\u01b0\u1eddng active m\u1ee9c th\u1ea5p. MISO: d\u1eef li\u1ec7u v\u00e0o c\u1ee7a master MOSI: d\u1eef li\u1ec7u ra c\u1ee7a master. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p, pin MISO/MOSI c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng chung tr\u00ean m\u1ed9t \u0111\u01b0\u1eddng t\u00edn hi\u1ec7u \u0111\u1ea3m nhi\u1ec7m c\u1ea3 hai ch\u1ee9c n\u0103ng in/out. Figure. SPI bus signals","title":"Introduction"},{"location":"lnx_ldd/spi_dev/spi_dev/#spi-subsystem-in-linux","text":"C\u00e1c ki\u1ebfn th\u1ee9c trong technote n\u00e0y \u0111\u01b0\u1ee3c kh\u00e1i qu\u00e1t h\u00f3a sau qu\u00e1 tr\u00ecnh t\u00ecm hi\u1ec3u h\u1ec7 th\u1ed1ng SPI s\u1eed d\u1ee5ng Cadence Controller v\u00e0 SPI-GPIO, do \u0111\u00f3 c\u00f3 th\u1ec3 kh\u00f4ng mang \u0111\u01b0\u1ee3c t\u00ednh t\u1ed5ng qu\u00e1t h\u00f3a l\u00ean to\u00e0n b\u1ed9 c\u00e1c thi\u1ebft b\u1ecb SPI. spi.h : defines important data structures what are used for SPI subsystem. spi.c : SPI core APIs are implemented in this file.","title":"SPI Subsystem in Linux"},{"location":"lnx_ldd/spi_dev/spi_dev/#spi-device-driver-model","text":"Trong Figure 1 th\u1ec3 hi\u1ec7n m\u00f4 h\u00ecnh c\u1ee7a m\u1ed9t h\u1ec7 th\u1ed1ng SPI trong Linux, bao g\u1ed3m: V\u1ec1 ph\u1ea7n c\u1ee9ng, m\u1ed9t SPI device (slave device) \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u1edbi SPI controller th\u00f4ng qua m\u1ed9t bus v\u1eadt l\u00fd (c\u00e1c t\u00edn hi\u1ec7u c\u1ee7a SPI bus m\u00f4 t\u1ea3 \u1edf ph\u1ea7n tr\u01b0\u1edbc \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf tr\u00ean m\u1ea1ch c\u1ee9ng). M\u1ed9t SPI device \u0111\u01b0\u1ee3c \u0111\u1eb7c m\u00f4 t\u1ea3 b\u1edfi struct spi_device . V\u1ec1 ph\u1ea7n m\u1ec1m, hai th\u1ef1c th\u1ec3 ph\u1ea7n c\u1ee9ng tr\u00ean c\u1ea7n driver \u0111\u1ec3 giao ti\u1ebfp v\u00e0 qu\u1ea3n l\u00fd, driver cho controller ( controller driver ) v\u00e0 driver cho spi device ( protocol driver - this deffinition is used in Linux Kernel official document). Linux Kernel provides a sub-system to manage these device drivers, called SPI-core. All controller driver & protocol driver have to register to Spi-core. C\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u0111\u1eb7c quan tr\u1ecdng nh\u1ea5t cho m\u1ed9t controller l\u00e0 struct spi_master Figure 1. Components in SPI Subsystem","title":"SPI Device Driver Model"},{"location":"lnx_ldd/spi_dev/spi_dev/#spi-message-transfer","text":"Th\u00f4ng tin trao \u0111\u1ed5i gi\u1eefa controller v\u00e0 device \u0111\u01b0\u1ee3c kh\u00e1i qu\u00e1t h\u00f3a trong Linux SPI subsystem th\u00e0nh d\u1ea1ng c\u00e1c message. C\u00e1c message n\u00e0y \u0111\u01b0\u1ee3c chia nh\u1ecf th\u00e0nh c\u00e1c transfer. Linux cung c\u1ea5p struct spi_message v\u00e0 struct spi_transfer \u0111\u1ec3 m\u00f4 t\u1ea3 c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng n\u00e0y. C\u00e1c struct n\u00e0y \u0111\u1ec1u \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong spi.h. Figure. SPI msg has a list of SPI transfer spi_message ch\u1ee9a m\u1ed9t danh s\u00e1ch c\u00e1c transfer: struct spi_message { struct list_head transfers; ... } Qu\u00e1 tr\u00ecnh duy\u1ec7t to\u00e0n b\u1ed9 transfers trong list c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n nh\u01b0 sau: list_for_each_entry(xfer, &msg->transfers, transfer_list) { ... } this function is used in spi_transfer_one_message() - a default implementation of transfer_one_message() in spi.c. See in Kernel Data Structure for more information about Linked List in device driver development.","title":"SPI Message &amp; Transfer"},{"location":"lnx_ldd/spi_dev/spi_dev/#for-engineer","text":"So, what is mission for engineer in a SPI system? Ph\u00e1t tri\u1ec3n protocol driver: c\u00e1c \u1ee9ng d\u1ee5ng tr\u00ean t\u1ea7ng \u1ee9ng d\u1ee5ng c\u1ea7n truy c\u1eadp \u0111\u1ebfn th\u00f4ng tin tr\u00ean c\u00e1c SPI Device (v\u00ed d\u1ee5 nh\u01b0 \u0111\u1ecdc gi\u00e1 tr\u1ecb nhi\u1ec7t \u0111\u1ed9 t\u1eeb m\u1ed9t c\u1ea3m bi\u1ebfn, c\u1ea5u h\u00ecnh t\u00edn hi\u1ec7u clock cho m\u1ed9t h\u1ec7 th\u1ed1ng...). Do \u0111\u00f3 nhi\u1ec7m v\u1ee5 \u0111\u1ea7u ti\u00ean c\u1ee7a m\u1ed9t k\u1ef9 s\u01b0 l\u00e0 ph\u00e1t tri\u1ec3n Protocol Driver \u0111\u1ec3 cung c\u1ea5p c\u00e1c API giao ti\u1ebfp \u0111\u1ec3 \u1ee9ng d\u1ee5ng c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn ph\u1ea7n c\u1ee9ng ch\u1ee9a giao di\u1ec7n SPI. Ph\u00e1t tri\u1ec3n controller driver: th\u00f4ng th\u01b0\u1eddng driver c\u1ee7a controller th\u01b0\u1eddng \u0111\u01b0\u1ee3c c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n t\u00edch h\u1ee3p k\u00e8m v\u1edbi controller. Nhi\u1ec7m v\u1ee5 c\u1ee7a k\u1ef9 s\u01b0 trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p l\u00e0 ti\u1ebfn h\u00e0nh thay \u0111\u1ed5i controller driver n\u00e0y cho ph\u00f9 h\u1ee3p v\u1edbi h\u1ec7 th\u1ed1ng hi\u1ec7n t\u1ea1i. Ngo\u00e0i ra, k\u1ef9 s\u01b0 c\u00f3 th\u1ec3 ph\u00e1t tri\u1ec3n th\u00eam c\u00e1c controller driver \u0111\u1ec3 ph\u00f9 h\u1ee3p v\u1edbi y\u00eau c\u1ea7u c\u1ee7a h\u1ec7 th\u1ed1ng. B\u1ed5 sung th\u00eam m\u1ed9t s\u1ed1 ch\u1ee9c n\u0103ng cho SPI-Core: giao di\u1ec7n SPI v\u1edbi c\u00e1c t\u00edn hi\u1ec7u nh\u01b0 m\u1ee5c gi\u1edbi thi\u1ec7u l\u00e0 giao di\u1ec7n chu\u1ea9n, trong khi c\u00e1c bi\u1ebfn t\u1ea5u c\u1ee7a giao di\u1ec7n SPI trong th\u1ef1c t\u1ebf l\u00e0 r\u1ea5t nhi\u1ec1u. Nh\u1eefng bi\u1ebfn t\u1ea5u n\u00e0y y\u00eau c\u1ea7u k\u1ef9 s\u01b0 ph\u1ea3i hi\u1ec3u s\u00e2u v\u1ec1 SPI-Core \u0111\u1ec3 trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p c\u00f3 th\u1ec3 b\u1ed5 sung th\u00eam m\u1ed9t s\u1ed1 API. V\u1ec1 t\u01b0 t\u01b0\u1edfng ph\u00e1t tri\u1ec3n, qu\u00e1 tr\u00ecnh vi\u1ebft m\u1ed9t driver ph\u1ea3i \u0111\u1ed9c l\u1eadp v\u1edbi Linux kernel, do \u0111\u00f3 ho\u1ea1t \u0111\u1ed9ng thay \u0111\u1ed5i v\u00e0 b\u1ed5 sung v\u00e0o SPI-Core n\u00e0y n\u00ean h\u1ea1n ch\u1ebf v\u00ec r\u00f5 r\u00e0ng can thi\u1ec7p v\u00e0o SPI-Core t\u1ee9c l\u00e0 \u00edt nhi\u1ec1u can thi\u1ec7p v\u00e0o Linux Kernel.","title":"For Engineer"},{"location":"lnx_ldd/spi_dev/spi_dev/#protocol-driver","text":"C\u00e1c ph\u1ea7n kh\u00e1c c\u1ee7a h\u1ec7 th\u1ed1ng (v\u00ed d\u1ee5 nh\u01b0 c\u00e1c \u1ee9ng d\u1ee5ng tr\u00ean user space, c\u00e1c kernel module kh\u00e1c) s\u1eed d\u1ee5ng c\u00e1c API c\u1ee7a Protocol Driver \u0111\u1ec3 c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi SPI Device. T\u01b0\u1ee3ng t\u1ef1 nh\u01b0 controller driver v\u00e0 platform device driver, spi protocol driver c\u0169ng c\u1ea7n ch\u1ee9a c\u00e1c th\u1ee7 t\u1ee5c c\u01a1 b\u1ea3n c\u1ee7a m\u1ed9t device driver. Khai b\u00e1o spi driver struct spi_driver v\u00e0 \u0111\u0103ng k\u00fd v\u1edbi kernel b\u1eb1ng macro module_spi_driver() . Struct driver n\u00e0y ch\u1ee9a c\u00e1c con tr\u1ecf ch\u1ec9 \u0111\u1ebfn c\u00e1c h\u00e0m kh\u1edfi tao (probe) v\u00e0 h\u00e0m h\u1ee7y (remove) c\u1ee7a driver, c\u00e1c h\u00e0m n\u00e0y sau khi \u0111\u01b0\u1ee3c \u0111\u0103ng k\u00fd s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi Kernel. Khai b\u00e1o id_table struct spi_device_id ch\u1ee9a th\u00f4ng tin c\u1ee7a c\u00e1c device m\u00e0 driver n\u00e0y h\u1ed7 tr\u1ee3.","title":"Protocol Driver"},{"location":"lnx_ldd/spi_dev/spi_dev/#probing","text":"H\u00e0m probing c\u1ee7a Protocol Driver c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng nh\u01b0: L\u1ea5y th\u00f4ng tin c\u1ee7a struct spi_device *spi l\u01b0u tr\u1eef n\u1ed9i b\u1ed9 c\u1ee7a module \u0111\u1ec3 s\u1eed d\u1ee5ng cho c\u00e1c API kh\u00e1c. Th\u1ef1c hi\u1ec7n c\u1ea5u h\u00ecnh ban \u0111\u1ea7u cho spi device.","title":"Probing"},{"location":"lnx_ldd/spi_dev/spi_dev/#cac-api-khac","text":"Gi\u1ed1ng nh\u01b0 c\u00e1c Device Driver kh\u00e1c, protocol driver c\u00f3 ch\u1ee9a c\u00e1c API cung c\u1ea5p c\u00e1c c\u1ed5ng giao ti\u1ebfp v\u1edbi User Space th\u00f4ng quan Device File (/dev/), procfs, sysfs. Th\u00f4ng qua c\u00e1c system call nh\u01b0 IOCTL, read, write..., c\u00e1c \u1ee9ng d\u1ee5ng user space c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u1ebfn thi\u1ebft b\u1ecb. V\u1ea5n \u0111\u1ec1 \u0111\u1eb7t ra l\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 Protocol Driver c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c \u0111\u1ebfn Spi device?","title":"C\u00e1c API kh\u00e1c"},{"location":"lnx_ldd/spi_dev/spi_dev/#spi-write-spi-read","text":"Protocol uses APIs from SPI-core to communicate with SPI device. These APIs are: int spi_write(struct spi_device *spi, const void *buf, size_t len) Take buffer (with length) as a pointer and then initialize a spi message. This message will be sent to slave device through spi controller (this procedure will be discussed detail in next part). In example below, spi_write is used in a function for writing a value to a register (specified by address) in device. An message with header (0x80), register address (addr) and expected value (val) will be sent to device. int xxx_write(struct spi_device *spi, unsigned addr, unsigned val) { unsigned char txbuf[3]; int rc; txbuf[0] = 0x00; txbuf[1] = addr & 0xFF; txbuf[2] = val; rc = spi_write(spi, txbuf, 3); return rc; } int spi_write_then_read(struct spi_device *spi, const void *txbuf, unsigned n_tx, void *rxbuf, unsigned n_rx) API n\u00e0y th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecdc thanh ghi c\u1ee7a m\u1ed9t thi\u1ebft b\u1ecb. M\u1ed9t b\u1ea3n tin t\u1eeb controller \u0111\u01b0\u1ee3c g\u1eedi cho device v\u1ec1 y\u00eau c\u1ea7u \u0111\u1ecdc thanh ghi, device ph\u1ea3n h\u1ed3i th\u00f4ng tin cho controller v\u00e0 tr\u1ea3 l\u1ea1i k\u1ebft qu\u1ea3 cho protocl driver. Trong v\u00ed d\u1ee5 sau, user buffer c\u00f3 k\u00edch th\u01b0\u1edbc 3 bytes \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 tx_buf v\u00e0 rx_buf (2 bytes \u0111\u1ea7u ti\u00ean \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho tx, 1 byte ti\u1ebfp theo s\u1eed d\u1ee5ng cho rx). Message buf[0:1] \u0111\u01b0\u1ee3c g\u1eedi \u0111i \u0111\u1ebfn device, k\u1ebft qu\u1ea3 tr\u1ea3 l\u1ea1i c\u1ee7a device \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef trong buf[2]. int xxx_read(struct spi_device *spi, unsigned addr) { unsigned char buf[3]; int rc; buf[0] = 0x80; buf[1] = addr & 0xFF; buf[2] = 0x00; rc = spi_write_then_read(spi, buf, 2, &buf[2],1); return (rc < 0 ? rc : buf[2]); } B\u1ea3n ch\u1ea5t ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c API tr\u00ean s\u1ebd \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 \u1edf trong ph\u1ea7n cu\u1ed1i c\u1ee7a t\u00e0i li\u1ec7u n\u00e0y.","title":"SPI-Write &amp; SPI-Read"},{"location":"lnx_ldd/spi_dev/spi_dev/#controller-driver","text":"L\u00e0 kernel module giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi SPI Controller. SPI controller n\u00e0y c\u00f3 th\u1ec3 l\u00e0 Hard-controller (nh\u01b0 controller c\u1ee7a Cadence \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p s\u1eb5n trong ngo\u1ea1i vi c\u1ee7a SoC) ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 l\u00e0 Soft-controller nh\u01b0 SPI-GPIO (Bitbanging).","title":"Controller Driver"},{"location":"lnx_ldd/spi_dev/spi_dev/#probing-controller","text":"Initialize a spi master M\u1ed9t controller s\u1ebd \u0111\u01b0\u1ee3c \u0111\u1eb7c tr\u01b0ng b\u1edfi ki\u1ec3u d\u1eef li\u1ec7u: struct spi_master (\u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong: linux/include/spi/spi.h). Qu\u00e1 tr\u00ecnh khai b\u00e1o controller \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong h\u00e0m probe. struct spi_master *master; /*Allocate spi master*/ master = spi_alloc_master(&spi->dev, sizeof(*spi_ad9250)); if (!master) return -ENOMEM; Set spi master to spi private private data Th\u00f4ng th\u01b0\u1eddng, con tr\u1ecf ch\u1ee9a \u0111\u1ecba ch\u1ec9 c\u1ee7a spi_master s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef trong c\u00e1c private data c\u1ee7a device \u0111\u1ec3 thu\u1eadn ti\u1ec7n cho qu\u00e1 tr\u00ecnh s\u1eed d\u1ee5ng sau n\u00e0y. C\u1ee5 th\u1ec3 c\u00e1c API \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u tr\u1eef master v\u00e0o drvdata nh\u01b0 sau: N\u1ebfu controller l\u00e0 m\u1ed9t platform device pdev : platform_set_drvdata(pdev, master); N\u1ebfu controller l\u00e0 m\u1ed9t spi device spi : spi_set_drvdata(spi, master) Register spi master ret = spi_register_master(master); if (ret) { dev_err(&pdev->dev, \"spi_register_master failed\\n\"); return -1; } Unregister spi master V\u00ed d\u1ee5 \u0111\u1ed1i v\u1edbi tr\u01b0\u1eddng h\u1ee3p controller l\u00e0 spi device: struct spi_master *master = spi_get_drvdata(spi); spi_unregister_master(master); Declare devices in Device Tree Qu\u00e1 tr\u00ecnh khai b\u00e1o m\u1ed9t thi\u1ebft b\u1ecb trong device tree c\u1ea7n l\u01b0u \u00fd \u0111\u1ebfn: thu\u1ed9c t\u00ednh num-cs c\u1ee7m father-node Thu\u1ed9c t\u00ednh spi-max-frequency c\u1ee7a node (why???) spi@e0006000 { compatible = \"xlnx,zynq-spi-r1p6\"; reg = <0xe0006000 0x1000>; status = \"okay\"; interrupt-parent = <0x1>; interrupts = <0x0 0x1a 0x4>; clocks = <0x2 0x19 0x2 0x22>; clock-names = \"ref_clk\", \"pclk\"; #address-cells = <0x1>; #size-cells = <0x0>; spi-fmcjesdadc1@0 { #address-cells = <0x1>; #size-cells = <0x0>; compatible = \"spi-ad9250\"; reg = <0x0>; spi-max-frequency = <0x989680>; ad9517@1 { #clock-cells = <0x1>; compatible = \"ad9517-1\"; reg = <0x1>; spi-max-frequency = <0x989680>; adi,spi-3wire-enable; clocks = <0x4 0x5>; clock-names = \"refclk\", \"clkin\"; clock-output-names = \"out0\", \"out1\", \"out2\", \"out3\", \"out4\", \"out5\", \"out6\", \"out7\"; linux,phandle = <0x15>; phandle = <0x15>; }; ad9250-0@0 { compatible = \"ad9250\"; reg = <0x2>; spi-max-frequency = <0x989680>; clocks = <0x6>; clock-names = \"adc_clk\"; linux,phandle = <0x11>; phandle = <0x11>; };","title":"Probing controller"},{"location":"lnx_ldd/spi_dev/spi_dev/#struct-spi_master","text":"V\u1edbi t\u1ea5t c\u1ea3 c\u00e1c spi controller, spi controller driver c\u1ea7n c\u00f3 c\u00e1c h\u00e0m th\u1ee7 t\u1ee5c \u0111\u1ec3 c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi c\u00e1c controller t\u01b0\u01a1ng \u1ee9ng. C\u00e1c h\u00e0m v\u00e0 th\u1ee7 t\u1ee5c n\u00e0y \u0111\u01b0\u1ee3c chu\u1ea9n h\u00f3a v\u00e0 kh\u00e1i qu\u00e1t h\u00f3a th\u00e0nh m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u: struct spi_master. Struct spi_master \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong spi.h . About struct spi_master transfer_one_message : transfer a single message. SPI GPIO (bitbanging) uses this method. transfer_one : transfer a single spi_transfer. SPI Cadence controller uses this method. Register devices from device \u0110\u0103ng k\u00fd c\u00e1c thi\u1ebft b\u1ecb thu\u1ed9c bus SPI m\u00e0 spi master \u0111ang qu\u1ea3n l\u00fd b\u1eb1ng API: static void of_register_spi_devices(struct spi_master *master); API n\u00e0y s\u1ebd duy\u1ec7t h\u1ebft t\u1ea5t c\u1ea3 c\u00e1c child-node xu\u1ea5t hi\u1ec7n tr\u00ean Device Tree v\u00e0 ti\u1ebfn h\u00e0nh th\u00eam thi\u1ebft b\u1ecb \u0111\u00f3 v\u00e0o h\u1ec7 th\u1ed1ng b\u1eb1ng API: spi_add_device","title":"Struct spi_master"},{"location":"lnx_ldd/spi_dev/spi_dev/#controller-driver-protocol-driver-spi-core","text":"M\u1ee5c n\u00e0y m\u00f4 t\u1ea3 qu\u00e1 tr\u00ecnh Protocol Driver th\u00f4ng qua c\u00e1c API \u0111\u1ec3 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean c\u1ee7a Controller Driver.","title":"Controller Driver, Protocol Driver &amp; SPI-Core"},{"location":"lnx_ldd/spi_dev/spi_dev/#spi_writespi_read","text":"C\u00e1c protocol driver g\u1ecdi \u0111\u1ebfn c\u00e1c API nh\u01b0 spi_write/spi_read/spi_write_then_read , b\u1ea3n ch\u1ea5t trong c\u00e1c API n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n c\u00e1c b\u01b0\u1edbc sau: Khai b\u00e1o v\u00e0 c\u1ea5p ph\u00e1t struct spi_transfer v\u00e0 struct spi_message struct spi_transfer t = { .tx_buf = buf, .len = len, }; struct spi_message m; spi_message_init(&m); spi_message_add_tail(&t, &m); G\u1ecdi \u0111\u1ebfn spi_sync - blocking/synchronous SPI data transfers. spi_sync s\u1ebd g\u1ecdi \u0111\u1ebfn con tr\u1ecf h\u00e0m master->transfer , m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c cung c\u1ea5p b\u1edfi spi_master . master->transfer(spi, message);","title":"spi_write/spi_read"},{"location":"lnx_ldd/spi_dev/spi_dev/#master-transfer","text":"\u0110a ph\u1ea7n trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p, controller trong m\u1ed9t l\u00fac s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c r\u1ea5t nhi\u1ec1u y\u00eau c\u1ea7u trao \u0111\u1ed5i th\u00f4ng tin v\u1edbi c\u00e1c device. Do \u0111\u00f3, \u0111\u1ec3 tr\u00e1nh qu\u00e1 tr\u00ecnh xung \u0111\u1ed9t trong chia s\u1ebb t\u00e0i nguy\u00ean li\u00ean quan \u0111\u1ebfn controller, SPI-core s\u1eed d\u1ee5ng m\u00f4 h\u00ecnh h\u00e0ng \u0111\u1ee3i cho c\u00e1c y\u00eau c\u1ea7u. master->transfer l\u00e0m vi\u1ec7c nh\u01b0 th\u1ebf n\u00e0o trong SPI subsytem? Trong qu\u00e1 tr\u00ecnh \u0111\u0103ng k\u00fd spi_master cho controller driver, API spi_register_master kh\u1edfi t\u1ea1o m\u1ed9t h\u00e0ng \u0111\u1ee3i cho spi_master b\u1eb1ng API spi_master_initialize_queue (h\u00e0m n\u00e0y s\u1ebd g\u1ecdi \u0111\u1ebfn spi_init_queue ). spi_init_queue n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n kh\u1edfi t\u1ea1o m\u1ed9t kernel thread b\u1eb1ng kthread_run . SPI-core s\u1eed d\u1ee5ng kh\u00e1i ni\u1ec7m kworker v\u00e0 kwork \u0111\u1ec3 x\u1eed l\u00fd c\u00e1c master->transfer . master->transfer v\u00e0 kworker/kwork V\u1ec1 t\u01b0 t\u01b0\u1edfng kworker/kwork trong Linux Kernel, m\u1ed9t kworker \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t t\u00e0i nguy\u00ean (CPU) s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec1 ho\u00e0n th\u00e0nh c\u00e1c kwork . Trong SPI-subsystem c\u0169ng ho\u1ea1t \u0111\u1ed9ng v\u1edbi c\u01a1 ch\u1ebf t\u01b0\u01a1ng t\u1ef1, m\u1ed7i master \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o m\u1ed9t struct kthread_worker kworker b\u1eb1ng API init_kthread_worker trong spi_init_queue . spi_init_queue \u0111\u1ed3ng th\u1eddi kh\u1edfi t\u1ea1o m\u1ed9t kernel thread d\u00e0nh ri\u00eang \u0111\u1ec3 th\u1ef1c hi\u1ec7n kthread_worker n\u00e0y. \u0110\u1ed1i v\u1edbi Cadence Controller, h\u00e0m master->transfer \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1eb1ng spi_queued_transfer trong SPI core. Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n c\u1ee7a spi_queued_transfer b\u1ea3n ch\u1ea5t l\u00e0 \u0111\u01b0a spi_message v\u00e0o work queue \u0111\u1ec3 ch\u1edd kwork x\u1eed l\u00fd. Nh\u01b0 v\u1eady, c\u00e1c request message t\u1eeb protocol driver \u0111\u01b0\u1ee3c x\u1ebfp th\u00e0nh h\u00e0ng \u0111\u1ec3 kworker/kwork x\u1eed l\u00fd. B\u1ea3n ch\u1ea5t kwork->fn tr\u1ecf \u0111\u1ebfn spi_pump_messages . spi_pump_messages Th\u1ef1c hi\u1ec7n \"b\u01a1m\" b\u1ea3n tin v\u00e0o SPI bus b\u1eb1ng c\u00e1c g\u1ecdi \u0111\u1ebfn master->transfer_one_message master->transfer_one_message transfer_one_message c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong controller driver. Trong tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong qu\u00e1 tr\u00ecnh khai b\u00e1o spi_master c\u1ee7a controller driver, transfer_one_message \u0111\u01b0\u1ee3c tr\u1ecf \u0111\u1ebfn h\u00e0m spi_transfer_one_massge \u0111\u1ecbnh ngh\u0129a trong SPI core.","title":"master-&gt;transfer"},{"location":"lnx_ldd/spi_dev/spi_dev/#whats-next","text":"spi_master c\u00f3 th\u1ec3 c\u1ea7n cung c\u1ea5p h\u00e0m cho c\u00e1c ph\u01b0\u01a1ng th\u1ee9c nh\u01b0: transfer_one_message , transfer_one . V\u1eady kh\u00e1c nhau gi\u1eefa hai ph\u01b0\u01a1ng th\u1ee9c n\u00e0y l\u00e0 g\u00ec? M\u00f4 t\u1ea3 c\u00e1c tr\u01b0\u1eddng h\u1ee3p thi\u1ebft k\u1ebf SPI bus trong th\u1ef1c t\u1ebf.","title":"What's next?"},{"location":"lnx_ldd/spi_dev/spi_dev/#refereneces","text":"Groking the Linux SPI Subsystem - Embedded Linux Conference 2017 spi/spi-summary - Linux Kernel Document ( link ) The Linux Kernel - SPI","title":"Refereneces"},{"location":"lnx_ldd/uart/uart/","text":"UART: Serial programming Userspace Referring to: Serial Programming HOWTO (online article) - www.tpld.org Serial HOWTO - www.tpld.org Chapter 62 - Terminals - The Linux Programming Interface (book) Serial Programming Guide for POSIX Compliant Operating Systems (online article) - Michael R. Sweet for detail intructions when programing with serial port. A serial port configuration is stored in a structure struct termios , which defined in <asm/termbits.h> . Userspace program interfaces with serial port via device file ( /dev/ttyS0 for example). When a new session with a serial port is created, current configuration will be saved in struct termios oldtio , oldtio is get from device by API: int tcgetattr(int fd, struct termios *termios_p); A new configuration struct termios newtio is created and applied to device by API: int tcsetattr(int fd, int optional_actions, const struct termios *termios_p); After applying compatible configuration, userspace application can communicate with serial port by calling read and write system call with file description fd . Kernelspace Referring to: Linux serial drivers - bootlin.com - said about how to write an UART device driver. To be properly intergrated in a Linux system, serial ports like UART must be visible as TTY devices from user space application. Therefore, the serial driver must be part of the kernle TTY subsystem.","title":"UART"},{"location":"lnx_ldd/uart/uart/#uart-serial-programming","text":"","title":"UART: Serial programming"},{"location":"lnx_ldd/uart/uart/#userspace","text":"Referring to: Serial Programming HOWTO (online article) - www.tpld.org Serial HOWTO - www.tpld.org Chapter 62 - Terminals - The Linux Programming Interface (book) Serial Programming Guide for POSIX Compliant Operating Systems (online article) - Michael R. Sweet for detail intructions when programing with serial port. A serial port configuration is stored in a structure struct termios , which defined in <asm/termbits.h> . Userspace program interfaces with serial port via device file ( /dev/ttyS0 for example). When a new session with a serial port is created, current configuration will be saved in struct termios oldtio , oldtio is get from device by API: int tcgetattr(int fd, struct termios *termios_p); A new configuration struct termios newtio is created and applied to device by API: int tcsetattr(int fd, int optional_actions, const struct termios *termios_p); After applying compatible configuration, userspace application can communicate with serial port by calling read and write system call with file description fd .","title":"Userspace"},{"location":"lnx_ldd/uart/uart/#kernelspace","text":"Referring to: Linux serial drivers - bootlin.com - said about how to write an UART device driver. To be properly intergrated in a Linux system, serial ports like UART must be visible as TTY devices from user space application. Therefore, the serial driver must be part of the kernle TTY subsystem.","title":"Kernelspace"},{"location":"programming/dsg_patterns/","text":"In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. Software Design Patterns https://en.wikipedia.org/wiki/Software_design_pattern Event Handling Reactor The Reactor pattern allows event-driven applications to demultiplex and dispatch synchronously and serially service requests that are received simultaneously from one or more clients. Preactor The Proactor pattern allows event-driven applications to demultiplex and dispatch service requests in an efficient asynchronous way . Concurent Design Pattern Refer Vol2 https://github.com/ppizarro/coursera/tree/master/POSA/Books/Pattern-Oriented%20Software%20Architecture Active Object Lavender R. Greg, Schmidt Douglas C, \"Active Object - an Object Behavioral Pattern for Concurrent Programming\" Thread Pool also called a replicated workers or worker-crew model Messaging System","title":"Design Patterns"},{"location":"programming/dsg_patterns/#software-design-patterns","text":"https://en.wikipedia.org/wiki/Software_design_pattern","title":"Software Design Patterns"},{"location":"programming/dsg_patterns/#event-handling","text":"","title":"Event Handling"},{"location":"programming/dsg_patterns/#reactor","text":"The Reactor pattern allows event-driven applications to demultiplex and dispatch synchronously and serially service requests that are received simultaneously from one or more clients.","title":"Reactor"},{"location":"programming/dsg_patterns/#preactor","text":"The Proactor pattern allows event-driven applications to demultiplex and dispatch service requests in an efficient asynchronous way .","title":"Preactor"},{"location":"programming/dsg_patterns/#concurent-design-pattern","text":"Refer Vol2 https://github.com/ppizarro/coursera/tree/master/POSA/Books/Pattern-Oriented%20Software%20Architecture","title":"Concurent Design Pattern"},{"location":"programming/dsg_patterns/#active-object","text":"Lavender R. Greg, Schmidt Douglas C, \"Active Object - an Object Behavioral Pattern for Concurrent Programming\"","title":"Active Object"},{"location":"programming/dsg_patterns/#thread-pool","text":"also called a replicated workers or worker-crew model","title":"Thread Pool"},{"location":"programming/dsg_patterns/#messaging-system","text":"","title":"Messaging System"},{"location":"programming/multi-threaded-programming/","text":"Oracel multi-threaded programming guide https://docs.oracle.com/cd/E19253-01/816-5137/index.html","title":"Multi-threads"},{"location":"programming/C/cprogramming/","text":"Programming with C What is C? C was originally developed at Bell Labs by Dennis Ritchie, between 1972 and 1973. C has been standardized by the American National Standards Institute (ANSI) since 1989 (see ANSI C) and subsequently by the International Organization for Standardization (ISO). ANSI C (C89) ISO/IEC 9899:1990 (C90) In 1983, the American National Standards Institute (ANSI) formed a committee, X3J11, to establish a standard specification of C In 1990, the ANSI C standard (with formatting changes) was adopted by the International Organization for Standardization (ISO) as ISO/IEC 9899:1990, which is sometimes called C90. Therefore, the terms \"C89\" and \"C90\" refer to the same programming language. References [1] ISO/IEC 9899:201x - Programming languages C - Committee Draft \u2014 December 2, 2010 C Standard Library - libc C standard library (also called the ISO C library) provides macros, type definitions and functions for tasks such as string handling, mathematical computations, input/output processing, memory management, and several other operating system services. By far the most widely used C library on Linux is the GNU C Library often referred to as glibc. GNU C Library - glibc The GNU C Library , commonly known as glibc, is the GNU Project's implementation of the C standard library. It was started in the early 1990s by the Free Software Foundation (FSF) for their GNU operating system. The GNU C Library is a wrapper around the system calls of the Linux kernel.","title":"C"},{"location":"programming/C/cprogramming/#programming-with-c","text":"","title":"Programming with C"},{"location":"programming/C/cprogramming/#what-is-c","text":"C was originally developed at Bell Labs by Dennis Ritchie, between 1972 and 1973. C has been standardized by the American National Standards Institute (ANSI) since 1989 (see ANSI C) and subsequently by the International Organization for Standardization (ISO). ANSI C (C89) ISO/IEC 9899:1990 (C90) In 1983, the American National Standards Institute (ANSI) formed a committee, X3J11, to establish a standard specification of C In 1990, the ANSI C standard (with formatting changes) was adopted by the International Organization for Standardization (ISO) as ISO/IEC 9899:1990, which is sometimes called C90. Therefore, the terms \"C89\" and \"C90\" refer to the same programming language. References [1] ISO/IEC 9899:201x - Programming languages C - Committee Draft \u2014 December 2, 2010","title":"What is C?"},{"location":"programming/C/cprogramming/#c-standard-library-libc","text":"C standard library (also called the ISO C library) provides macros, type definitions and functions for tasks such as string handling, mathematical computations, input/output processing, memory management, and several other operating system services. By far the most widely used C library on Linux is the GNU C Library often referred to as glibc.","title":"C Standard Library - libc"},{"location":"programming/C/cprogramming/#gnu-c-library-glibc","text":"The GNU C Library , commonly known as glibc, is the GNU Project's implementation of the C standard library. It was started in the early 1990s by the Free Software Foundation (FSF) for their GNU operating system. The GNU C Library is a wrapper around the system calls of the Linux kernel.","title":"GNU C Library - glibc"},{"location":"programming/dsa/alg/","text":"Algorithm Sorting https://www.geeksforgeeks.org/sorting-algorithms/ Find and Replace Bubble sort Worst and Average Case Time Complexity : O(n n). Worst case occurs when array is reverse sorted. Best Case Time Complexity : O(n). Best case occurs when array is already sorted. Auxiliary Space *: O(1) D\u01b0\u1edbi \u0111\u00e2y l\u00e0 minh h\u1ecda qu\u00e1 thay \u0111\u1ed5i c\u1ee7a m\u1ed9t m\u1ea3ng d\u1eef li\u1ec7u khi \u00e1p d\u1ee5ng gi\u1ea3i thu\u1eadt \"Bubble sort\". Nh\u1eadn x\u00e9t, \u0111\u1ed1i v\u1edbi m\u1ed9t m\u1ea3ng N ph\u1ea7n t\u1eed: Sau v\u00f2ng s\u1eafp x\u1ebfp th\u1ee9 i th\u00ec ph\u1ea7n t\u1eed l\u1edbn th\u1ee9 i s\u1ebd n\u1eb1m t\u1ea1i v\u1ecb tr\u00ed N - i (bubble). Ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t trong m\u1ed7i v\u00f2ng s\u1eafp x\u1ebfp i s\u1ebd n\u1ed5i d\u1ea7n l\u00ean trong d\u00e3y. i = 0: 100 82 9 11 79 0: 82 100 9 11 79 1: 82 9 100 11 79 2: 82 9 11 100 79 3: 82 9 11 79 100 // 100 is risen up i = 1: 82 9 11 79 100 0: 9 82 11 79 100 1: 9 11 82 79 100 2: 9 11 79 82 100 // 82 is risen up and so on i = 2: 9 11 79 82 100 0: 9 11 79 82 100 1: 9 11 79 82 100 i = 3: 9 11 79 82 100 0: 9 11 79 82 100 M\u00e3 ngu\u1ed3n c\u1ee7a gi\u1ea3i thu\u1eadt \u0111\u01a1n gi\u1ea3n nh\u01b0 d\u01b0\u1edbi \u0111\u00e2y for (i = 0; i < n-1; i++) { /*Round i*/ for (j = 0; j < n-i-1; j++) { if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); } } Recursion X\u00e9t \u0111o\u1ea1n m\u00e3 for (int i=0; i<n-1; i++) if (arr[i] > arr[i+1]) swap(&arr[i], &arr[i+1]); Sau khi th\u1ef1c hi\u1ec7n \u0111o\u1ea1n m\u00e3 n\u00e0y th\u00ec ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t c\u1ee7a m\u1ea3ng s\u1ebd \u0111\u01b0\u1ee3c \"n\u1ed5i l\u00ean\" t\u1ea1i v\u1ecb tr\u00ed sau c\u00f9ng. L\u1ee3i d\u1ee5ng t\u00ednh ch\u1ea5t n\u00e0y ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec7 quy v\u00e0o \"Buble sort\". \u0110\u1ec7 quy d\u1eebng l\u1ea1i khi \u0111\u1ed9 d\u00e0i c\u1ee7a m\u1ea3ng b\u1eb1ng 1. Ti\u1ebfn h\u00e0nh \u0111\u01b0a ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t c\u1ee7a m\u1ea3ng ra v\u1ecb tr\u00ed sau c\u00f9ng. Ti\u1ebfn h\u00e0nh \"bubble sort\" cho m\u1ea3ng con (lo\u1ea1i b\u1ecf ph\u1ea7n t\u1eed cu\u1ed1i, c\u0169ng l\u00e0 ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t) sau khi ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t \u0111\u00e3 n\u1eb1m \u1edf cu\u1ed1i m\u1ea3ng. Di\u1ec5n bi\u1ebfn c\u1ee7a m\u1ed9t m\u1ea3ng khi s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec7 quy trong \"Buble sort\" ---34 3 94 2 3 -->3 34 2 3 94 ---3 34 2 3 -->3 2 3 34 ---3 2 3 -->2 3 3 ---2 3 -->2 3 Selection sort \u00dd t\u01b0\u1edfng c\u1ee7a \"selection sort\" l\u00e0 t\u00ecm ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t c\u1ee7a m\u1ea3ng (select) v\u00e0 \u0111\u1ed5i ch\u1ed7 cho ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean. Ti\u1ebfn h\u00e0nh tu\u1ea7n t\u1ef1 nh\u01b0 v\u1eady cho m\u1ea3ng con (l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a m\u1ea3ng cha lo\u1ea1i b\u1ecf \u0111i ph\u1ea7n t\u1eed c\u00f3 ch\u1ec9 s\u1ed1 b\u00e9 nh\u1ea5t -> ch\u00ednh l\u00e0 ph\u1ea7n t\u1eed nh\u1ecf nh\u1ea5t v\u1eeba \u0111\u01b0\u1ee3c \u0111\u1ed5i ch\u1ed7) Round 0 84 66 98 55 70 55 66 98 84 70 // 55 is the smallest Round 1 55 66 98 84 70 55 66 98 84 70 // 66 is the smallest and already in the first place Round 2 55 66 98 84 70 55 66 70 84 98 // 70 is the smallest Round 3 55 66 70 84 98 55 66 70 84 98 // 84 is the smallest V\u1ea5n \u0111\u1ec1 c\u1ee7a selection g\u1eb7p ph\u1ea3i \u0111\u00f3 l\u00e0 t\u00ednh \u1ed5n \u0111\u1ecbnh \"stable\". Gi\u1ea3 s\u1eed c\u00f3 hai ph\u1ea7n t\u1eed trong m\u1ea3ng A v\u00e0 B c\u00f3 gi\u00e1 tr\u1ecb key b\u1eb1ng nhau, nh\u01b0ng k\u1ebft qu\u1ea3 c\u1ee7a \"selection sort\" c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn B \u0111\u1ee9ng tr\u01b0\u1edbc A trong sorted array. Gi\u1ea3i thu\u1eadt \"selection sort\" c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c c\u1ea3i ti\u1ebfn \u0111\u1ec3 th\u1ecfa m\u00e3n t\u00ednh ch\u1ea5t \"stable\" n\u00e0y. Thay v\u00ec gi\u00e1 tr\u1ecb nh\u1ecf nh\u1ea5t trong m\u1ed9t d\u00e3y \u0111\u01b0\u1ee3c \u0111\u1ed5i ch\u1ed7 v\u1edbi v\u1ecb tr\u00ed hi\u1ec7n t\u1ea1i th\u00ec to\u00e0n b\u1ed9 m\u1ea3ng s\u1ebd \u0111\u01b0\u1ee3c d\u1ecbch ph\u1ea3i m\u1ed9t \u0111\u01a1n v\u1ecb \u0111\u1ec3 t\u1ea1o kho\u1ea3ng tr\u1ed1ng cho s\u1ed1 b\u00e9 nh\u1ea5t. Gi\u1ea3i thu\u1eadt n\u00e0y c\u00f3 m\u1ed9t s\u1ed1 \u0111i\u1ec3m t\u01b0\u01a1ng t\u1ef1 v\u1edbi insertion sort. Insertion sort \u00dd t\u01b0\u1edfng c\u1ee7a \"insertion sort\" l\u00e0 t\u00ecm ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t trong m\u1ea3ng v\u00e0 \u0111\u01b0a v\u1ec1 \u0111\u1ea7u m\u1ea3ng. \u00dd t\u01b0\u1edfng n\u00e0y c\u00f3 ph\u1ea7n n\u00e0o gi\u1ed1ng v\u1edbi selection sort nh\u01b0ng kh\u00e1c \u1edf c\u00e1ch ph\u1ea7n t\u1eed b\u00e9 nh\u00e2t \u0111\u01b0\u1ee3c \u0111\u01b0a v\u1ec1 \u0111\u1ea7u m\u1ea3ng. \u1ede \"selection sort\" ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t \u0111\u01b0\u1ee3c \u0111\u1ed5i ch\u1ed7 cho ph\u1ea7n t\u1eed \u0111\u1ea7u m\u1ea3ng, trong khi \u1edf \"insertion sort\" ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t \u0111\u01b0\u1ee3c ch\u00e8n v\u00e0o \u0111\u1ea7u m\u1ea3ng. \u0110i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 c\u00e1c ph\u1ea7n t\u1eed t\u00ednh t\u1eeb \u0111\u1ea7u m\u1ea3ng \u0111\u1ebfn tr\u01b0\u1edbc ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t Devide and Conquer Merge Sort Quick Sort Distribution Sort Counting sort","title":"Algorithm"},{"location":"programming/dsa/alg/#algorithm","text":"","title":"Algorithm"},{"location":"programming/dsa/alg/#sorting","text":"https://www.geeksforgeeks.org/sorting-algorithms/","title":"Sorting"},{"location":"programming/dsa/alg/#find-and-replace","text":"","title":"Find and Replace"},{"location":"programming/dsa/alg/#bubble-sort","text":"Worst and Average Case Time Complexity : O(n n). Worst case occurs when array is reverse sorted. Best Case Time Complexity : O(n). Best case occurs when array is already sorted. Auxiliary Space *: O(1) D\u01b0\u1edbi \u0111\u00e2y l\u00e0 minh h\u1ecda qu\u00e1 thay \u0111\u1ed5i c\u1ee7a m\u1ed9t m\u1ea3ng d\u1eef li\u1ec7u khi \u00e1p d\u1ee5ng gi\u1ea3i thu\u1eadt \"Bubble sort\". Nh\u1eadn x\u00e9t, \u0111\u1ed1i v\u1edbi m\u1ed9t m\u1ea3ng N ph\u1ea7n t\u1eed: Sau v\u00f2ng s\u1eafp x\u1ebfp th\u1ee9 i th\u00ec ph\u1ea7n t\u1eed l\u1edbn th\u1ee9 i s\u1ebd n\u1eb1m t\u1ea1i v\u1ecb tr\u00ed N - i (bubble). Ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t trong m\u1ed7i v\u00f2ng s\u1eafp x\u1ebfp i s\u1ebd n\u1ed5i d\u1ea7n l\u00ean trong d\u00e3y. i = 0: 100 82 9 11 79 0: 82 100 9 11 79 1: 82 9 100 11 79 2: 82 9 11 100 79 3: 82 9 11 79 100 // 100 is risen up i = 1: 82 9 11 79 100 0: 9 82 11 79 100 1: 9 11 82 79 100 2: 9 11 79 82 100 // 82 is risen up and so on i = 2: 9 11 79 82 100 0: 9 11 79 82 100 1: 9 11 79 82 100 i = 3: 9 11 79 82 100 0: 9 11 79 82 100 M\u00e3 ngu\u1ed3n c\u1ee7a gi\u1ea3i thu\u1eadt \u0111\u01a1n gi\u1ea3n nh\u01b0 d\u01b0\u1edbi \u0111\u00e2y for (i = 0; i < n-1; i++) { /*Round i*/ for (j = 0; j < n-i-1; j++) { if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); } } Recursion X\u00e9t \u0111o\u1ea1n m\u00e3 for (int i=0; i<n-1; i++) if (arr[i] > arr[i+1]) swap(&arr[i], &arr[i+1]); Sau khi th\u1ef1c hi\u1ec7n \u0111o\u1ea1n m\u00e3 n\u00e0y th\u00ec ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t c\u1ee7a m\u1ea3ng s\u1ebd \u0111\u01b0\u1ee3c \"n\u1ed5i l\u00ean\" t\u1ea1i v\u1ecb tr\u00ed sau c\u00f9ng. L\u1ee3i d\u1ee5ng t\u00ednh ch\u1ea5t n\u00e0y ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec7 quy v\u00e0o \"Buble sort\". \u0110\u1ec7 quy d\u1eebng l\u1ea1i khi \u0111\u1ed9 d\u00e0i c\u1ee7a m\u1ea3ng b\u1eb1ng 1. Ti\u1ebfn h\u00e0nh \u0111\u01b0a ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t c\u1ee7a m\u1ea3ng ra v\u1ecb tr\u00ed sau c\u00f9ng. Ti\u1ebfn h\u00e0nh \"bubble sort\" cho m\u1ea3ng con (lo\u1ea1i b\u1ecf ph\u1ea7n t\u1eed cu\u1ed1i, c\u0169ng l\u00e0 ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t) sau khi ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t \u0111\u00e3 n\u1eb1m \u1edf cu\u1ed1i m\u1ea3ng. Di\u1ec5n bi\u1ebfn c\u1ee7a m\u1ed9t m\u1ea3ng khi s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec7 quy trong \"Buble sort\" ---34 3 94 2 3 -->3 34 2 3 94 ---3 34 2 3 -->3 2 3 34 ---3 2 3 -->2 3 3 ---2 3 -->2 3","title":"Bubble sort"},{"location":"programming/dsa/alg/#selection-sort","text":"\u00dd t\u01b0\u1edfng c\u1ee7a \"selection sort\" l\u00e0 t\u00ecm ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t c\u1ee7a m\u1ea3ng (select) v\u00e0 \u0111\u1ed5i ch\u1ed7 cho ph\u1ea7n t\u1eed \u0111\u1ea7u ti\u00ean. Ti\u1ebfn h\u00e0nh tu\u1ea7n t\u1ef1 nh\u01b0 v\u1eady cho m\u1ea3ng con (l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a m\u1ea3ng cha lo\u1ea1i b\u1ecf \u0111i ph\u1ea7n t\u1eed c\u00f3 ch\u1ec9 s\u1ed1 b\u00e9 nh\u1ea5t -> ch\u00ednh l\u00e0 ph\u1ea7n t\u1eed nh\u1ecf nh\u1ea5t v\u1eeba \u0111\u01b0\u1ee3c \u0111\u1ed5i ch\u1ed7) Round 0 84 66 98 55 70 55 66 98 84 70 // 55 is the smallest Round 1 55 66 98 84 70 55 66 98 84 70 // 66 is the smallest and already in the first place Round 2 55 66 98 84 70 55 66 70 84 98 // 70 is the smallest Round 3 55 66 70 84 98 55 66 70 84 98 // 84 is the smallest V\u1ea5n \u0111\u1ec1 c\u1ee7a selection g\u1eb7p ph\u1ea3i \u0111\u00f3 l\u00e0 t\u00ednh \u1ed5n \u0111\u1ecbnh \"stable\". Gi\u1ea3 s\u1eed c\u00f3 hai ph\u1ea7n t\u1eed trong m\u1ea3ng A v\u00e0 B c\u00f3 gi\u00e1 tr\u1ecb key b\u1eb1ng nhau, nh\u01b0ng k\u1ebft qu\u1ea3 c\u1ee7a \"selection sort\" c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn B \u0111\u1ee9ng tr\u01b0\u1edbc A trong sorted array. Gi\u1ea3i thu\u1eadt \"selection sort\" c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c c\u1ea3i ti\u1ebfn \u0111\u1ec3 th\u1ecfa m\u00e3n t\u00ednh ch\u1ea5t \"stable\" n\u00e0y. Thay v\u00ec gi\u00e1 tr\u1ecb nh\u1ecf nh\u1ea5t trong m\u1ed9t d\u00e3y \u0111\u01b0\u1ee3c \u0111\u1ed5i ch\u1ed7 v\u1edbi v\u1ecb tr\u00ed hi\u1ec7n t\u1ea1i th\u00ec to\u00e0n b\u1ed9 m\u1ea3ng s\u1ebd \u0111\u01b0\u1ee3c d\u1ecbch ph\u1ea3i m\u1ed9t \u0111\u01a1n v\u1ecb \u0111\u1ec3 t\u1ea1o kho\u1ea3ng tr\u1ed1ng cho s\u1ed1 b\u00e9 nh\u1ea5t. Gi\u1ea3i thu\u1eadt n\u00e0y c\u00f3 m\u1ed9t s\u1ed1 \u0111i\u1ec3m t\u01b0\u01a1ng t\u1ef1 v\u1edbi insertion sort.","title":"Selection sort"},{"location":"programming/dsa/alg/#insertion-sort","text":"\u00dd t\u01b0\u1edfng c\u1ee7a \"insertion sort\" l\u00e0 t\u00ecm ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t trong m\u1ea3ng v\u00e0 \u0111\u01b0a v\u1ec1 \u0111\u1ea7u m\u1ea3ng. \u00dd t\u01b0\u1edfng n\u00e0y c\u00f3 ph\u1ea7n n\u00e0o gi\u1ed1ng v\u1edbi selection sort nh\u01b0ng kh\u00e1c \u1edf c\u00e1ch ph\u1ea7n t\u1eed b\u00e9 nh\u00e2t \u0111\u01b0\u1ee3c \u0111\u01b0a v\u1ec1 \u0111\u1ea7u m\u1ea3ng. \u1ede \"selection sort\" ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t \u0111\u01b0\u1ee3c \u0111\u1ed5i ch\u1ed7 cho ph\u1ea7n t\u1eed \u0111\u1ea7u m\u1ea3ng, trong khi \u1edf \"insertion sort\" ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t \u0111\u01b0\u1ee3c ch\u00e8n v\u00e0o \u0111\u1ea7u m\u1ea3ng. \u0110i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 c\u00e1c ph\u1ea7n t\u1eed t\u00ednh t\u1eeb \u0111\u1ea7u m\u1ea3ng \u0111\u1ebfn tr\u01b0\u1edbc ph\u1ea7n t\u1eed b\u00e9 nh\u1ea5t","title":"Insertion sort"},{"location":"programming/dsa/alg/#devide-and-conquer","text":"","title":"Devide and Conquer"},{"location":"programming/dsa/alg/#merge-sort","text":"","title":"Merge Sort"},{"location":"programming/dsa/alg/#quick-sort","text":"","title":"Quick Sort"},{"location":"programming/dsa/alg/#distribution-sort","text":"","title":"Distribution Sort"},{"location":"programming/dsa/alg/#counting-sort","text":"","title":"Counting sort"},{"location":"programming/dsa/dsa/","text":"Data Structure and Algorithm Github Introduction and table of content. Data Structure Elementary data structure Array & String Linked List ADT - Abstract Data Types Queue Stack Algorithms","title":"DSA"},{"location":"programming/dsa/dsa/#data-structure-and-algorithm","text":"Github Introduction and table of content.","title":"Data Structure and Algorithm"},{"location":"programming/dsa/dsa/#data-structure","text":"","title":"Data Structure"},{"location":"programming/dsa/dsa/#elementary-data-structure","text":"","title":"Elementary data structure"},{"location":"programming/dsa/dsa/#array-string","text":"","title":"Array &amp; String"},{"location":"programming/dsa/dsa/#linked-list","text":"","title":"Linked List"},{"location":"programming/dsa/dsa/#adt-abstract-data-types","text":"","title":"ADT - Abstract Data Types"},{"location":"programming/dsa/dsa/#queue","text":"","title":"Queue"},{"location":"programming/dsa/dsa/#stack","text":"","title":"Stack"},{"location":"programming/dsa/dsa/#algorithms","text":"","title":"Algorithms"},{"location":"programming/dsa/linked_list/","text":"Linked list Doubly Linked List - An example from CS144 In an online course CS144, Standford provides source code that has a library for hanlding linked list. Figure. Doubly Linked List In this library, you can create a list, add a node to the tail/head of list, add a node to a specific node in list. head and tail node are NULL pointers when list is initialized. Circular List - Linked list in Linux Kernel Kernel provides a built-in data structure: linked list. This built-in linked list can be modified to use in user space applications. In this note, we will talk about API in Kernel list.h and how this kind of list grow up. For more information such as list definition, data structure ... please refer kernel data structure . Basically, list.h is \"cirlular linked list\". Add to list list.h provides a fundamental inline function for adding a new node between prev and next node. That function is __list_add() . static inline void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next); The below figure (100*x) illustrates how __list_add works. __list_add() makes 4 connection changes, these are: next->prev = new; new->next = next; new->prev = prev; prev->next = new; Base on __list_add() , list.h also provides two wrapper-function that often be used for adding list element: list_add and list_add_tail . So, what is basic difference between list_add and list_add_tail ? The answer appears when looking deeply at the way that APIs use __list_add . static inline void list_add(struct list_head *new, struct list_head *head) { __list_add(new, head, head->next); } and static inline void list_add_tail(struct list_head *new, struct list_head *head) { __list_add(new, head->prev, head); } list_add Adding new element right after head: __list_add(new, head, head->next); *The gray node is head list_add_tail Adding new element right before head: __list_add(new, head->prev, head);","title":"Linked list"},{"location":"programming/dsa/linked_list/#linked-list","text":"","title":"Linked list"},{"location":"programming/dsa/linked_list/#doubly-linked-list-an-example-from-cs144","text":"In an online course CS144, Standford provides source code that has a library for hanlding linked list. Figure. Doubly Linked List In this library, you can create a list, add a node to the tail/head of list, add a node to a specific node in list. head and tail node are NULL pointers when list is initialized.","title":"Doubly Linked List - An example from CS144"},{"location":"programming/dsa/linked_list/#circular-list-linked-list-in-linux-kernel","text":"Kernel provides a built-in data structure: linked list. This built-in linked list can be modified to use in user space applications. In this note, we will talk about API in Kernel list.h and how this kind of list grow up. For more information such as list definition, data structure ... please refer kernel data structure . Basically, list.h is \"cirlular linked list\".","title":"Circular List - Linked list in Linux Kernel"},{"location":"programming/dsa/linked_list/#add-to-list","text":"list.h provides a fundamental inline function for adding a new node between prev and next node. That function is __list_add() . static inline void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next); The below figure (100*x) illustrates how __list_add works. __list_add() makes 4 connection changes, these are: next->prev = new; new->next = next; new->prev = prev; prev->next = new; Base on __list_add() , list.h also provides two wrapper-function that often be used for adding list element: list_add and list_add_tail . So, what is basic difference between list_add and list_add_tail ? The answer appears when looking deeply at the way that APIs use __list_add . static inline void list_add(struct list_head *new, struct list_head *head) { __list_add(new, head, head->next); } and static inline void list_add_tail(struct list_head *new, struct list_head *head) { __list_add(new, head->prev, head); } list_add Adding new element right after head: __list_add(new, head, head->next); *The gray node is head list_add_tail Adding new element right before head: __list_add(new, head->prev, head);","title":"Add to list"},{"location":"programming/dsa/queue/","text":"Queue Queue with array Queue with list","title":"Queue"},{"location":"programming/dsa/queue/#queue","text":"","title":"Queue"},{"location":"programming/dsa/queue/#queue-with-array","text":"","title":"Queue with array"},{"location":"programming/dsa/queue/#queue-with-list","text":"","title":"Queue with list"},{"location":"programming/lnx/lpi/","text":"Refer The Linux Programming Interface in Book cataloge.","title":"Linux Programming Interfaces"},{"location":"programming/perf/perf/","text":"PERF Visit PERF Main Page for more information about this tool. Perf Top perf top -a to monitor process (both in userspace and kernel) Perf Record perf record [-e <EVENT> | --event=EVENT] [-a] \u2014 <command> [<options>] To tracking an event, just using perf trace, e.g. perf record -e block:block_rq_issue -ag will trace event block_rq_issue with flag -a for all cpus and -g for enable call-graph. After ending recording, recorded data is stored at perf.data . To list all pre-defined events, just call perf list . The important events are: block_rq_issue is fired when when a block device I/O request is issued (disk I/O). To investigate perf.data file, using perf report . Perf Trace https://pingcap.com/blog/how-to-trace-linux-system-calls-in-production-with-minimal-impact-on-performance Tracking a process with PID To track all systemcalls of a process (with PID), using perf trace -p <PID> -s , the result will look like: root@vubuntu:/home/vux# perf trace -p 17529 -s Summary of events: ping (17529), 103 events, 98.1% syscall calls errors total min avg max stddev (msec) (msec) (msec) (msec) (%) --------------- -------- ------ -------- --------- --------- --------- ------ recvmsg 23 23 21683.350 0.000 942.754 1024.033 5.97% sendto 22 0 2.288 0.056 0.104 0.127 4.46% write 4 0 0.060 0.009 0.015 0.021 17.11% close 2 0 0.004 0.002 0.002 0.002 4.20% To recording the result, using perf trace record --call-graph dwarf -p $PID . References [1] Brendan Gregg's Homepage - https://www.brendangregg.com/index.html Perf Example - https://www.brendangregg.com/perf.html [2] An useful and cute note - https://jvns.ca/perf-zine.pdf","title":"Perf"},{"location":"programming/perf/perf/#perf","text":"Visit PERF Main Page for more information about this tool.","title":"PERF"},{"location":"programming/perf/perf/#perf-top","text":"perf top -a to monitor process (both in userspace and kernel)","title":"Perf Top"},{"location":"programming/perf/perf/#perf-record","text":"perf record [-e <EVENT> | --event=EVENT] [-a] \u2014 <command> [<options>] To tracking an event, just using perf trace, e.g. perf record -e block:block_rq_issue -ag will trace event block_rq_issue with flag -a for all cpus and -g for enable call-graph. After ending recording, recorded data is stored at perf.data . To list all pre-defined events, just call perf list . The important events are: block_rq_issue is fired when when a block device I/O request is issued (disk I/O). To investigate perf.data file, using perf report .","title":"Perf Record"},{"location":"programming/perf/perf/#perf-trace","text":"https://pingcap.com/blog/how-to-trace-linux-system-calls-in-production-with-minimal-impact-on-performance","title":"Perf Trace"},{"location":"programming/perf/perf/#tracking-a-process-with-pid","text":"To track all systemcalls of a process (with PID), using perf trace -p <PID> -s , the result will look like: root@vubuntu:/home/vux# perf trace -p 17529 -s Summary of events: ping (17529), 103 events, 98.1% syscall calls errors total min avg max stddev (msec) (msec) (msec) (msec) (%) --------------- -------- ------ -------- --------- --------- --------- ------ recvmsg 23 23 21683.350 0.000 942.754 1024.033 5.97% sendto 22 0 2.288 0.056 0.104 0.127 4.46% write 4 0 0.060 0.009 0.015 0.021 17.11% close 2 0 0.004 0.002 0.002 0.002 4.20% To recording the result, using perf trace record --call-graph dwarf -p $PID .","title":"Tracking a process with PID"},{"location":"programming/perf/perf/#references","text":"[1] Brendan Gregg's Homepage - https://www.brendangregg.com/index.html Perf Example - https://www.brendangregg.com/perf.html [2] An useful and cute note - https://jvns.ca/perf-zine.pdf","title":"References"},{"location":"programming/sql/mysql/","text":"MySQL Installation","title":"SQL"},{"location":"programming/sql/mysql/#mysql","text":"","title":"MySQL"},{"location":"programming/sql/mysql/#installation","text":"","title":"Installation"},{"location":"projects/pi3b/","text":"Raspberry Pi 3 Model B Links About product - www.raspberrypi.org Getting Start Guide Porting Linux Kernel Trang web https://www.raspberrypi.org/ cung c\u1ea5p h\u01b0\u1edbng d\u1eabn Kernel Building cho Pi. Trong h\u01b0\u1edbng d\u1eabn n\u00e0y s\u1eed d\u1ee5ng tool-chain: gcc-linaro-arm-linux-gnueabihf-raspbian RPi U-Boot Trang web https://elinux.org/RPi_U-Boot h\u01b0\u1edbng d\u1eabn build U-Boot cho RPi. Next work Backup SD card image -> need to test.","title":"Raspberrypi 3B"},{"location":"projects/pi3b/#raspberry-pi-3-model-b","text":"","title":"Raspberry Pi 3 Model B"},{"location":"projects/pi3b/#links","text":"About product - www.raspberrypi.org Getting Start Guide","title":"Links"},{"location":"projects/pi3b/#porting-linux","text":"","title":"Porting Linux"},{"location":"projects/pi3b/#kernel","text":"Trang web https://www.raspberrypi.org/ cung c\u1ea5p h\u01b0\u1edbng d\u1eabn Kernel Building cho Pi. Trong h\u01b0\u1edbng d\u1eabn n\u00e0y s\u1eed d\u1ee5ng tool-chain: gcc-linaro-arm-linux-gnueabihf-raspbian","title":"Kernel"},{"location":"projects/pi3b/#rpi-u-boot","text":"Trang web https://elinux.org/RPi_U-Boot h\u01b0\u1edbng d\u1eabn build U-Boot cho RPi.","title":"RPi U-Boot"},{"location":"projects/pi3b/#next-work","text":"Backup SD card image -> need to test.","title":"Next work"},{"location":"projects/imx8/imx8/","text":"Build Guideline","title":"IMX8"},{"location":"projects/imx8/ip-docs/","text":"Documents for IP-Phone","title":"Documents for IP-Phone"},{"location":"projects/imx8/ip-docs/#documents-for-ip-phone","text":"","title":"Documents for IP-Phone"},{"location":"projects/imx8/ip-docs/Build-Guideline/","text":"ip-phone IP Phone with IMX8 Host Preparation Ubuntu 16.04 sudo apt-get install curl gawk wget git-core diffstat unzip texinfo gcc-multilib \\ build-essential chrpath socat libsdl1.2-dev Yocto Preparation i.MX Linux Yocto Project BSP Releases To get the BSP you need to have repo installed. Install the repo utility: (only need to do this once): mkdir ~/bin curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo chmod a+x ~/bin/repo PATH=${PATH}:~/bin Download the Yocto Project Environment into your directory: mkdir fsl-arm-yocto-bsp cd fsl-arm-yocto-bsp repo init -u https://source.codeaurora.org/external/imx/imx-manifest -b imx-linux-sumo -m imx-4.14.98-2.0.0_ga.xml repo sync Setup the build folder for a BSP release: Setup for Wayland DISTRO=fsl-imx-xwayland MACHINE=imx8mqevk source fsl-setup-release.sh -b build-xwayland Get meta data layer for IP-Phone cd ../sources git clone git@27.72.100.232:platform/ref-kit/meta-ipphone.git cd ../ Setup meta data for IP-Phone cd build-xwayland echo \"BBLAYERS += \\\" \\${BSPDIR}/sources/meta-ipphone \\\"\" >> conf/bblayers.conf Build source ./setup-environment build-xwayland bitbake ipphone-image","title":"ip-phone"},{"location":"projects/imx8/ip-docs/Build-Guideline/#ip-phone","text":"IP Phone with IMX8","title":"ip-phone"},{"location":"projects/imx8/ip-docs/Build-Guideline/#host-preparation","text":"Ubuntu 16.04 sudo apt-get install curl gawk wget git-core diffstat unzip texinfo gcc-multilib \\ build-essential chrpath socat libsdl1.2-dev","title":"Host Preparation"},{"location":"projects/imx8/ip-docs/Build-Guideline/#yocto-preparation","text":"","title":"Yocto Preparation"},{"location":"projects/imx8/ip-docs/Build-Guideline/#imx-linux-yocto-project-bsp-releases","text":"To get the BSP you need to have repo installed.","title":"i.MX Linux Yocto Project BSP Releases"},{"location":"projects/imx8/ip-docs/Build-Guideline/#install-the-repo-utility-only-need-to-do-this-once","text":"mkdir ~/bin curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo chmod a+x ~/bin/repo PATH=${PATH}:~/bin","title":"Install the repo utility: (only need to do this once):"},{"location":"projects/imx8/ip-docs/Build-Guideline/#download-the-yocto-project-environment-into-your-directory","text":"mkdir fsl-arm-yocto-bsp cd fsl-arm-yocto-bsp repo init -u https://source.codeaurora.org/external/imx/imx-manifest -b imx-linux-sumo -m imx-4.14.98-2.0.0_ga.xml repo sync","title":"Download the Yocto Project Environment into your directory:"},{"location":"projects/imx8/ip-docs/Build-Guideline/#setup-the-build-folder-for-a-bsp-release","text":"Setup for Wayland DISTRO=fsl-imx-xwayland MACHINE=imx8mqevk source fsl-setup-release.sh -b build-xwayland","title":"Setup the build folder for a BSP release:"},{"location":"projects/imx8/ip-docs/Build-Guideline/#get-meta-data-layer-for-ip-phone","text":"cd ../sources git clone git@27.72.100.232:platform/ref-kit/meta-ipphone.git cd ../","title":"Get meta data layer for IP-Phone"},{"location":"projects/imx8/ip-docs/Build-Guideline/#setup-meta-data-for-ip-phone","text":"cd build-xwayland echo \"BBLAYERS += \\\" \\${BSPDIR}/sources/meta-ipphone \\\"\" >> conf/bblayers.conf","title":"Setup meta data for IP-Phone"},{"location":"projects/imx8/ip-docs/Build-Guideline/#build","text":"source ./setup-environment build-xwayland bitbake ipphone-image","title":"Build"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/","text":"Secured boot cho IMX C\u00e2u h\u1ecfi \u0111\u1eb7t ra 1. Secured boot c\u00f3 b\u1ea3o m\u1eadt ri\u00eang bi\u1ec7t cho t\u1eebng board s\u1ea3n xu\u1ea5t ra \u0111\u01b0\u1ee3c kh\u00f4ng? Tr\u1ea3 l\u1eddi: C\u00d3. Uboot ph\u1ea3i \u0111\u01b0\u1ee3c Signed v\u00e0 Encrypt \u0110\u1ec3 Encrypt Uboot c\u1ea7n c\u00f3 m\u1ed9t file \u0111\u01b0\u1ee3c generated t\u1eeb m\u1ea1ch s\u1eed d\u1ee5ng Unique ID v\u00e0 Key Fuse \u0111\u00e3 \u0111\u01b0\u1ee3c n\u1ea1p Uboot ch\u1ec9 Signed m\u00e0 kh\u00f4ng Encrypt th\u00ec c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean nhi\u1ec1u m\u1ea1ch kh\u00e1c nhau 2. Sau khi fused key v\u00e0o OTP th\u00ec c\u00f3 c\u00e1ch n\u00e0o ki\u1ec3m tra l\u00e0 burn th\u00e0nh c\u00f4ng kh\u00f4ng? Tr\u1ea3 l\u1eddi: C\u00d3. Khi fused key, m\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Open s\u1ebd kh\u1edfi \u0111\u1ed9ng c\u00f9ng v\u1edbi Scured Uboot. Sau khi boot l\u1ea1i s\u1ebd m\u1ea1ch s\u1ebd th\u00f4ng b\u00e1o tr\u1ea1ng th\u00e1i c\u1ee7a Secured Uboot, d\u1ef1a v\u00e0o c\u00e1c th\u00f4ng tin log s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c m\u1ea1ch \u0111\u00e3 \u0111\u01b0\u1ee3c fused keys th\u00e0nh c\u00f4ng hay kh\u00f4ng. 3. Sau khi enabled Secured boot r\u1ed3i th\u00ec c\u00f3 c\u00e1c n\u00e0o \u0111\u1ec3 can thi\u1ec7p v\u00e0o qu\u00e1 tr\u00ecnh boot chain \u0111\u1ec3 c\u1eadp nh\u1eadt l\u1ea1i Uboot kh\u00f4ng? \u0110\u1ec1 ph\u00f2ng tr\u01b0\u1eddng h\u1ee3p enabled Secured boot nh\u01b0ng Uboot tr\u00ean m\u1ea1ch ch\u01b0a \u0111\u01b0\u1ee3c signed Tr\u1ea3 l\u1eddi: Kh\u00f4ng. \u0110ang ti\u1ebfp t\u1ee5c t\u00ecm hi\u1ec3u th\u00eam. 4. S\u1ea3n xu\u1ea5t 1000 b\u1ed9 ch\u01b0a c\u00f3 Secured boot th\u00ec c\u1eadp nh\u1eadt th\u00e0nh c\u00f3 Secured boot nh\u01b0 th\u1ebf n\u00e0o? \u0110\u1ec1 xu\u1ea5t 1: B1. S\u1ea3n xu\u1ea5t 1000 b\u1ed9 v\u1edbi keys \u0111\u01b0\u1ee3c fused trong qu\u00e1 tr\u00ecnh s\u1ea3n xu\u1ea5t, Uboot \u1edf ch\u1ebf \u0111\u1ed9 Signed nh\u01b0ng Kernel/Rootfs kh\u00f4ng c\u1ea7n Signed B2. T\u00f9y theo y\u00eau c\u1ea7u s\u1ebd update l\u1ea1i Kernel/Rootfs v\u1edbi Signed Keys \u0110\u1ec1 xu\u1ea5t 2: B1. S\u1ea3n xu\u1ea5t 1000 b\u1ed9 b\u00ecnh th\u01b0\u1eddng B2. T\u00f9y theo y\u00eau c\u1ea7u s\u1ebd th\u1ef1c hi\u1ec7n Fused v\u00e0 c\u1eadp nh\u1eadt Signed Uboot/Kernel/Rootfs trong m\u1ed9t l\u1ea7n duy nh\u1ea5t. 5. Secured boot \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn qu\u00e1 tr\u00ecnh booting Kernel, Rootfs nh\u01b0 th\u1ebf n\u00e0o? Tr\u1ea3 l\u1eddi: Kh\u00f4ng v\u00e0 C\u00f3 t\u00f9y theo nhu c\u1ea7u Secured Boot c\u00f3 th\u1ec3 verify kernel/rootfs c\u00f3 \u0111\u01b0\u1ee3c Signed v\u1edbi \u0111\u00fang Keys hay kh\u00f4ng Ho\u1eb7c c\u00f3 th\u1ec3 load Kernel/Rootfs kh\u00f4ng \u0111\u01b0\u1ee3c Signed nh\u01b0 m\u1ed9t Uboot th\u01b0\u1eddng. 6. C\u00f3 c\u1ea7n c\u00f4ng c\u1ee5 \u0111\u1eb7c bi\u1ec7t g\u00ec \u0111\u1ec3 Fused Keys kh\u00f4ng? Tr\u1ea3 l\u1eddi: Kh\u00f4ng C\u00f3 th\u1ec3 Fused Keys b\u1eb1ng Uboot th\u01b0\u1eddng \u0110\u1ec1 xu\u1ea5t quy tr\u00ecnh s\u1ea3n xu\u1ea5t B1. N\u1ea1p Signed Uboot/Kernel/Rootfs tr\u01b0\u1edbc v\u00e0o eMMC B2. Boot uboot th\u01b0\u1eddng t\u1eeb SDcard v\u00e0 Fused Keys t\u1eeb \u0111\u00e2y B3. Boot Signed Uboot t\u1eeb eMMC v\u00e0 ki\u1ec3m tra tr\u1ea1ng th\u00e1i secured boot B4. B\u1eadt c\u1edd chuy\u1ec3n m\u1ea1ch sang ch\u1ebf \u0111\u1ed9 Secured Boot 7. Quy tr\u00ecnh thi\u1ebft l\u1eadp Secured Boot v\u1edbi binary Signed Uboot cho m\u1ea1ch c\u1ea7n nh\u1eefng b\u01b0\u1edbc g\u00ec ? B1. T\u1ea1o Keys B2. T\u1ea1o Signed Uboot v\u1edbi Key v\u00e0 Uboot th\u01b0\u1eddng B3. N\u1ea1p Keys v\u00e0o m\u1ea1ch B4. N\u1ea1p Signed Uboot B5. Kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u1ea1ch (M\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Open) B6. Ki\u1ec3m tra log \u0111\u1ec3 bi\u1ebft Secured Boot kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng (M\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Open) B7. Th\u1ef1c hi\u1ec7n enabled ch\u1ebf \u0111\u1ed9 Secured Boot (M\u1ea1ch s\u1ebd \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Close \u1edf l\u1ea7n boot ti\u1ebfp theo) 8. Quy tr\u00ecnh thi\u1ebft l\u1eadp Secured Boot v\u1edbi Signed & Encrypted Uboot c\u1ea7n nh\u1eefng b\u01b0\u1edbc g\u00ec ? B1. T\u1ea1o Keys B2. T\u1ea1o Signed Uboot v\u1edbi Key v\u00e0 Uboot th\u01b0\u1eddng B2. N\u1ea1p Keys v\u00e0o m\u1ea1ch B3. T\u1ea1o binary unique v\u1edbi Key \u0111\u00e3 \u0111\u01b0\u1ee3c fused v\u00e0o m\u1ea1ch v\u00e0 Unique ID tr\u00ean m\u1ea1ch (T\u1ea1o binary n\u00e0y tr\u00ean m\u1ea1ch) B4. T\u1ea1o Signed & Encrypted Uboot v\u1edbi Key, binary unique v\u00e0 Uboot th\u01b0\u1eddng (T\u1ea1o binary n\u00e0y tr\u00ean PC) B5. N\u1ea1p Signed & Encrypted Uboot B6. Kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u1ea1ch (M\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Open) B6. Ki\u1ec3m tra log \u0111\u1ec3 bi\u1ebft Secured Boot kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng (M\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Open) B7. Th\u1ef1c hi\u1ec7n enabled ch\u1ebf \u0111\u1ed9 Secured Boot (M\u1ea1ch s\u1ebd \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Close \u1edf l\u1ea7n boot ti\u1ebfp theo)","title":"Secured boot cho IMX"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#secured-boot-cho-imx","text":"C\u00e2u h\u1ecfi \u0111\u1eb7t ra","title":"Secured boot cho IMX"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#1-secured-boot-co-bao-mat-rieng-biet-cho-tung-board-san-xuat-ra-uoc-khong","text":"","title":"1. Secured boot c\u00f3 b\u1ea3o m\u1eadt ri\u00eang bi\u1ec7t cho t\u1eebng board s\u1ea3n xu\u1ea5t ra \u0111\u01b0\u1ee3c kh\u00f4ng?"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#tra-loi-co","text":"Uboot ph\u1ea3i \u0111\u01b0\u1ee3c Signed v\u00e0 Encrypt \u0110\u1ec3 Encrypt Uboot c\u1ea7n c\u00f3 m\u1ed9t file \u0111\u01b0\u1ee3c generated t\u1eeb m\u1ea1ch s\u1eed d\u1ee5ng Unique ID v\u00e0 Key Fuse \u0111\u00e3 \u0111\u01b0\u1ee3c n\u1ea1p Uboot ch\u1ec9 Signed m\u00e0 kh\u00f4ng Encrypt th\u00ec c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean nhi\u1ec1u m\u1ea1ch kh\u00e1c nhau","title":"Tr\u1ea3 l\u1eddi: C\u00d3."},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#2-sau-khi-fused-key-vao-otp-thi-co-cach-nao-kiem-tra-la-burn-thanh-cong-khong","text":"","title":"2. Sau khi fused key v\u00e0o OTP th\u00ec c\u00f3 c\u00e1ch n\u00e0o ki\u1ec3m tra l\u00e0 burn th\u00e0nh c\u00f4ng kh\u00f4ng?"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#tra-loi-co_1","text":"Khi fused key, m\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Open s\u1ebd kh\u1edfi \u0111\u1ed9ng c\u00f9ng v\u1edbi Scured Uboot. Sau khi boot l\u1ea1i s\u1ebd m\u1ea1ch s\u1ebd th\u00f4ng b\u00e1o tr\u1ea1ng th\u00e1i c\u1ee7a Secured Uboot, d\u1ef1a v\u00e0o c\u00e1c th\u00f4ng tin log s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c m\u1ea1ch \u0111\u00e3 \u0111\u01b0\u1ee3c fused keys th\u00e0nh c\u00f4ng hay kh\u00f4ng.","title":"Tr\u1ea3 l\u1eddi: C\u00d3."},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#3-sau-khi-enabled-secured-boot-roi-thi-co-cac-nao-e-can-thiep-vao-qua-trinh-boot-chain-e-cap-nhat-lai-uboot-khong-e-phong-truong-hop-enabled-secured-boot-nhung-uboot-tren-mach-chua-uoc-signed","text":"","title":"3. Sau khi enabled Secured boot r\u1ed3i th\u00ec c\u00f3 c\u00e1c n\u00e0o \u0111\u1ec3 can thi\u1ec7p v\u00e0o qu\u00e1 tr\u00ecnh boot chain \u0111\u1ec3 c\u1eadp nh\u1eadt l\u1ea1i Uboot kh\u00f4ng? \u0110\u1ec1 ph\u00f2ng tr\u01b0\u1eddng h\u1ee3p enabled Secured boot nh\u01b0ng Uboot tr\u00ean m\u1ea1ch ch\u01b0a \u0111\u01b0\u1ee3c signed"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#tra-loi-khong","text":"\u0110ang ti\u1ebfp t\u1ee5c t\u00ecm hi\u1ec3u th\u00eam.","title":"Tr\u1ea3 l\u1eddi: Kh\u00f4ng."},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#4-san-xuat-1000-bo-chua-co-secured-boot-thi-cap-nhat-thanh-co-secured-boot-nhu-the-nao","text":"","title":"4. S\u1ea3n xu\u1ea5t 1000 b\u1ed9 ch\u01b0a c\u00f3 Secured boot th\u00ec c\u1eadp nh\u1eadt th\u00e0nh c\u00f3 Secured boot nh\u01b0 th\u1ebf n\u00e0o?"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#e-xuat-1","text":"B1. S\u1ea3n xu\u1ea5t 1000 b\u1ed9 v\u1edbi keys \u0111\u01b0\u1ee3c fused trong qu\u00e1 tr\u00ecnh s\u1ea3n xu\u1ea5t, Uboot \u1edf ch\u1ebf \u0111\u1ed9 Signed nh\u01b0ng Kernel/Rootfs kh\u00f4ng c\u1ea7n Signed B2. T\u00f9y theo y\u00eau c\u1ea7u s\u1ebd update l\u1ea1i Kernel/Rootfs v\u1edbi Signed Keys","title":"\u0110\u1ec1 xu\u1ea5t 1:"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#e-xuat-2","text":"B1. S\u1ea3n xu\u1ea5t 1000 b\u1ed9 b\u00ecnh th\u01b0\u1eddng B2. T\u00f9y theo y\u00eau c\u1ea7u s\u1ebd th\u1ef1c hi\u1ec7n Fused v\u00e0 c\u1eadp nh\u1eadt Signed Uboot/Kernel/Rootfs trong m\u1ed9t l\u1ea7n duy nh\u1ea5t.","title":"\u0110\u1ec1 xu\u1ea5t 2:"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#5-secured-boot-anh-huong-en-qua-trinh-booting-kernel-rootfs-nhu-the-nao","text":"","title":"5. Secured boot \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn qu\u00e1 tr\u00ecnh booting Kernel, Rootfs nh\u01b0 th\u1ebf n\u00e0o?"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#tra-loi-khong-va-co-tuy-theo-nhu-cau","text":"Secured Boot c\u00f3 th\u1ec3 verify kernel/rootfs c\u00f3 \u0111\u01b0\u1ee3c Signed v\u1edbi \u0111\u00fang Keys hay kh\u00f4ng Ho\u1eb7c c\u00f3 th\u1ec3 load Kernel/Rootfs kh\u00f4ng \u0111\u01b0\u1ee3c Signed nh\u01b0 m\u1ed9t Uboot th\u01b0\u1eddng.","title":"Tr\u1ea3 l\u1eddi: Kh\u00f4ng v\u00e0 C\u00f3 t\u00f9y theo nhu c\u1ea7u"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#6-co-can-cong-cu-ac-biet-gi-e-fused-keys-khong","text":"","title":"6. C\u00f3 c\u1ea7n c\u00f4ng c\u1ee5 \u0111\u1eb7c bi\u1ec7t g\u00ec \u0111\u1ec3 Fused Keys kh\u00f4ng?"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#tra-loi-khong_1","text":"C\u00f3 th\u1ec3 Fused Keys b\u1eb1ng Uboot th\u01b0\u1eddng","title":"Tr\u1ea3 l\u1eddi: Kh\u00f4ng"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#e-xuat-quy-trinh-san-xuat","text":"B1. N\u1ea1p Signed Uboot/Kernel/Rootfs tr\u01b0\u1edbc v\u00e0o eMMC B2. Boot uboot th\u01b0\u1eddng t\u1eeb SDcard v\u00e0 Fused Keys t\u1eeb \u0111\u00e2y B3. Boot Signed Uboot t\u1eeb eMMC v\u00e0 ki\u1ec3m tra tr\u1ea1ng th\u00e1i secured boot B4. B\u1eadt c\u1edd chuy\u1ec3n m\u1ea1ch sang ch\u1ebf \u0111\u1ed9 Secured Boot","title":"\u0110\u1ec1 xu\u1ea5t quy tr\u00ecnh s\u1ea3n xu\u1ea5t"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#7-quy-trinh-thiet-lap-secured-boot-voi-binary-signed-uboot-cho-mach-can-nhung-buoc-gi","text":"B1. T\u1ea1o Keys B2. T\u1ea1o Signed Uboot v\u1edbi Key v\u00e0 Uboot th\u01b0\u1eddng B3. N\u1ea1p Keys v\u00e0o m\u1ea1ch B4. N\u1ea1p Signed Uboot B5. Kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u1ea1ch (M\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Open) B6. Ki\u1ec3m tra log \u0111\u1ec3 bi\u1ebft Secured Boot kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng (M\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Open) B7. Th\u1ef1c hi\u1ec7n enabled ch\u1ebf \u0111\u1ed9 Secured Boot (M\u1ea1ch s\u1ebd \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Close \u1edf l\u1ea7n boot ti\u1ebfp theo)","title":"7. Quy tr\u00ecnh thi\u1ebft l\u1eadp Secured Boot v\u1edbi binary Signed Uboot cho m\u1ea1ch c\u1ea7n nh\u1eefng b\u01b0\u1edbc g\u00ec ?"},{"location":"projects/imx8/ip-docs/Giai-phap-secured-boot-ipphone/#8-quy-trinh-thiet-lap-secured-boot-voi-signed-encrypted-uboot-can-nhung-buoc-gi","text":"B1. T\u1ea1o Keys B2. T\u1ea1o Signed Uboot v\u1edbi Key v\u00e0 Uboot th\u01b0\u1eddng B2. N\u1ea1p Keys v\u00e0o m\u1ea1ch B3. T\u1ea1o binary unique v\u1edbi Key \u0111\u00e3 \u0111\u01b0\u1ee3c fused v\u00e0o m\u1ea1ch v\u00e0 Unique ID tr\u00ean m\u1ea1ch (T\u1ea1o binary n\u00e0y tr\u00ean m\u1ea1ch) B4. T\u1ea1o Signed & Encrypted Uboot v\u1edbi Key, binary unique v\u00e0 Uboot th\u01b0\u1eddng (T\u1ea1o binary n\u00e0y tr\u00ean PC) B5. N\u1ea1p Signed & Encrypted Uboot B6. Kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u1ea1ch (M\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Open) B6. Ki\u1ec3m tra log \u0111\u1ec3 bi\u1ebft Secured Boot kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng (M\u1ea1ch \u0111ang \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Open) B7. Th\u1ef1c hi\u1ec7n enabled ch\u1ebf \u0111\u1ed9 Secured Boot (M\u1ea1ch s\u1ebd \u1edf ch\u1ebf \u0111\u1ed9 Secured Boot Close \u1edf l\u1ea7n boot ti\u1ebfp theo)","title":"8. Quy tr\u00ecnh thi\u1ebft l\u1eadp Secured Boot v\u1edbi Signed &amp; Encrypted Uboot c\u1ea7n nh\u1eefng b\u01b0\u1edbc g\u00ec ?"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/","text":"i.MX Linux User's Guide Booting Linux OS. 1. Software Overview M\u1ed9t boot Linux image tr\u00ean i.MX 8M Quad ho\u1eb7c i.MX 8M Mini g\u1ed3m 4 th\u00e0nh ph\u1ea7n: imx-boot (built b\u1eb1ng imx-mkimage), g\u1ed3m SPL, U-Boot, Arm Trusted Firmware, DDR firmware v\u00e0 HDMI firmware. Linux kernel images. Device tree file (.dtb). Root file system (rootfs). 2. Universal update utility UUU ch\u1ea1y tr\u00ean Windows ho\u1eb7c Linux OS, \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 t\u1ea3i images v\u00e0o c\u00e1c devices kh\u00e1c nhau c\u1ee7a i.MX board. 3. Preparing an SD/MMC card to boot Yocto Project build t\u1ea1o ra SD card image v\u00e0 c\u00f3 th\u1ec3 d\u00f9ng tr\u1ef1c ti\u1ebfp n\u00f3 \u0111\u1ec3 t\u1ea1o boot SD card. Do \u0111\u00f3, c\u00f3 th\u1ec3 copy full SD card image ho\u1eb7c copy t\u1eebng th\u00e0nh ph\u1ea7n. 4. Downloading images C\u00f3 th\u1ec3 download images v\u00e0o device b\u1eb1ng U-Boot khi U-Boot \u0111\u00e3 \u0111\u01b0\u1ee3c loaded v\u00e0o boot device. D\u00f9ng TFTP \u0111\u1ec3 t\u1ea3i images v\u00e0o RAM r\u1ed3i ghi v\u00e0o SD card. V\u00ed d\u1ee5: Reset boot environments v\u1ec1 default: U-Boot > env default -f -a U-Boot > saveenv U-Boot > reset C\u1ea5u h\u00ecnh boot environments \u0111\u1ec3 t\u1ea3i \u0111\u01b0\u1ee3c images: U-Boot > setenv serverip <TFTP server ip> U-Boot > setenv bootfile <kernel name zImage/Image> U-Boot > setenv fdt_file <dtb image> C\u00f3 th\u1ec3 \u0111\u1eb7t facke MAC address: U-Boot > setenv ethaddr 00:01:02:03:04:05 U-Boot > save Copy zImage/Image v\u00e0o TFTP server, sau \u0111\u00f3 t\u1ea3i n\u00f3 v\u00e0o RAM: U-Boot > dhcp Ki\u1ec3m tra th\u00f4ng tin MMC/SD card: U-Boot > mmc dev U-Boot > mmcinfo Xem usage c\u1ee7a l\u1ec7nh mmc . \"blk#\" b\u1eb1ng v\u1edbi \"<offset c\u1ee7a read/write>/<block length of the card>\". \"cnt\" b\u1eb1ng \"<the size of read/write>/<block length of the card>\". U-Boot > help mmc Usage: mmc read addr blk# cnt mmc write addr blk# cnt mmc erase blk# cnt mmc rescan mmc part - lists available partition on current mmc device mmc dev [dev] [part] - show or set current mmc device [partition] mmc list - lists available devices Program kernel \u0111\u00e3 t\u1ea3i v\u00e0o RAM (t\u1ea1i loadaddr ) v\u00e0o SD card. V\u00ed d\u1ee5 image c\u00f3 size 0x800000 t\u1eeb ${loadaddr} v\u00e0o offset 0x100000 c\u1ee7a microSD card: T\u00ednh to\u00e1n th\u00f4ng s\u1ed1 nh\u01b0 sau: blk# = (microSD Offset)/(SD block length) = 0x100000/0x200 = 0x800 cnt = (image Size)/(SD block length) = 0x800000/0x200 = 0x4000 L\u1ec7nh trong U-Boot: U-Boot > mmc dev 2 0 U-Boot > tftpboot ${loadaddr} ${bootfile} ### Suppose the kernel zImage is less than 8M. U-Boot > mmc write ${loadaddr} 0x800 0x4000 Program dtb file: U-Boot > tftpboot ${fdt_addr} ${fdt_file} U-Boot > mmc write ${fdt_addr} 0x5000 0x800 V\u1edbi i.MX 8M Quad EVK board, d\u00f9ng SD1 slot v\u1edbi mmcblk1 \u0111\u1ec3 boot. Boot the board: U-Boot >setenv bootcmd_mmc 'run bootargs_base mmcargs;mmc dev;mmc read ${loadaddr} 0x800 0x4000;mmc read ${fdt_addr} 0x5000 0x800;bootz ${loadaddr} - $ {fdt_addr}' U-Boot > setenv bootcmd 'run bootcmd_mmc' U-Boot > saveenv 4.1. Using eMMC C\u00f3 m\u1ed9t eMMC chip tr\u00ean kit i.MX 8M Quad v\u00e0 i.MX 8M Mini. Truy c\u1eadp chip n\u00e0y th\u00f4ng qua SDHC1. Table 22. Switch setup for booting from eMMC on i.MX 8M Quad EVK Switch D1 D2 D3 D4 SW801 OFF OFF ON OFF Custom U-Boot \u0111\u00e3 h\u1ed7 tr\u1ee3 c\u00e1c l\u1ec7nh install U-Boot, kernel, device-tree, rootfs trong m\u00f4i tr\u01b0\u1eddng U-Boot. Vi\u1ec7c c\u1ea7n l\u00e0m l\u00e0 partition eMMC cho ph\u00f9 h\u1ee3p. C\u00f3 th\u1ec3 partiton trong m\u00f4i tr\u01b0\u1eddng U-Boot. \u1ede \u0111\u00e2y tr\u00ecnh b\u00e0y partition trong m\u00f4i tr\u01b0\u1eddng Linux v\u00e0 install OS trong c\u1ea3 2 m\u00f4i tr\u01b0\u1eddng. Partitioning eMMC 1.1. Boot m\u1ea1ch b\u1eb1ng SD card. 1.2. Th\u1ef1c hi\u1ec7n partition: $ for dev in /dev/mmcblk0p*; do umount $dev; done $ fdisk /dev/mmcblk0 # L\u01b0u \u00fd: c\u00f3 2 phi\u00ean b\u1ea3n fdisk c\u00f3 c\u00e1ch s\u1eed d\u1ee5ng t\u01b0\u01a1ng \u0111\u1ed1i kh\u00e1c nhau V\u00ed d\u1ee5: Welcome to fdisk (util-linux 2.32.1). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Command (m for help): m Help: GPT M enter protective/hybrid MBR Generic d delete a partition F list free unpartitioned space l list known partition types n add a new partition p print the partition table t change a partition type v verify the partition table i print information about a partition Misc m print this menu x extra functionality (experts only) Script I load disk layout from sfdisk script file O dump disk layout to sfdisk script file Save & Exit w write table to disk and exit q quit without saving changes Create a new label g create a new empty GPT partition table G create a new empty SGI (IRIX) partition table o create a new empty DOS partition table s create a new empty Sun partition table Command (m for help): p Disk /dev/mmcblk0: 14.7 GiB, 15758000128 bytes, 30777344 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 7A880C17-75F2-4CD1-AF51-E8B99D98B90E Device Start End Sectors Size Type /dev/mmcblk0p1 20480 282623 262144 128M Linux filesystem /dev/mmcblk0p2 282624 12582911 12300288 5.9G Linux filesystem /dev/mmcblk0p3 12582912 12845055 262144 128M Linux filesystem /dev/mmcblk0p4 12845056 16777215 3932160 1.9G Linux filesystem Command (m for help): d Partition number (1-4, default 4): Partition 4 has been deleted. Command (m for help): d Partition number (1-3, default 3): Partition 3 has been deleted. Command (m for help): d Partition number (1,2, default 2): Partition 2 has been deleted. Command (m for help): d Selected partition 1 Partition 1 has been deleted. Command (m for help): p Disk /dev/mmcblk0: 14.7 GiB, 15758000128 bytes, 30777344 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 7A880C17-75F2-4CD1-AF51-E8B99D98B90E Command (m for help): n Partition number (1-128, default 1): 1 First sector (34-30777310, default 2048): 20480 Last sector, +sectors or +size{K,M,G,T,P} (20480-30777310, default 30777310): +128M Created a new partition 1 of type 'Linux filesystem' and of size 128 MiB. Partition #1 contains a vfat signature. Do you want to remove the signature? [Y]es/[N]o: Y The signature will be removed by a write command. Command (m for help): n Partition number (2-128, default 2): First sector (34-30777310, default 282624): Last sector, +sectors or +size{K,M,G,T,P} (282624-30777310, default 30777310): +6006M Created a new partition 2 of type 'Linux filesystem' and of size 5.9 GiB. Partition #2 contains a ext4 signature. Do you want to remove the signature? [Y]es/[N]o: Y The signature will be removed by a write command. Command (m for help): n Partition number (3-128, default 3): First sector (34-30777310, default 12582912): Last sector, +sectors or +size{K,M,G,T,P} (12582912-30777310, default 30777310): +128M Created a new partition 3 of type 'Linux filesystem' and of size 128 MiB. Partition #3 contains a vfat signature. Do you want to remove the signature? [Y]es/[N]o: Y The signature will be removed by a write command. Command (m for help): n Partition number (4-128, default 4): First sector (34-30777310, default 12845056): Last sector, +sectors or +size{K,M,G,T,P} (12845056-30777310, default 30777310): Created a new partition 4 of type 'Linux filesystem' and of size 8.6 GiB. Partition #4 contains a ext4 signature. Do you want to remove the signature? [Y]es/[N]o: Y The signature will be removed by a write command. Command (m for help): w The partition table has been altered. Syncing disks. Install OS to eMMC 2.1. Clean boot environments l\u01b0u trong eMMC U-Boot > env default -f -a U-Boot > save U-Boot > reset 2.2. Program U-Boot File n\u1eb1m \u1edf tmp/deploy/images/imx8mqevk/imx-boot-imx8mqevk-sd.bin-flash_evk khi build b\u1eb1ng Yocto ho\u1eb7c trong package/flash.bin khi build standalone. Copy v\u00e0 \u0111\u1ed5i t\u00ean th\u00e0nh /tftpboot/flash.bin . Tr\u00ean linux: $ echo 0 > /sys/block/mmcblk0boot0/force_ro $ dd if=u-flash.bin of=/dev/mmcblk0boot0 bs=1k seek=33 conv=fsync Trong U-Boot. X\u00e1c \u0111\u1ecbnh size in block c\u1ee7a U-Boot: l\u1ea5y size (byte) c\u1ee7a flash.bin / 512. \u0110\u1ed5i k\u1ebft qu\u1ea3 ra hex r\u1ed3i + 1. V\u00ed d\u1ee5 \u0111\u01b0\u1ee3c 0xb0d. U-Boot > setenv uboot_size_blk 0xb0d U-Boot > run installuboot 2.3. Program kernel, device-tree Kernel n\u1eb1m \u1edf tmp/deploy/images/imx8mqevk/Image khi build Yocto ho\u1eb7c arch/arm64/boot/Image khi build standalone. Copy v\u00e0o /tftpboot . Device-tree n\u1eb1m \u1edf: tmp/deploy/images/imx8mqevk/fsl-imx8mq-evk.dtb khi build Yocto ho\u1eb7c arch/arm64/boot/dts/freescale/fsl-imx8mq-evk.dtb khi biuld standalone. Copy v\u00e0 \u0111\u1ed5i t\u00ean th\u00e0nh /tftpboot/devicetree.dtb . Tr\u00ean linux: $ mkdir /mnt/p1 $ mount -t vfat /dev/mmcblk0p1 /mnt/p1 $ cp /run/{fsl-imx8mq-evk.dtb,Image} /mnt/p1 $ sync $ umount /mnt/p1 Trong U-Boot: U-Boot > run installkernel U-Boot > run installfdt 2.4. Program rootfs File n\u1eb1m \u1edf tmp/deploy/images/imx8mqevk/core-image-minimal-imx8mqevk.ext4 . Copy v\u00e0 \u0111\u1ed5i t\u00ean th\u00e0nh /tftpboot/rootfs.ext4 Tr\u00ean Linux: $ mkdir /mnt/p2 $ mount -t ext4 /dev/mmcblk0p2 /mnt/p2 $ cp rootfs.ext4 /mnt/p2 $ sync $ umount /mnt/p2 Trong U-Boot: x\u00e1c \u0111\u1ecbnh size in block c\u1ee7a rootfs.ext4. V\u00ed d\u1ee5 0x20000 U-Boot > setenv root_size_blk 0x20000 U-Boot > run installroot 2.5. Thi\u1ebft l\u1eadp bootargs V\u1edbi c\u00e1c lo\u1ea1i display kh\u00e1c nhau, c\u1ea7n bootargs kh\u00e1c nhau. Xem i.MX Linux User Guide \u0111\u1ec3 bi\u1ebft chi ti\u1ebft. Trong custom U-Boot \u0111\u00e3 c\u00f3 s\u1eb5n l\u1ec7nh boot n\u00ean sau khi c\u1eadp nh\u1eadt OS, m\u1ea1ch \u0111\u00e3 c\u00f3 th\u1ec3 boot \u0111\u01b0\u1ee3c. 2.8. Install recovery OS T\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean. 4.2. Using SD card V\u1edbi i.MX 8M Quad EVK, boot t\u1eeb SD card \u0111\u1eb7t \u1edf slot SD2 Table 9. Switch setup for booting from TF on i.MX 8M Quad EVK Switch D1 D2 D3 D4 SW801 ON ON OFF OFF SW802 ON OFF - - SD card image cung c\u1ea5p \u0111\u1ee7 \u0111\u1ec3 boot v\u1edbi U-Boot v\u00e0 kernel. \u0110\u1ec3 flash SD card image, k\u1ebft n\u1ed1i SD card v\u1edbi m\u00e1y t\u00ednh v\u00e0 ch\u1ea1y c\u00e1c l\u1ec7nh sau: $ bunzip2 -dk -f <image_name>.sdcard.bz2 $ sudo dd if=<image name>.sdcard of=/dev/<sdcard> bs=1M conv=fsync Xem th\u00eam t\u1ea1i ph\u1ea7n \"Preparing an SD/MMC Card to Boot\" trong the i.MX Linux\u00ae User's Guide (IMXLUG). V\u00ed d\u1ee5: $ bunzip2 -dk -f core-image-minimal-imx8mqevk.sdcard.bz2 $ sudo dd if=core-image-minimal-imx8mqevk.sdcard of=/dev/mmcblk0 bs=1M conv=fsync \u0110\u1ec3 c\u1eadp nh\u1eadt c\u00e1c th\u00e0nh ph\u1ea7n OS (kernel, device-tree, rootfs) th\u00ec l\u00e0m nh\u01b0 sau: Khi th\u1ef1c hi\u1ec7n c\u00e1c l\u1ec7nh tr\u00ean, SD card \u0111\u00e3 c\u00f3 c\u00e1c partition l\u00e0 mmcblk0p1 (cho kernel, DTB) v\u00e0 mmcblk0p2 (cho rootfs). Vi\u1ec7c c\u1ea7n l\u00e0m l\u00e0m mount c\u00e1c parition n\u00e0y v\u00e0 copy image v\u00e0o. V\u00ed d\u1ee5 c\u1ee5 th\u1ec3: * V\u1edbi kernel, DTB: $ mkdir /tmp/p1 $ sudo mkfs.vfat /dev/mmcblk0p1 (Th\u01b0\u1eddng ph\u1ea3i umount partition n\u00e0y tr\u01b0\u1edbc) $ sudo mount -t vfat /dev/mmcblk0p1 /tmp/p1/ $ sudo cp <build_dir>/tmp/deploy/images/imx8mqevk/{Image,fsl-imx8mq-evk.dtb} /tmp/p1/ $ sudo umount /tmp/p1 * V\u1edbi rootfs: $ mkdir /tmp/p2 $ sudo mkfs.ext4 /dev/mmcblk0p2 $ sudo mount -t ext4 /dev/mmcblk0p2 /tmp/p2 $ tar -xjvf <build_dir>/tmp/deploy/images/imx8mqevk/core-image-minimal-imx8mqevk.tar.bz2 -C /tmp/p2/ $ sudo umount /tmp/p2 $ sync 4.3. Using USB Ch\u1ec9 h\u1ed7 tr\u1ee3 boot t\u1eeb ph\u1ea7n kernel, kh\u00f4ng h\u1ed7 tr\u1ee3 U-Boot. \u0110\u1ec3 boot t\u1eeb USB, c\u1ea7n l\u00e0m nh\u01b0 sau: Partition USB th\u00e0nh 2 ph\u00e2n v\u00f9ng: fat32 ch\u1ee9a kernel, device-tree; ext4 ch\u1ee9a rootfs. Copy kernel (Image), device-tree (devicetree.dtb) v\u00e0o ph\u00e2n v\u00f9ng fat32. Copy rootfs (rootfs.ext4) v\u00e0o ph\u00e2n v\u00f9ng ext4. Trong U-Boot: U-Boot > usb start U-Boot > setenv usbroot /dev/sda2 rootwait rw U-Boot > setenv bootargs ${jh_clk} console=${console} root=${usbroot} U-Boot > fatload usb 0:1 $loadaddr Image U-Boot > fatload usb 0:1 $fdt_addr device-tree.dtb U-Boot > booti $loadaddr - $fdt_addr 5. Manufacturing Tool, MFGTool MFGTool cung c\u1ea5p kh\u1ea3 n\u0103ng boot th\u00f4ng qua USB Download Protocol. C\u00e1c recipes \u0111\u1ec3 build manufacturing tool image l\u00e0 linux-imx-mfgtool v\u00e0 u-boot-mfgtool . \u0110\u1ec3 buld manufacturing tool, ch\u1ea1y l\u1ec7nh: $ bitbake fsl-image-mfgtool-initramfs","title":"i.MX Linux User's Guide"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/#imx-linux-users-guide","text":"Booting Linux OS.","title":"i.MX Linux User's Guide"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/#1-software-overview","text":"M\u1ed9t boot Linux image tr\u00ean i.MX 8M Quad ho\u1eb7c i.MX 8M Mini g\u1ed3m 4 th\u00e0nh ph\u1ea7n: imx-boot (built b\u1eb1ng imx-mkimage), g\u1ed3m SPL, U-Boot, Arm Trusted Firmware, DDR firmware v\u00e0 HDMI firmware. Linux kernel images. Device tree file (.dtb). Root file system (rootfs).","title":"1. Software Overview"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/#2-universal-update-utility","text":"UUU ch\u1ea1y tr\u00ean Windows ho\u1eb7c Linux OS, \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 t\u1ea3i images v\u00e0o c\u00e1c devices kh\u00e1c nhau c\u1ee7a i.MX board.","title":"2. Universal update utility"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/#3-preparing-an-sdmmc-card-to-boot","text":"Yocto Project build t\u1ea1o ra SD card image v\u00e0 c\u00f3 th\u1ec3 d\u00f9ng tr\u1ef1c ti\u1ebfp n\u00f3 \u0111\u1ec3 t\u1ea1o boot SD card. Do \u0111\u00f3, c\u00f3 th\u1ec3 copy full SD card image ho\u1eb7c copy t\u1eebng th\u00e0nh ph\u1ea7n.","title":"3. Preparing an SD/MMC card to boot"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/#4-downloading-images","text":"C\u00f3 th\u1ec3 download images v\u00e0o device b\u1eb1ng U-Boot khi U-Boot \u0111\u00e3 \u0111\u01b0\u1ee3c loaded v\u00e0o boot device. D\u00f9ng TFTP \u0111\u1ec3 t\u1ea3i images v\u00e0o RAM r\u1ed3i ghi v\u00e0o SD card. V\u00ed d\u1ee5: Reset boot environments v\u1ec1 default: U-Boot > env default -f -a U-Boot > saveenv U-Boot > reset C\u1ea5u h\u00ecnh boot environments \u0111\u1ec3 t\u1ea3i \u0111\u01b0\u1ee3c images: U-Boot > setenv serverip <TFTP server ip> U-Boot > setenv bootfile <kernel name zImage/Image> U-Boot > setenv fdt_file <dtb image> C\u00f3 th\u1ec3 \u0111\u1eb7t facke MAC address: U-Boot > setenv ethaddr 00:01:02:03:04:05 U-Boot > save Copy zImage/Image v\u00e0o TFTP server, sau \u0111\u00f3 t\u1ea3i n\u00f3 v\u00e0o RAM: U-Boot > dhcp Ki\u1ec3m tra th\u00f4ng tin MMC/SD card: U-Boot > mmc dev U-Boot > mmcinfo Xem usage c\u1ee7a l\u1ec7nh mmc . \"blk#\" b\u1eb1ng v\u1edbi \"<offset c\u1ee7a read/write>/<block length of the card>\". \"cnt\" b\u1eb1ng \"<the size of read/write>/<block length of the card>\". U-Boot > help mmc Usage: mmc read addr blk# cnt mmc write addr blk# cnt mmc erase blk# cnt mmc rescan mmc part - lists available partition on current mmc device mmc dev [dev] [part] - show or set current mmc device [partition] mmc list - lists available devices Program kernel \u0111\u00e3 t\u1ea3i v\u00e0o RAM (t\u1ea1i loadaddr ) v\u00e0o SD card. V\u00ed d\u1ee5 image c\u00f3 size 0x800000 t\u1eeb ${loadaddr} v\u00e0o offset 0x100000 c\u1ee7a microSD card: T\u00ednh to\u00e1n th\u00f4ng s\u1ed1 nh\u01b0 sau: blk# = (microSD Offset)/(SD block length) = 0x100000/0x200 = 0x800 cnt = (image Size)/(SD block length) = 0x800000/0x200 = 0x4000 L\u1ec7nh trong U-Boot: U-Boot > mmc dev 2 0 U-Boot > tftpboot ${loadaddr} ${bootfile} ### Suppose the kernel zImage is less than 8M. U-Boot > mmc write ${loadaddr} 0x800 0x4000 Program dtb file: U-Boot > tftpboot ${fdt_addr} ${fdt_file} U-Boot > mmc write ${fdt_addr} 0x5000 0x800 V\u1edbi i.MX 8M Quad EVK board, d\u00f9ng SD1 slot v\u1edbi mmcblk1 \u0111\u1ec3 boot. Boot the board: U-Boot >setenv bootcmd_mmc 'run bootargs_base mmcargs;mmc dev;mmc read ${loadaddr} 0x800 0x4000;mmc read ${fdt_addr} 0x5000 0x800;bootz ${loadaddr} - $ {fdt_addr}' U-Boot > setenv bootcmd 'run bootcmd_mmc' U-Boot > saveenv","title":"4. Downloading images"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/#41-using-emmc","text":"C\u00f3 m\u1ed9t eMMC chip tr\u00ean kit i.MX 8M Quad v\u00e0 i.MX 8M Mini. Truy c\u1eadp chip n\u00e0y th\u00f4ng qua SDHC1. Table 22. Switch setup for booting from eMMC on i.MX 8M Quad EVK Switch D1 D2 D3 D4 SW801 OFF OFF ON OFF Custom U-Boot \u0111\u00e3 h\u1ed7 tr\u1ee3 c\u00e1c l\u1ec7nh install U-Boot, kernel, device-tree, rootfs trong m\u00f4i tr\u01b0\u1eddng U-Boot. Vi\u1ec7c c\u1ea7n l\u00e0m l\u00e0 partition eMMC cho ph\u00f9 h\u1ee3p. C\u00f3 th\u1ec3 partiton trong m\u00f4i tr\u01b0\u1eddng U-Boot. \u1ede \u0111\u00e2y tr\u00ecnh b\u00e0y partition trong m\u00f4i tr\u01b0\u1eddng Linux v\u00e0 install OS trong c\u1ea3 2 m\u00f4i tr\u01b0\u1eddng. Partitioning eMMC 1.1. Boot m\u1ea1ch b\u1eb1ng SD card. 1.2. Th\u1ef1c hi\u1ec7n partition: $ for dev in /dev/mmcblk0p*; do umount $dev; done $ fdisk /dev/mmcblk0 # L\u01b0u \u00fd: c\u00f3 2 phi\u00ean b\u1ea3n fdisk c\u00f3 c\u00e1ch s\u1eed d\u1ee5ng t\u01b0\u01a1ng \u0111\u1ed1i kh\u00e1c nhau V\u00ed d\u1ee5: Welcome to fdisk (util-linux 2.32.1). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Command (m for help): m Help: GPT M enter protective/hybrid MBR Generic d delete a partition F list free unpartitioned space l list known partition types n add a new partition p print the partition table t change a partition type v verify the partition table i print information about a partition Misc m print this menu x extra functionality (experts only) Script I load disk layout from sfdisk script file O dump disk layout to sfdisk script file Save & Exit w write table to disk and exit q quit without saving changes Create a new label g create a new empty GPT partition table G create a new empty SGI (IRIX) partition table o create a new empty DOS partition table s create a new empty Sun partition table Command (m for help): p Disk /dev/mmcblk0: 14.7 GiB, 15758000128 bytes, 30777344 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 7A880C17-75F2-4CD1-AF51-E8B99D98B90E Device Start End Sectors Size Type /dev/mmcblk0p1 20480 282623 262144 128M Linux filesystem /dev/mmcblk0p2 282624 12582911 12300288 5.9G Linux filesystem /dev/mmcblk0p3 12582912 12845055 262144 128M Linux filesystem /dev/mmcblk0p4 12845056 16777215 3932160 1.9G Linux filesystem Command (m for help): d Partition number (1-4, default 4): Partition 4 has been deleted. Command (m for help): d Partition number (1-3, default 3): Partition 3 has been deleted. Command (m for help): d Partition number (1,2, default 2): Partition 2 has been deleted. Command (m for help): d Selected partition 1 Partition 1 has been deleted. Command (m for help): p Disk /dev/mmcblk0: 14.7 GiB, 15758000128 bytes, 30777344 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 7A880C17-75F2-4CD1-AF51-E8B99D98B90E Command (m for help): n Partition number (1-128, default 1): 1 First sector (34-30777310, default 2048): 20480 Last sector, +sectors or +size{K,M,G,T,P} (20480-30777310, default 30777310): +128M Created a new partition 1 of type 'Linux filesystem' and of size 128 MiB. Partition #1 contains a vfat signature. Do you want to remove the signature? [Y]es/[N]o: Y The signature will be removed by a write command. Command (m for help): n Partition number (2-128, default 2): First sector (34-30777310, default 282624): Last sector, +sectors or +size{K,M,G,T,P} (282624-30777310, default 30777310): +6006M Created a new partition 2 of type 'Linux filesystem' and of size 5.9 GiB. Partition #2 contains a ext4 signature. Do you want to remove the signature? [Y]es/[N]o: Y The signature will be removed by a write command. Command (m for help): n Partition number (3-128, default 3): First sector (34-30777310, default 12582912): Last sector, +sectors or +size{K,M,G,T,P} (12582912-30777310, default 30777310): +128M Created a new partition 3 of type 'Linux filesystem' and of size 128 MiB. Partition #3 contains a vfat signature. Do you want to remove the signature? [Y]es/[N]o: Y The signature will be removed by a write command. Command (m for help): n Partition number (4-128, default 4): First sector (34-30777310, default 12845056): Last sector, +sectors or +size{K,M,G,T,P} (12845056-30777310, default 30777310): Created a new partition 4 of type 'Linux filesystem' and of size 8.6 GiB. Partition #4 contains a ext4 signature. Do you want to remove the signature? [Y]es/[N]o: Y The signature will be removed by a write command. Command (m for help): w The partition table has been altered. Syncing disks. Install OS to eMMC 2.1. Clean boot environments l\u01b0u trong eMMC U-Boot > env default -f -a U-Boot > save U-Boot > reset 2.2. Program U-Boot File n\u1eb1m \u1edf tmp/deploy/images/imx8mqevk/imx-boot-imx8mqevk-sd.bin-flash_evk khi build b\u1eb1ng Yocto ho\u1eb7c trong package/flash.bin khi build standalone. Copy v\u00e0 \u0111\u1ed5i t\u00ean th\u00e0nh /tftpboot/flash.bin . Tr\u00ean linux: $ echo 0 > /sys/block/mmcblk0boot0/force_ro $ dd if=u-flash.bin of=/dev/mmcblk0boot0 bs=1k seek=33 conv=fsync Trong U-Boot. X\u00e1c \u0111\u1ecbnh size in block c\u1ee7a U-Boot: l\u1ea5y size (byte) c\u1ee7a flash.bin / 512. \u0110\u1ed5i k\u1ebft qu\u1ea3 ra hex r\u1ed3i + 1. V\u00ed d\u1ee5 \u0111\u01b0\u1ee3c 0xb0d. U-Boot > setenv uboot_size_blk 0xb0d U-Boot > run installuboot 2.3. Program kernel, device-tree Kernel n\u1eb1m \u1edf tmp/deploy/images/imx8mqevk/Image khi build Yocto ho\u1eb7c arch/arm64/boot/Image khi build standalone. Copy v\u00e0o /tftpboot . Device-tree n\u1eb1m \u1edf: tmp/deploy/images/imx8mqevk/fsl-imx8mq-evk.dtb khi build Yocto ho\u1eb7c arch/arm64/boot/dts/freescale/fsl-imx8mq-evk.dtb khi biuld standalone. Copy v\u00e0 \u0111\u1ed5i t\u00ean th\u00e0nh /tftpboot/devicetree.dtb . Tr\u00ean linux: $ mkdir /mnt/p1 $ mount -t vfat /dev/mmcblk0p1 /mnt/p1 $ cp /run/{fsl-imx8mq-evk.dtb,Image} /mnt/p1 $ sync $ umount /mnt/p1 Trong U-Boot: U-Boot > run installkernel U-Boot > run installfdt 2.4. Program rootfs File n\u1eb1m \u1edf tmp/deploy/images/imx8mqevk/core-image-minimal-imx8mqevk.ext4 . Copy v\u00e0 \u0111\u1ed5i t\u00ean th\u00e0nh /tftpboot/rootfs.ext4 Tr\u00ean Linux: $ mkdir /mnt/p2 $ mount -t ext4 /dev/mmcblk0p2 /mnt/p2 $ cp rootfs.ext4 /mnt/p2 $ sync $ umount /mnt/p2 Trong U-Boot: x\u00e1c \u0111\u1ecbnh size in block c\u1ee7a rootfs.ext4. V\u00ed d\u1ee5 0x20000 U-Boot > setenv root_size_blk 0x20000 U-Boot > run installroot 2.5. Thi\u1ebft l\u1eadp bootargs V\u1edbi c\u00e1c lo\u1ea1i display kh\u00e1c nhau, c\u1ea7n bootargs kh\u00e1c nhau. Xem i.MX Linux User Guide \u0111\u1ec3 bi\u1ebft chi ti\u1ebft. Trong custom U-Boot \u0111\u00e3 c\u00f3 s\u1eb5n l\u1ec7nh boot n\u00ean sau khi c\u1eadp nh\u1eadt OS, m\u1ea1ch \u0111\u00e3 c\u00f3 th\u1ec3 boot \u0111\u01b0\u1ee3c. 2.8. Install recovery OS T\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean.","title":"4.1. Using eMMC"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/#42-using-sd-card","text":"V\u1edbi i.MX 8M Quad EVK, boot t\u1eeb SD card \u0111\u1eb7t \u1edf slot SD2 Table 9. Switch setup for booting from TF on i.MX 8M Quad EVK Switch D1 D2 D3 D4 SW801 ON ON OFF OFF SW802 ON OFF - - SD card image cung c\u1ea5p \u0111\u1ee7 \u0111\u1ec3 boot v\u1edbi U-Boot v\u00e0 kernel. \u0110\u1ec3 flash SD card image, k\u1ebft n\u1ed1i SD card v\u1edbi m\u00e1y t\u00ednh v\u00e0 ch\u1ea1y c\u00e1c l\u1ec7nh sau: $ bunzip2 -dk -f <image_name>.sdcard.bz2 $ sudo dd if=<image name>.sdcard of=/dev/<sdcard> bs=1M conv=fsync Xem th\u00eam t\u1ea1i ph\u1ea7n \"Preparing an SD/MMC Card to Boot\" trong the i.MX Linux\u00ae User's Guide (IMXLUG). V\u00ed d\u1ee5: $ bunzip2 -dk -f core-image-minimal-imx8mqevk.sdcard.bz2 $ sudo dd if=core-image-minimal-imx8mqevk.sdcard of=/dev/mmcblk0 bs=1M conv=fsync \u0110\u1ec3 c\u1eadp nh\u1eadt c\u00e1c th\u00e0nh ph\u1ea7n OS (kernel, device-tree, rootfs) th\u00ec l\u00e0m nh\u01b0 sau: Khi th\u1ef1c hi\u1ec7n c\u00e1c l\u1ec7nh tr\u00ean, SD card \u0111\u00e3 c\u00f3 c\u00e1c partition l\u00e0 mmcblk0p1 (cho kernel, DTB) v\u00e0 mmcblk0p2 (cho rootfs). Vi\u1ec7c c\u1ea7n l\u00e0m l\u00e0m mount c\u00e1c parition n\u00e0y v\u00e0 copy image v\u00e0o. V\u00ed d\u1ee5 c\u1ee5 th\u1ec3: * V\u1edbi kernel, DTB: $ mkdir /tmp/p1 $ sudo mkfs.vfat /dev/mmcblk0p1 (Th\u01b0\u1eddng ph\u1ea3i umount partition n\u00e0y tr\u01b0\u1edbc) $ sudo mount -t vfat /dev/mmcblk0p1 /tmp/p1/ $ sudo cp <build_dir>/tmp/deploy/images/imx8mqevk/{Image,fsl-imx8mq-evk.dtb} /tmp/p1/ $ sudo umount /tmp/p1 * V\u1edbi rootfs: $ mkdir /tmp/p2 $ sudo mkfs.ext4 /dev/mmcblk0p2 $ sudo mount -t ext4 /dev/mmcblk0p2 /tmp/p2 $ tar -xjvf <build_dir>/tmp/deploy/images/imx8mqevk/core-image-minimal-imx8mqevk.tar.bz2 -C /tmp/p2/ $ sudo umount /tmp/p2 $ sync","title":"4.2. Using SD card"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/#43-using-usb","text":"Ch\u1ec9 h\u1ed7 tr\u1ee3 boot t\u1eeb ph\u1ea7n kernel, kh\u00f4ng h\u1ed7 tr\u1ee3 U-Boot. \u0110\u1ec3 boot t\u1eeb USB, c\u1ea7n l\u00e0m nh\u01b0 sau: Partition USB th\u00e0nh 2 ph\u00e2n v\u00f9ng: fat32 ch\u1ee9a kernel, device-tree; ext4 ch\u1ee9a rootfs. Copy kernel (Image), device-tree (devicetree.dtb) v\u00e0o ph\u00e2n v\u00f9ng fat32. Copy rootfs (rootfs.ext4) v\u00e0o ph\u00e2n v\u00f9ng ext4. Trong U-Boot: U-Boot > usb start U-Boot > setenv usbroot /dev/sda2 rootwait rw U-Boot > setenv bootargs ${jh_clk} console=${console} root=${usbroot} U-Boot > fatload usb 0:1 $loadaddr Image U-Boot > fatload usb 0:1 $fdt_addr device-tree.dtb U-Boot > booti $loadaddr - $fdt_addr","title":"4.3. Using USB"},{"location":"projects/imx8/ip-docs/Guideline_Install_OS/#5-manufacturing-tool-mfgtool","text":"MFGTool cung c\u1ea5p kh\u1ea3 n\u0103ng boot th\u00f4ng qua USB Download Protocol. C\u00e1c recipes \u0111\u1ec3 build manufacturing tool image l\u00e0 linux-imx-mfgtool v\u00e0 u-boot-mfgtool . \u0110\u1ec3 buld manufacturing tool, ch\u1ea1y l\u1ec7nh: $ bitbake fsl-image-mfgtool-initramfs","title":"5. Manufacturing Tool, MFGTool"},{"location":"projects/imx8/ip-docs/Guideline_Update_OS/","text":"Ph\u1ea7n n\u00e0y tr\u00ecnh b\u00e0y t\u00ednh n\u0103ng c\u1eadp nh\u1eadt h\u1ec7 \u0111i\u1ec1u h\u00e0nh 1. C\u1eadp nh\u1eadt h\u1ec7 \u0111i\u1ec1u h\u00e0nh t\u1eeb xa T\u1ea1i giao di\u1ec7n, ng\u01b0\u1eddi d\u00f9ng m\u1edf \u1ee9ng d\u1ee5ng c\u1eadp nh\u1eadt H\u0110H, ch\u1ecdn c\u1eadp nh\u1eadt qua OTA \u1ee8ng d\u1ee5ng setup m\u1ea1ch \u0111\u1ec3 chu\u1ea9n b\u1ecb c\u1eadp nh\u1eadt trong ch\u1ebf \u0111\u1ed9 recovery M\u1ea1ch reboot v\u1ec1 recovery mode r\u1ed3i ti\u1ebfn h\u00e0nh c\u1eadp nh\u1eadt M\u1ea1ch reboot v\u1ec1 normal mode 2. C\u1eadp nh\u1eadt c\u00e1c service c\u1ee7a h\u1ec7 th\u1ed1ng 3. C\u1eadp nh\u1eadt H\u0110H t\u1ea1i ch\u1ed7 d\u00f9ng USB 3.1. Tr\u01b0\u1eddng h\u1ee3p m\u1ea1ch l\u00ean U-Boot, kh\u00f4ng l\u00ean Linux M\u1ea1ch \u0111\u00e3 x\u1ea3y ra t\u1ea5t c\u1ea3 c\u00e1c v\u1ea5n \u0111\u1ec1 sau: H\u1ecfng normal OS H\u1ecfng recovery OS Kh\u00f4ng boot \u0111\u01b0\u1ee3c t\u1eeb NET Quy tr\u00ecnh: Ng\u01b0\u1eddi d\u00f9ng c\u1eafm USB v\u00e0o thi\u1ebft b\u1ecb (USB n\u00e0y do nh\u00e0 ph\u00e1t tri\u1ec3n thi\u1ebft l\u1eadp) T\u1eaft r\u1ed3i b\u1eadt ngu\u1ed3n thi\u1ebft b\u1ecb Thi\u1ebft b\u1ecb t\u1ef1 \u0111\u1ed9ng c\u1eadp nh\u1eadt kernel, device-tree, rootfs trong m\u00f4i tr\u01b0\u1eddng U-Boot Thi\u1ebft b\u1ecb t\u1ef1 kh\u1edfi \u0111\u1ed9ng l\u1ea1i v\u00e0o recovery mode \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o recovery OS \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng Thi\u1ebft b\u1ecb t\u1ef1 kh\u1edfi \u0111\u1ed9ng v\u1ec1 normal mode Th\u00f4ng b\u00e1o c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng 3.2. Tr\u01b0\u1eddng h\u1ee3p c\u1eadp nh\u1eadt m\u1edbi (m\u1ea1ch \u0111ang ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng \u2013 OPTIONAL) Ng\u01b0\u1eddi d\u00f9ng c\u1eafm USB c\u00f3 ch\u1ee9a h\u1ec7 \u0111i\u1ec1u h\u00e0nh T\u1ea1i giao di\u1ec7n, ng\u01b0\u1eddi d\u00f9ng m\u1edf \u1ee9ng d\u1ee5ng c\u1eadp nh\u1eadt H\u0110H, ch\u1ecdn c\u1eadp nh\u1eadt qua USB \u1ee8ng d\u1ee5ng setup m\u1ea1ch \u0111\u1ec3 chu\u1ea9n b\u1ecb c\u1eadp nh\u1eadt trong ch\u1ebf \u0111\u1ed9 recovery M\u1ea1ch reboot v\u1ec1 recovery mode r\u1ed3i ti\u1ebfn h\u00e0nh c\u1eadp nh\u1eadt M\u1ea1ch reboot v\u1ec1 normal mode 4. C\u1eadp nh\u1eadt H\u0110H d\u00f9ng SD card (trong tr\u01b0\u1eddng h\u1ee3p m\u1ea1ch ch\u1ebft) Tr\u01b0\u1eddng h\u1ee3p n\u00e0y th\u01b0\u1eddng \u00e1p d\u1ee5ng cho m\u1ea1ch h\u1ecfng Boot loader Ng\u01b0\u1eddi d\u00f9ng c\u1eafm SD card T\u1eaft r\u1ed3i b\u1eadt ngu\u1ed3n thi\u1ebft b\u1ecb M\u1ea1ch kh\u1edfi \u0111\u1ed9ng U-Boot t\u1eeb SD card T\u1ea1i U-boot, m\u1ea1ch t\u1ef1 \u0111\u1ed9ng c\u1eadp nh\u1eadt h\u1ec7 \u0111i\u1ec1u h\u00e0nh (g\u1ed3m U-boot, device-tree, kernel, rootfs) Thi\u1ebft b\u1ecb t\u1ef1 kh\u1edfi \u0111\u1ed9ng l\u1ea1i v\u00e0o recovery mode \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o recovery OS \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng Thi\u1ebft b\u1ecb t\u1ef1 kh\u1edfi \u0111\u1ed9ng v\u1ec1 normal mode Th\u00f4ng b\u00e1o c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng","title":"Guideline Update OS"},{"location":"projects/imx8/ip-docs/Guideline_Update_OS/#1-cap-nhat-he-ieu-hanh-tu-xa","text":"T\u1ea1i giao di\u1ec7n, ng\u01b0\u1eddi d\u00f9ng m\u1edf \u1ee9ng d\u1ee5ng c\u1eadp nh\u1eadt H\u0110H, ch\u1ecdn c\u1eadp nh\u1eadt qua OTA \u1ee8ng d\u1ee5ng setup m\u1ea1ch \u0111\u1ec3 chu\u1ea9n b\u1ecb c\u1eadp nh\u1eadt trong ch\u1ebf \u0111\u1ed9 recovery M\u1ea1ch reboot v\u1ec1 recovery mode r\u1ed3i ti\u1ebfn h\u00e0nh c\u1eadp nh\u1eadt M\u1ea1ch reboot v\u1ec1 normal mode","title":"1. C\u1eadp nh\u1eadt h\u1ec7 \u0111i\u1ec1u h\u00e0nh t\u1eeb xa"},{"location":"projects/imx8/ip-docs/Guideline_Update_OS/#2-cap-nhat-cac-service-cua-he-thong","text":"","title":"2. C\u1eadp nh\u1eadt c\u00e1c service c\u1ee7a h\u1ec7 th\u1ed1ng"},{"location":"projects/imx8/ip-docs/Guideline_Update_OS/#3-cap-nhat-hh-tai-cho-dung-usb","text":"","title":"3. C\u1eadp nh\u1eadt H\u0110H t\u1ea1i ch\u1ed7 d\u00f9ng USB"},{"location":"projects/imx8/ip-docs/Guideline_Update_OS/#31-truong-hop-mach-len-u-boot-khong-len-linux","text":"M\u1ea1ch \u0111\u00e3 x\u1ea3y ra t\u1ea5t c\u1ea3 c\u00e1c v\u1ea5n \u0111\u1ec1 sau: H\u1ecfng normal OS H\u1ecfng recovery OS Kh\u00f4ng boot \u0111\u01b0\u1ee3c t\u1eeb NET Quy tr\u00ecnh: Ng\u01b0\u1eddi d\u00f9ng c\u1eafm USB v\u00e0o thi\u1ebft b\u1ecb (USB n\u00e0y do nh\u00e0 ph\u00e1t tri\u1ec3n thi\u1ebft l\u1eadp) T\u1eaft r\u1ed3i b\u1eadt ngu\u1ed3n thi\u1ebft b\u1ecb Thi\u1ebft b\u1ecb t\u1ef1 \u0111\u1ed9ng c\u1eadp nh\u1eadt kernel, device-tree, rootfs trong m\u00f4i tr\u01b0\u1eddng U-Boot Thi\u1ebft b\u1ecb t\u1ef1 kh\u1edfi \u0111\u1ed9ng l\u1ea1i v\u00e0o recovery mode \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o recovery OS \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng Thi\u1ebft b\u1ecb t\u1ef1 kh\u1edfi \u0111\u1ed9ng v\u1ec1 normal mode Th\u00f4ng b\u00e1o c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng","title":"3.1. Tr\u01b0\u1eddng h\u1ee3p m\u1ea1ch l\u00ean U-Boot, kh\u00f4ng l\u00ean Linux"},{"location":"projects/imx8/ip-docs/Guideline_Update_OS/#32-truong-hop-cap-nhat-moi-mach-ang-hoat-ong-binh-thuong-optional","text":"Ng\u01b0\u1eddi d\u00f9ng c\u1eafm USB c\u00f3 ch\u1ee9a h\u1ec7 \u0111i\u1ec1u h\u00e0nh T\u1ea1i giao di\u1ec7n, ng\u01b0\u1eddi d\u00f9ng m\u1edf \u1ee9ng d\u1ee5ng c\u1eadp nh\u1eadt H\u0110H, ch\u1ecdn c\u1eadp nh\u1eadt qua USB \u1ee8ng d\u1ee5ng setup m\u1ea1ch \u0111\u1ec3 chu\u1ea9n b\u1ecb c\u1eadp nh\u1eadt trong ch\u1ebf \u0111\u1ed9 recovery M\u1ea1ch reboot v\u1ec1 recovery mode r\u1ed3i ti\u1ebfn h\u00e0nh c\u1eadp nh\u1eadt M\u1ea1ch reboot v\u1ec1 normal mode","title":"3.2. Tr\u01b0\u1eddng h\u1ee3p c\u1eadp nh\u1eadt m\u1edbi (m\u1ea1ch \u0111ang ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng \u2013 OPTIONAL)"},{"location":"projects/imx8/ip-docs/Guideline_Update_OS/#4-cap-nhat-hh-dung-sd-card-trong-truong-hop-mach-chet","text":"Tr\u01b0\u1eddng h\u1ee3p n\u00e0y th\u01b0\u1eddng \u00e1p d\u1ee5ng cho m\u1ea1ch h\u1ecfng Boot loader Ng\u01b0\u1eddi d\u00f9ng c\u1eafm SD card T\u1eaft r\u1ed3i b\u1eadt ngu\u1ed3n thi\u1ebft b\u1ecb M\u1ea1ch kh\u1edfi \u0111\u1ed9ng U-Boot t\u1eeb SD card T\u1ea1i U-boot, m\u1ea1ch t\u1ef1 \u0111\u1ed9ng c\u1eadp nh\u1eadt h\u1ec7 \u0111i\u1ec1u h\u00e0nh (g\u1ed3m U-boot, device-tree, kernel, rootfs) Thi\u1ebft b\u1ecb t\u1ef1 kh\u1edfi \u0111\u1ed9ng l\u1ea1i v\u00e0o recovery mode \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o recovery OS \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng Thi\u1ebft b\u1ecb t\u1ef1 kh\u1edfi \u0111\u1ed9ng v\u1ec1 normal mode Th\u00f4ng b\u00e1o c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng","title":"4. C\u1eadp nh\u1eadt H\u0110H d\u00f9ng SD card (trong tr\u01b0\u1eddng h\u1ee3p m\u1ea1ch ch\u1ebft)"},{"location":"projects/zynq/picozed/","text":"Original article Theo [1], KIT Picozed SDR ch\u1ee9a 2 giao di\u1ec7n Ethernet trong \u0111\u00f3 Ethernet 0 \u0111\u01b0\u1ee3c n\u1ed1i v\u00e0o PS th\u00f4ng qua giao di\u1ec7n MIO v\u00e0 Ethernet 1 n\u1ed1i v\u00e0o ph\u1ea7n PL c\u1ee7a Zynq th\u00f4ng qua EMIO. C\u1ea3 hai giao di\u1ec7n Ethernet \u0111\u1ec1u \u0111\u01b0\u1ee3c n\u1ed1i \u0111\u1ebfn chip PHY Marvell 88E1510. Chip PHY Marvell tr\u00ean Picozed s\u1eed d\u1ee5ng giao di\u1ec7n RGMII trong khi Zyng Eth1 s\u1eed d\u1ee5ng giao di\u1ec7n GMII. Do \u0111\u00f3, c\u1ea7n ph\u1ea3i s\u1eed d\u1ee5ng m\u1ed9t c\u01a1 ch\u1ebf chuy\u1ec3n \u0111\u1ed5i gi\u1eefa GMII <-> RGMII.","title":"Picozed"},{"location":"projects/zynq/u-boot/","text":"Porting Linux for Zynq U-Boot on Zynq References [1] - Build U-Boot - xilinx-wiki.atlassian.net Build U-Boot for Zedboard Ti\u1ebfn h\u00e0nh build u-boot cho chip Zynq7000 tr\u00ean Zedboard theo h\u01b0\u1edbng d\u1eabn t\u1eeb xilinx-wiki.atlassian.net - Build U-Boot . Qu\u00e1 tr\u00ecnh build U-Boot cho m\u1ed9t thi\u1ebft b\u1ecb Zynq7000 c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng b\u1ed9 c\u00f4ng c\u1ee5 Petalinux c\u1ee7a Xilinx. Th\u1eed nghi\u1ec7m n\u00e0y s\u1ebd tr\u1ef1c ti\u1ebfp build U-Boot t\u1eeb m\u00e3 ngu\u1ed3n cung c\u1ea5p b\u1edfi Xilinx t\u1eeb Github b\u1eb1ng compiler cung c\u1ea5p b\u1edfi Xilinx SDK. make U-Boot Ti\u1ebfn h\u00e0nh theo c\u00e1c b\u01b0\u1edbc h\u01b0\u1edbng d\u1eabn trong [1], ti\u1ebfn h\u00e0nh fetch source code, c\u1ea5u h\u00ecnh v\u00e0 make U-Boot. > git clone https://github.com/Xilinx/u-boot-xlnx.git > cd u-boot-xlnx > export CROSS_COMPILE=arm-linux-gnueabihf- > export ARCH=arm > source <SDK setting.sh file> // khai b\u00e1o arm-linux-gnueabihf compiler > make distclean > make zynq_zed_defconfig > make K\u1ebft qu\u1ea3 build l\u00e0 file u-boot.elf . File n\u00e0y c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh ch\u1ea1y th\u1eed nghi\u1ec7m b\u1eb1ng ph\u01b0\u01a1ng ph\u00e1p s\u1eed d\u1ee5ng XSCT \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 \u1edf ph\u1ea7n Zedboard . Nh\u1eadn x\u00e9t Compiler s\u1eed d\u1ee5ng cho build U-Boot l\u00e0 h\u1ecd ch\u01b0\u01a1ng tr\u00ecnh: arm-linux-gnueabihf-*. V\u00ed d\u1ee5 gcc \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i [SDX Installation Dir]/SDK/2018.2/gnu/aarch32/lin/gcc-arm-linux-gnueabi/bin/arm-linux-gnueabihf-gcc. zynq_zed_defconfig l\u00e0 b\u1ed9 c\u1ea5u h\u00ecnh d\u00e0nh ri\u00eang cho board zed. C\u00e1c ph\u1ea7n c\u1ee9ng kh\u00e1c s\u1ebd c\u00f3 b\u1ed9 c\u1ea5u h\u00ecnh t\u01b0\u01a1ng t\u1ef1, v\u00ed d\u1ee5 zynq_zc706_defconfig cho ZC706. Linux Kernel Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c tham kh\u1ea3o t\u1eeb h\u01b0\u1edbng d\u1eabn chi ti\u1ebft Build kernel c\u1ee7a Xilinx. Xilinx duy tr\u00ec m\u1ed9t github repository ch\u1ee9a source code Linux kernel. Qu\u00e1 tr\u00ecnh build Linux kernel t\u1eeb m\u00e3 ngu\u1ed3n n\u00e0y t\u01b0\u01a1ng \u0111\u1ed1i \u0111\u01a1n gi\u1ea3n. C\u1ea7n l\u01b0u \u00fd m\u1ed9t s\u1ed1 \u0111i\u1ec3m quan tr\u1ecdng nh\u01b0 sau: Qu\u00e1 tr\u00ecnh build kernel s\u1eed d\u1ee5ng h\u1ecd compiler arm-linux-gnueabihf, do \u0111\u00f3 c\u1ea7n c\u1ea5u h\u00ecnh export CROSS_COMPILE=arm-linux-gnueabihf- T\u1ea1i source code c\u1ee7a Linux kernel th\u1ef1c hi\u1ec7n nh\u1eefng b\u01b0\u1edbc sau: > make ARCH=arm xilinx_zynq_defconfig > make ARCH=arm menuconfig > make ARCH=arm UIMAGE_LOADADDR=0x8000 uImage K\u1ebft qu\u1ea3 build kernel \u0111\u01b0\u1ee3c l\u01b0u t\u1ea1i: [Linux source]/arch/arm/boot/ bao g\u1ed3m c\u00e1c n\u1ed9i dung nh\u01b0 d\u01b0\u1edbi \u0111\u00e2y. Trong \u0111\u00f3 quan tr\u1ecdng nh\u1ea5t l\u00e0 Image, uImage, zImage. drwxrwxr-x 2 vutt6 vutt6 4096 Feb 15 00:53 bootp drwxrwxr-x 2 vutt6 vutt6 4096 Mar 4 15:21 compressed -rwxr-xr-x 1 vutt6 vutt6 1805 Feb 15 00:53 deflate_xip_data.sh drwxrwxr-x 2 vutt6 vutt6 73728 Feb 15 00:53 dts -rwxrwxr-x 1 vutt6 vutt6 10662592 Mar 4 15:21 Image -rw-rw-r-- 1 vutt6 vutt6 1648 Feb 15 00:53 install.sh -rw-rw-r-- 1 vutt6 vutt6 3128 Feb 15 00:53 Makefile -rw-rw-r-- 1 vutt6 vutt6 4160040 Mar 4 15:21 uImage -rwxrwxr-x 1 vutt6 vutt6 4159976 Mar 4 15:21 zImage uImage s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i boot.bin. Device Tree Build Device Tree Blob - Xilinx. Trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx h\u01b0\u1edbng d\u1eabn nhi\u1ec1u c\u00e1ch \u0111\u1ec3 build device tree cho m\u1ed9t thi\u1ebft b\u1ecb Zynq. Generate Device Tree b\u1eb1ng HSM/HSI Kh\u1edfi \u0111\u1ed9ng HSM b\u1eb1ng command hsm , trong \u0111\u00f3 HSM l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 t\u00edch h\u1ee3p trong SDK c\u1ee7a Xilinx. Qu\u00e1 tr\u00ecnh generate b\u1eb1ng HSM \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tu\u1ea7n t\u1ef1 trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx ( t\u1ea1i \u0111\u00e2y ). T\u1ed5ng h\u1ee3p DTB b\u1eb1ng c\u00f4ng c\u1ee5 dtc Device tree \u0111\u01b0\u1ee3c generate d\u01b0\u1edbi d\u1ea1ng c\u00e1c file dts/dtsi. C\u00f4ng c\u1ee5 dtc (Device tree compiler) h\u1ed7 tr\u1ee3 compiling t\u1eeb d\u1ea1ng dtsi/dts sang dtb. C\u00fa ph\u00e1p compile nh\u01b0 sau: dtc -I dts -O dts -o system.dtb system.dts L\u01b0u \u00fd r\u1eb1ng dtc c\u0169ng h\u1ed7 tr\u1ee3 qu\u00e1 tr\u00ecnh d\u1ecbch ng\u01b0\u1ee3c t\u1eeb dtb -> dts. Build rootfs http://xilinx.wikidot.com/zynq-rootfs Create boot image S\u1eed d\u1ee5ng c\u00f4ng c\u1ee5 bootgen t\u00edch h\u1ee3p trong Xilinx SDK. Tool for package images mkimage - Generate image for U-Boot The mkimage command is used to create images for use with the U-Boot boot loader. Thes eimages can contain the linux kernel, device tree blob, root file system image, firmware images etc., either separate or combined. mkimage is used in Petalinux 2017.4 at do_xilinx_fitimage: uboot-mkimage -f fit-image.its fitImage In do_image_cpio , mkimage is used to packaged ramdisk file petalinux-user-image-plnx_arm-20190301083938. cpio - copy files to and from archives mke2fs - create an ext2/ext3/ext4 filesystem","title":"Porting Linux for Zynq"},{"location":"projects/zynq/u-boot/#porting-linux-for-zynq","text":"","title":"Porting Linux for Zynq"},{"location":"projects/zynq/u-boot/#u-boot-on-zynq","text":"","title":"U-Boot on Zynq"},{"location":"projects/zynq/u-boot/#references","text":"[1] - Build U-Boot - xilinx-wiki.atlassian.net","title":"References"},{"location":"projects/zynq/u-boot/#build-u-boot-for-zedboard","text":"Ti\u1ebfn h\u00e0nh build u-boot cho chip Zynq7000 tr\u00ean Zedboard theo h\u01b0\u1edbng d\u1eabn t\u1eeb xilinx-wiki.atlassian.net - Build U-Boot . Qu\u00e1 tr\u00ecnh build U-Boot cho m\u1ed9t thi\u1ebft b\u1ecb Zynq7000 c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng b\u1ed9 c\u00f4ng c\u1ee5 Petalinux c\u1ee7a Xilinx. Th\u1eed nghi\u1ec7m n\u00e0y s\u1ebd tr\u1ef1c ti\u1ebfp build U-Boot t\u1eeb m\u00e3 ngu\u1ed3n cung c\u1ea5p b\u1edfi Xilinx t\u1eeb Github b\u1eb1ng compiler cung c\u1ea5p b\u1edfi Xilinx SDK. make U-Boot Ti\u1ebfn h\u00e0nh theo c\u00e1c b\u01b0\u1edbc h\u01b0\u1edbng d\u1eabn trong [1], ti\u1ebfn h\u00e0nh fetch source code, c\u1ea5u h\u00ecnh v\u00e0 make U-Boot. > git clone https://github.com/Xilinx/u-boot-xlnx.git > cd u-boot-xlnx > export CROSS_COMPILE=arm-linux-gnueabihf- > export ARCH=arm > source <SDK setting.sh file> // khai b\u00e1o arm-linux-gnueabihf compiler > make distclean > make zynq_zed_defconfig > make K\u1ebft qu\u1ea3 build l\u00e0 file u-boot.elf . File n\u00e0y c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh ch\u1ea1y th\u1eed nghi\u1ec7m b\u1eb1ng ph\u01b0\u01a1ng ph\u00e1p s\u1eed d\u1ee5ng XSCT \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 \u1edf ph\u1ea7n Zedboard .","title":"Build U-Boot for Zedboard"},{"location":"projects/zynq/u-boot/#nhan-xet","text":"Compiler s\u1eed d\u1ee5ng cho build U-Boot l\u00e0 h\u1ecd ch\u01b0\u01a1ng tr\u00ecnh: arm-linux-gnueabihf-*. V\u00ed d\u1ee5 gcc \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i [SDX Installation Dir]/SDK/2018.2/gnu/aarch32/lin/gcc-arm-linux-gnueabi/bin/arm-linux-gnueabihf-gcc. zynq_zed_defconfig l\u00e0 b\u1ed9 c\u1ea5u h\u00ecnh d\u00e0nh ri\u00eang cho board zed. C\u00e1c ph\u1ea7n c\u1ee9ng kh\u00e1c s\u1ebd c\u00f3 b\u1ed9 c\u1ea5u h\u00ecnh t\u01b0\u01a1ng t\u1ef1, v\u00ed d\u1ee5 zynq_zc706_defconfig cho ZC706.","title":"Nh\u1eadn x\u00e9t"},{"location":"projects/zynq/u-boot/#linux-kernel","text":"Qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c tham kh\u1ea3o t\u1eeb h\u01b0\u1edbng d\u1eabn chi ti\u1ebft Build kernel c\u1ee7a Xilinx. Xilinx duy tr\u00ec m\u1ed9t github repository ch\u1ee9a source code Linux kernel. Qu\u00e1 tr\u00ecnh build Linux kernel t\u1eeb m\u00e3 ngu\u1ed3n n\u00e0y t\u01b0\u01a1ng \u0111\u1ed1i \u0111\u01a1n gi\u1ea3n. C\u1ea7n l\u01b0u \u00fd m\u1ed9t s\u1ed1 \u0111i\u1ec3m quan tr\u1ecdng nh\u01b0 sau: Qu\u00e1 tr\u00ecnh build kernel s\u1eed d\u1ee5ng h\u1ecd compiler arm-linux-gnueabihf, do \u0111\u00f3 c\u1ea7n c\u1ea5u h\u00ecnh export CROSS_COMPILE=arm-linux-gnueabihf- T\u1ea1i source code c\u1ee7a Linux kernel th\u1ef1c hi\u1ec7n nh\u1eefng b\u01b0\u1edbc sau: > make ARCH=arm xilinx_zynq_defconfig > make ARCH=arm menuconfig > make ARCH=arm UIMAGE_LOADADDR=0x8000 uImage K\u1ebft qu\u1ea3 build kernel \u0111\u01b0\u1ee3c l\u01b0u t\u1ea1i: [Linux source]/arch/arm/boot/ bao g\u1ed3m c\u00e1c n\u1ed9i dung nh\u01b0 d\u01b0\u1edbi \u0111\u00e2y. Trong \u0111\u00f3 quan tr\u1ecdng nh\u1ea5t l\u00e0 Image, uImage, zImage. drwxrwxr-x 2 vutt6 vutt6 4096 Feb 15 00:53 bootp drwxrwxr-x 2 vutt6 vutt6 4096 Mar 4 15:21 compressed -rwxr-xr-x 1 vutt6 vutt6 1805 Feb 15 00:53 deflate_xip_data.sh drwxrwxr-x 2 vutt6 vutt6 73728 Feb 15 00:53 dts -rwxrwxr-x 1 vutt6 vutt6 10662592 Mar 4 15:21 Image -rw-rw-r-- 1 vutt6 vutt6 1648 Feb 15 00:53 install.sh -rw-rw-r-- 1 vutt6 vutt6 3128 Feb 15 00:53 Makefile -rw-rw-r-- 1 vutt6 vutt6 4160040 Mar 4 15:21 uImage -rwxrwxr-x 1 vutt6 vutt6 4159976 Mar 4 15:21 zImage uImage s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i boot.bin.","title":"Linux Kernel"},{"location":"projects/zynq/u-boot/#device-tree","text":"Build Device Tree Blob - Xilinx. Trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx h\u01b0\u1edbng d\u1eabn nhi\u1ec1u c\u00e1ch \u0111\u1ec3 build device tree cho m\u1ed9t thi\u1ebft b\u1ecb Zynq.","title":"Device Tree"},{"location":"projects/zynq/u-boot/#generate-device-tree-bang-hsmhsi","text":"Kh\u1edfi \u0111\u1ed9ng HSM b\u1eb1ng command hsm , trong \u0111\u00f3 HSM l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 t\u00edch h\u1ee3p trong SDK c\u1ee7a Xilinx. Qu\u00e1 tr\u00ecnh generate b\u1eb1ng HSM \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tu\u1ea7n t\u1ef1 trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx ( t\u1ea1i \u0111\u00e2y ).","title":"Generate Device Tree b\u1eb1ng HSM/HSI"},{"location":"projects/zynq/u-boot/#tong-hop-dtb-bang-cong-cu-dtc","text":"Device tree \u0111\u01b0\u1ee3c generate d\u01b0\u1edbi d\u1ea1ng c\u00e1c file dts/dtsi. C\u00f4ng c\u1ee5 dtc (Device tree compiler) h\u1ed7 tr\u1ee3 compiling t\u1eeb d\u1ea1ng dtsi/dts sang dtb. C\u00fa ph\u00e1p compile nh\u01b0 sau: dtc -I dts -O dts -o system.dtb system.dts L\u01b0u \u00fd r\u1eb1ng dtc c\u0169ng h\u1ed7 tr\u1ee3 qu\u00e1 tr\u00ecnh d\u1ecbch ng\u01b0\u1ee3c t\u1eeb dtb -> dts.","title":"T\u1ed5ng h\u1ee3p DTB b\u1eb1ng c\u00f4ng c\u1ee5 dtc"},{"location":"projects/zynq/u-boot/#build-rootfs","text":"http://xilinx.wikidot.com/zynq-rootfs","title":"Build rootfs"},{"location":"projects/zynq/u-boot/#create-boot-image","text":"S\u1eed d\u1ee5ng c\u00f4ng c\u1ee5 bootgen t\u00edch h\u1ee3p trong Xilinx SDK.","title":"Create boot image"},{"location":"projects/zynq/u-boot/#tool-for-package-images","text":"mkimage - Generate image for U-Boot The mkimage command is used to create images for use with the U-Boot boot loader. Thes eimages can contain the linux kernel, device tree blob, root file system image, firmware images etc., either separate or combined. mkimage is used in Petalinux 2017.4 at do_xilinx_fitimage: uboot-mkimage -f fit-image.its fitImage In do_image_cpio , mkimage is used to packaged ramdisk file petalinux-user-image-plnx_arm-20190301083938. cpio - copy files to and from archives mke2fs - create an ext2/ext3/ext4 filesystem","title":"Tool for package images"},{"location":"projects/zynq/zynq/","text":"Project in Zynq Platform HW platform *picturesize: x*150 Zedboard Link to product Picozed Link to product ZC706 Projects Porting Zynq from scratch - Zedboard In this project, images for booting Zedboard will be built without using Petalinux. From Xilinx source, Xilinx SDK is used for building fsbl, u-boot, kernel. Rootfs is made manually. Boot from SD Card with ext4 filesystem - Zedboard Zedboard is boot from SD Card with rootfs is stored in an ext4 partion. XSCT - Zedboard Demo using XSCT (Xilinx Software Command-Line Tool) to initializing and loading applications. GMII to RGMII Bridge - Picozed FPGA-PL MAC/PHY - ZC706","title":"Zynq"},{"location":"projects/zynq/zynq/#project-in-zynq-platform","text":"","title":"Project in Zynq Platform"},{"location":"projects/zynq/zynq/#hw-platform","text":"*picturesize: x*150","title":"HW platform"},{"location":"projects/zynq/zynq/#zedboard","text":"Link to product","title":"Zedboard"},{"location":"projects/zynq/zynq/#picozed","text":"Link to product","title":"Picozed"},{"location":"projects/zynq/zynq/#zc706","text":"","title":"ZC706"},{"location":"projects/zynq/zynq/#projects","text":"","title":"Projects"},{"location":"projects/zynq/zynq/#porting-zynq-from-scratch-zedboard","text":"In this project, images for booting Zedboard will be built without using Petalinux. From Xilinx source, Xilinx SDK is used for building fsbl, u-boot, kernel. Rootfs is made manually.","title":"Porting Zynq from scratch - Zedboard"},{"location":"projects/zynq/zynq/#boot-from-sd-card-with-ext4-filesystem-zedboard","text":"Zedboard is boot from SD Card with rootfs is stored in an ext4 partion.","title":"Boot from SD Card with ext4 filesystem - Zedboard"},{"location":"projects/zynq/zynq/#xsct-zedboard","text":"Demo using XSCT (Xilinx Software Command-Line Tool) to initializing and loading applications.","title":"XSCT - Zedboard"},{"location":"projects/zynq/zynq/#gmii-to-rgmii-bridge-picozed","text":"","title":"GMII to RGMII Bridge - Picozed"},{"location":"projects/zynq/zynq/#fpga-pl-macphy-zc706","text":"","title":"FPGA-PL MAC/PHY - ZC706"},{"location":"projects/zynq/zc706/zc706/","text":"ZC706 PL MAC/PHY References Zynq PL Ethernet - https://xilinx-wiki.atlassian.net Implementation Zynq7000 cung c\u1ea5p hai Ethernet Controller t\u01b0\u01a1ng \u1ee9ng v\u1edbi hai giao di\u1ec7n Ethernet MAC t\u00edch h\u1ee3p trong ph\u1ea7n PS. Ngo\u00e0i ra, Xilinx cung c\u1ea5p th\u00eam ph\u01b0\u01a1ng \u00e1n \u0111\u1ec3 m\u1edf r\u1ed9ng s\u1ed1 l\u01b0\u1ee3ng giao di\u1ec7n Ethernet b\u1eb1ng c\u00e1c s\u1eed d\u1ee5ng IPCore MAC tr\u00ean FPGA-PL. H\u1ec7 \"AXI Ethernet Subsystem v7.0\" l\u00e0 t\u00edch h\u1ee3p c\u1ee7a IP core MAC (Tri-mode 10/100/1000 ho\u1eb7c 10/100) v\u00e0 on-chip PHY 1G/2.5G SGMII and 1000/2500 BASE-X. Nh\u01b0 v\u1eady, t\u1ea7ng MAC v\u00e0 PHY c\u00f3 th\u1ec3 implement ho\u00e0n to\u00e0n trong FPGA-PL. H\u00ecnh v\u1ebd. H\u1ec7 th\u1ed1ng PL MAC-PHY","title":"Zc706"},{"location":"projects/zynq/zc706/zc706/#zc706","text":"","title":"ZC706"},{"location":"projects/zynq/zc706/zc706/#pl-macphy","text":"","title":"PL MAC/PHY"},{"location":"projects/zynq/zc706/zc706/#references","text":"Zynq PL Ethernet - https://xilinx-wiki.atlassian.net","title":"References"},{"location":"projects/zynq/zc706/zc706/#implementation","text":"Zynq7000 cung c\u1ea5p hai Ethernet Controller t\u01b0\u01a1ng \u1ee9ng v\u1edbi hai giao di\u1ec7n Ethernet MAC t\u00edch h\u1ee3p trong ph\u1ea7n PS. Ngo\u00e0i ra, Xilinx cung c\u1ea5p th\u00eam ph\u01b0\u01a1ng \u00e1n \u0111\u1ec3 m\u1edf r\u1ed9ng s\u1ed1 l\u01b0\u1ee3ng giao di\u1ec7n Ethernet b\u1eb1ng c\u00e1c s\u1eed d\u1ee5ng IPCore MAC tr\u00ean FPGA-PL. H\u1ec7 \"AXI Ethernet Subsystem v7.0\" l\u00e0 t\u00edch h\u1ee3p c\u1ee7a IP core MAC (Tri-mode 10/100/1000 ho\u1eb7c 10/100) v\u00e0 on-chip PHY 1G/2.5G SGMII and 1000/2500 BASE-X. Nh\u01b0 v\u1eady, t\u1ea7ng MAC v\u00e0 PHY c\u00f3 th\u1ec3 implement ho\u00e0n to\u00e0n trong FPGA-PL. H\u00ecnh v\u1ebd. H\u1ec7 th\u1ed1ng PL MAC-PHY","title":"Implementation"},{"location":"projects/zynq/zedboard/zedboard/","text":"Zedboard About ZedBoard ZedBoard\u2122 is a complete development kit for designers interested in exploring designs using the Xilinx Zynq\u00ae-7000 All Programmable SoC . Boot from SD Card with ext4 filesystem Origin Note T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 c\u00e1c kh\u1edfi \u0111\u1ed9ng Zed t\u1eeb SD card v\u1edbi rootfs \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean m\u1ed9t ph\u00e2n v\u00f9ng \u0111\u1ecbnh d\u1ea1ng ext4. Ph\u01b0\u01a1ng ph\u00e1p n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho c\u00e1c board zynq kh\u00e1c nh\u01b0 ZC706, PicoZed. Chu\u1ea9n b\u1ecb images Trong t\u00e0i li\u1ec7u UG1144 c\u00f3 h\u01b0\u1edbng d\u1eabn qu\u00e1 tr\u00ecnh c\u1ea5u h\u00ecnh \u0111\u1ec3 c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng Zynq7000 t\u1eeb SD Card. Trong h\u01b0\u1edbng d\u1eabn n\u00e0y c\u1ea7n l\u01b0u \u00fd \u0111\u1ebfn 2 \u0111i\u1ec3m sau: Thi\u1ebft l\u1eadp petalinux project \u0111\u1ec3 c\u00e1c image \u0111\u01b0\u1ee3c package d\u01b0\u1edbi d\u1ea1ng c\u00f3 th\u1ec3 boot \u0111\u01b0\u1ee3c t\u1eeb SD Card. petalinux-config T\u1ea1o file rootfs.cpio b\u1eb1ng m\u00e3 l\u1ec7nh sau petalinux-package \\--image -c rootfs \\--format initramfs N\u1ebfu s\u1eed d\u1ee5ng l\u1ec7nh package \u0111\u1ec3 t\u1ea1o rootfs.cpio xu\u1ea5t hi\u1ec7n l\u1ed7i sau: [INFO ] package rootfs.cpio to /tmp/petalinux/images/linux ERROR: Linux kernel gen_init_cpio /tmp/petalinux/build/linux/kernel/usr/gen_init_cpio doesn\\'t exits! Please build Linux kernel first! make[1]: *** [package-rootfs-cpio] Fehler 255 make: *** [package-rootfs-initramfs] Fehler 2 ERROR: Failed to package component linux/rootfs *** Need to use extention to emphasize error notes, see in Mkdocs Tool Trong di\u1ec5n \u0111\u00e0n c\u1ee7a Xilinx ( link ) c\u00f3 th\u1ea3o lu\u1eadn v\u1ec1 ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 kh\u1eafc ph\u1ee5c \u0111\u01b0\u1ee3c l\u1ed7i tr\u00ean. Bao g\u1ed3m c\u00e1c b\u01b0\u1edbc x\u1eed l\u00fd nh\u01b0 sau: T\u1eaft ch\u1ebf \u0111\u1ed9 automatic kernel configuration petalinux-config Image Packaging Configuration ---> Root filesystem type = SD card Auto Config Settings ---> [ ] kernel autoconfig B\u1eadt ch\u1ebf \u0111\u1ed9 h\u1ed7 tr\u1ecd INITRAMFS trong c\u1ea5u h\u00ecnh c\u1ee7a kernel $ petalinux-config -c kernel General setup -> [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support () Initramfs source file(s) Kernel Args Kernel Args b\u00ean trong device-tree ch\u1ee9a m\u1ed9t s\u1ed1 th\u00f4ng tin \u0111\u1ec3 kernel c\u00f3 th\u1ec3 t\u00ecm ki\u1ebfm \u0111\u01b0\u1ee3c ch\u00ednh x\u00e1c root filesystem c\u1ea7n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho h\u1ec7 th\u1ed1ng. \u0110\u1ec3 kernel c\u00f3 th\u1ec3 t\u00ecm \u0111\u1ebfn \u0111\u01b0\u1ee3c ph\u00e2n v\u00f9ng rootfs tr\u00ean SD card v\u1eeba \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o c\u1ea7n thi\u1ebft l\u1eadp kernel args nh\u01b0 sau: bootargs = \"console=ttyPS0,115200 earlyprint root=/dev/mmcblk0p2 rw rootwait\"; Khi kh\u1edfi \u0111\u1ed9ng, kernel s\u1ebd t\u00ecm \u0111\u1ebfn ph\u00e2n v\u00f9ng /dev/mmcblk0p2 \u0111\u1ec3 mounting rootfs, sau \u0111\u00f3 kh\u1edfi \u0111\u1ed9ng ti\u1ebfn tr\u00ecnh init . Do trong kernel args kh\u00f4ng khai b\u00e1o \u0111\u1ecbnh d\u1ea1ng c\u1ee7a ph\u00e2n v\u00f9ng rootfs n\u00e0y n\u00ean kernel s\u1ebd ti\u1ebfn h\u00e0nh th\u1eed mounting ph\u00e2n v\u00f9ng v\u1edbi c\u00e1c \u0111\u1ecbnh d\u1ea1ng kh\u00e1c nhau v\u00e0 t\u00ecm ki\u1ebfm \u0111\u1ebfn \u0111\u1ecbnh d\u1ea1ng ph\u00f9 h\u1ee3p (\u1edf \u0111\u00e2y l\u00e0 ext4 ). T\u00ecm hi\u1ec3u th\u00eam th\u00f4ng tin v\u1ec1 c\u00e1c tham s\u1ed1 trong c\u1ea5u h\u00ecnh tr\u00ean \u1edf chuy\u00ean m\u1ee5c t\u00ecm hi\u1ec3u v\u1ec1 Kernel Args. Ph\u00e2n v\u00f9ng cho SD card C\u1ea7n chu\u1ea9n b\u1ecb SD Card v\u1edbi 02 ph\u00e2n v\u00f9ng: BOOT: \u0111\u01b0\u1ee3c format \u1edf \u0111\u1ecbnh d\u1ea1ng FAT32 ch\u1ee9a BOOT.BIN (bao g\u1ed3m FBSL, PL Bitstream, U-boot) v\u00e0 image.ub (Linux kernel v\u00e0 Device Tree). rootfs: \u0111\u01b0\u1ee3c format \u1edf \u0111\u1ecbnh d\u1ea1ng ext4 ch\u1ee9a root filesystem. Qu\u00e1 tr\u00ecnh chu\u1ea9n b\u1ecb ph\u00e2n v\u00f9ng tr\u00ean SD Card n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c ti\u1ebfn h\u00e0nh \u0111\u01a1n gi\u1ea3n b\u1eb1ng c\u00e1c GUI Tool nh\u01b0 GParted . Ngo\u00e0i ra c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1ed5 h\u1ee3p CLI tool: fdisk & mkfs.vfat & mkfs.ext4. Ph\u01b0\u01a1ng ph\u00e1p s\u1eed d\u1ee5ng b\u1ed9 c\u00f4ng c\u1ee5 n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 chi ti\u1ebft trong Wikipedia c\u1ee7a Xilinx. K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh ph\u00e2n v\u00f9ng v\u00e0 format n\u00e0y nh\u01b0 sau: Figure. SD Card Partitions C\u00e0i \u0111\u1eb7t boot image v\u00e0 rootfs l\u00ean SD card K\u1ebft qu\u1ea3 sau khi th\u1ef1c hi\u1ec7n xong c\u00e1c b\u01b0\u1edbc chu\u1ea9n b\u1ecb li\u00ean quan \u0111\u1ebfn images v\u00e0 SD Card: C\u00e1c file images: BOOT.BIN, image.ub v\u00e0 rootfs.cpio SD Card v\u1edbi hai ph\u00e2n v\u00f9ng: BOOT v\u00e0 rootfs. C\u00e1c images v\u00e0 filesystem ph\u1ea3i \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t l\u00ean SD Card tr\u01b0\u1edbc khi board c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng \u0111\u01b0\u1ee3c t\u1eeb SD Card. Bootloader && Kernel Qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t bootloader v\u00e0 Linux kernel l\u00e0 qu\u00e1 tr\u00ecnh copy BOOT.BIN v\u00e0 image.ub l\u00ean ph\u00e2n v\u00f9ng BOOT c\u1ee7a sdcard. BootROM c\u1ee7a zynq \u0111\u1ee7 m\u1ea1nh \u0111\u1ec3 c\u00f3 th\u1ec3 t\u00ecm ki\u1ebfm \u0111\u01b0\u1ee3c zynq_fsbl.elf tr\u00ean ph\u00e2n v\u00f9ng \u0111\u1ecbnh d\u1ea1ng FAT32 \u0111\u1ec3 kh\u1edfi \u0111\u1ed9ng. Rootfs Ri\u00eang rootfs \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i \u1edf file rootfs.cpio. S\u1eed d\u1ee5ng \u1ee9ng d\u1ee5ng pax \u0111\u1ec3 th\u00e1o d\u1ee1 filesystem \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i \u1edf \u0111\u1ecbnh d\u1ea1ng cpio. cp images/linux/rootfs.cpio /media/rootfs/ cd /media/rootfs sudo pax -rvf rootfs.cpio Ngo\u00e0i ra, rootfs.cpio c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u00e1o d\u1ee1 b\u1eb1ng m\u00e3 l\u1ec7nh cpio . Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p h\u1ec7 nh\u00fang kh\u00f4ng t\u00edch h\u1ee3p s\u1eb5n g\u00f3i pax , cpio s\u1ebd l\u00e0 m\u1ed9t thay th\u1ebf c\u1ea7n thi\u1ebft. C\u00fa ph\u00e1p nh\u01b0 sau: cpio -i -F rootfs.cpio Ph\u00e2n t\u00edch v\u00e0 k\u1ebft lu\u1eadn Trong qu\u00e1 tr\u00ecnh chu\u1ea9n b\u1ecb SD Card xu\u1ea5t hi\u1ec7n c\u00e1c thu\u1eadt ng\u1eef. Trong m\u1ee5c n\u00e0y s\u1ebd \u0111i ph\u00e2n t\u00edch v\u00e0 gi\u1ea3i th\u00edch c\u00e1c thu\u1eadt ng\u1eef \u0111\u00f3. CPIO Trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh Linux xu\u1ea5t hi\u1ec7n kh\u00e1i ni\u1ec7m archive (/\u02c8\u0251\u02d0ka\u026av/) file , l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i nhi\u1ec1u file d\u1eef li\u1ec7u th\u00e0nh m\u1ed9t file th\u1ed1ng nh\u1ea5t (kh\u00f4ng c\u00f3 qu\u00e1 tr\u00ecnh n\u00e9n d\u1eef li\u1ec7u). M\u1ee5c \u0111\u00edch c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i n\u00e0y l\u00e0 d\u1ec5 d\u00e0ng cho qu\u00e1 tr\u00ecnh l\u01b0u tr\u1eef c\u0169ng nh\u01b0 trao \u0111\u1ed5i d\u1eef li\u1ec7u. Archive file c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m \u0111\u1ea7u v\u00e0o cho c\u00e1c tr\u00ecnh n\u00e9n d\u1eef li\u1ec7u. Archive file \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i b\u1eb1ng c\u00e1c file archiver. Trong Unix-like system, c\u00e1c file archiver ph\u1ed5 bi\u1ebfn nh\u01b0: tar, ar, cpio. Rootfs k\u1ebft qu\u1ea3 c\u1ee7a b\u01b0\u1edbc 1 \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i d\u01b0\u1edbi d\u1ea1ng archive file - cpio. Qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t rootfs l\u00ean ph\u00e2n v\u00f9ng rootfs tr\u00ean SD Card b\u1ea3n ch\u1ea5t l\u00e0 qu\u00e1 tr\u00ecnh th\u00e1o d\u1ee1 c\u00e1c archive file tr\u1edf v\u1ec1 c\u00e1c file ph\u00e2n bi\u1ec7t ban \u0111\u1ea7u. Qu\u00e1 tr\u00ecnh extract n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1edfi c\u00e1c Linux tool nh\u01b0: cpio ho\u1eb7c pax. Trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx s\u1eed d\u1ee5ng pax \u0111\u1ec3 th\u00e1o d\u1ee1 rootfs. Fs format: fat32 v\u00e0 ext4 File system l\u00e0 c\u00e1ch m\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng file \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c tr\u00ean c\u00e1c b\u1ed9 nh\u1edb l\u01b0u tr\u1eef. C\u00e1c b\u1ed9 nh\u1edb l\u01b0u tr\u1eef c\u00f3 th\u1ec3 l\u00e0: disk file system ho\u1eb7c flash file system . Fat32 v\u00e0 ext4 l\u00e0 t\u00ean c\u1ee7a c\u00e1c d\u1ea1ng file system \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c ph\u1ed5 bi\u1ebfn tr\u00ean c\u00e1c d\u00f2ng disk file system nh\u01b0 SD Card trong b\u00e0i vi\u1ebft n\u00e0y l\u00e0 m\u1ed9t v\u00ed d\u1ee5. Ngo\u00e0i ra trong qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c v\u1edbi Rootfs c\u1ee7a zynq c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ebfn JFFS2 format l\u00e0 m\u1ed9t \u0111\u1ecbnh d\u1ea1ng file system s\u1eed d\u1ee5ng cho c\u00e1c b\u1ed9 nh\u1edb flash. XSCT in Zedboard XSCT (Xilinx Software Command-Line Tool) l\u00e0 giao di\u1ec7n CLI s\u1eed d\u1ee5ng \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi Xilinx SDK. S\u1eed d\u1ee5ng XSCT c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i \u0111\u1ebfn chip Zynq th\u00f4ng qua giao di\u1ec7n JTAG \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c c\u00e1c nhi\u1ec7m v\u1ee5 sau: C\u1ea5u h\u00ecnh PS7_INIT (c\u1ea5u h\u00ecnh clock, ddr controller...) N\u1ea1p bitstream cho chip FPGA Ti\u1ebfn h\u00e0nh ch\u1ea1y m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh tr\u00ean ARM CPU Kh\u1edfi \u0111\u1ed9ng XSCT C\u00e1ch th\u00f4ng th\u01b0\u1eddng v\u00e0 ph\u1ed5 bi\u1ebfn nh\u1ea5t v\u1edbi ng\u01b0\u1eddi ph\u00e1t tri\u1ec3n l\u00e0 kh\u1edfi \u0111\u1ed9ng XSCT t\u1eeb GUI c\u1ee7a SDK. T\u1eeb thanh Toolbar ch\u1ecdn: Xilinx > XSCT Console. Ngo\u00e0i ra, ng\u01b0\u1eddi d\u00f9ng Linux c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng tr\u1ef1c ti\u1ebfp t\u1eeb terminal b\u1eb1ng binary cung c\u1ea5p b\u1edfi SDK. \u0110i\u1ec3m m\u1ea1nh c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p n\u00e0y l\u00e0 t\u1eadn d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e1c y\u1ebfu t\u1ed1 g\u1ee3i nh\u1eafc t\u1eeb terminal. > cd <SDX-installation-dir>/SDK/2018.2/bin/ > ./xsct Qu\u00e1 tr\u00ecnh kh\u1edfi ch\u1ea1y m\u1ed9t \u1ee9ng d\u1ee5ng K\u1ebft n\u1ed1i \u0111\u1ebfn targets b\u1eb1ng l\u1ec7nh connect v\u00e0 nh\u00f3m l\u1ec7nh targets > connect Sau khi k\u1ebft n\u1ed1i, c\u00e1c targets \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb b\u1eb1ng l\u1ec7nh targets xsct% targets 1 APU 2* ARM Cortex-A9 MPCore #0 (Running) 3 ARM Cortex-A9 MPCore #1 (Suspended) 4 xc7z020 Thi\u1ebft l\u1eadp ban \u0111\u1ea7u cho h\u1ec7 th\u1ed1ng T\u00ecm \u0111\u1ebfn file ps7_init.tcl c\u1ee7a h\u1ec7 th\u1ed1ng v\u00e0 ti\u1ebfn h\u00e0nh (trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p c\u1ea7n ti\u1ebfn h\u00e0nh reset target b\u1eb1ng c\u00e1ch ch\u1ea1y l\u1ec7nh rst ): > source ps7_init.tcl // khai b\u00e1o c\u00e1c ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ecbnh ngh\u0129a trong ps7_init.tcl > ps7_init // ch\u1ea1y ps7_init > ps7_post_config // ch\u1ea1y ps7_post_config T\u1ea3i ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 ch\u1ea1y > dow <elf file> > con","title":"Zedboard"},{"location":"projects/zynq/zedboard/zedboard/#zedboard","text":"","title":"Zedboard"},{"location":"projects/zynq/zedboard/zedboard/#about-zedboard","text":"ZedBoard\u2122 is a complete development kit for designers interested in exploring designs using the Xilinx Zynq\u00ae-7000 All Programmable SoC .","title":"About ZedBoard"},{"location":"projects/zynq/zedboard/zedboard/#boot-from-sd-card-with-ext4-filesystem","text":"Origin Note T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 c\u00e1c kh\u1edfi \u0111\u1ed9ng Zed t\u1eeb SD card v\u1edbi rootfs \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean m\u1ed9t ph\u00e2n v\u00f9ng \u0111\u1ecbnh d\u1ea1ng ext4. Ph\u01b0\u01a1ng ph\u00e1p n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho c\u00e1c board zynq kh\u00e1c nh\u01b0 ZC706, PicoZed. Chu\u1ea9n b\u1ecb images Trong t\u00e0i li\u1ec7u UG1144 c\u00f3 h\u01b0\u1edbng d\u1eabn qu\u00e1 tr\u00ecnh c\u1ea5u h\u00ecnh \u0111\u1ec3 c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng Zynq7000 t\u1eeb SD Card. Trong h\u01b0\u1edbng d\u1eabn n\u00e0y c\u1ea7n l\u01b0u \u00fd \u0111\u1ebfn 2 \u0111i\u1ec3m sau: Thi\u1ebft l\u1eadp petalinux project \u0111\u1ec3 c\u00e1c image \u0111\u01b0\u1ee3c package d\u01b0\u1edbi d\u1ea1ng c\u00f3 th\u1ec3 boot \u0111\u01b0\u1ee3c t\u1eeb SD Card. petalinux-config T\u1ea1o file rootfs.cpio b\u1eb1ng m\u00e3 l\u1ec7nh sau petalinux-package \\--image -c rootfs \\--format initramfs N\u1ebfu s\u1eed d\u1ee5ng l\u1ec7nh package \u0111\u1ec3 t\u1ea1o rootfs.cpio xu\u1ea5t hi\u1ec7n l\u1ed7i sau: [INFO ] package rootfs.cpio to /tmp/petalinux/images/linux ERROR: Linux kernel gen_init_cpio /tmp/petalinux/build/linux/kernel/usr/gen_init_cpio doesn\\'t exits! Please build Linux kernel first! make[1]: *** [package-rootfs-cpio] Fehler 255 make: *** [package-rootfs-initramfs] Fehler 2 ERROR: Failed to package component linux/rootfs *** Need to use extention to emphasize error notes, see in Mkdocs Tool Trong di\u1ec5n \u0111\u00e0n c\u1ee7a Xilinx ( link ) c\u00f3 th\u1ea3o lu\u1eadn v\u1ec1 ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 kh\u1eafc ph\u1ee5c \u0111\u01b0\u1ee3c l\u1ed7i tr\u00ean. Bao g\u1ed3m c\u00e1c b\u01b0\u1edbc x\u1eed l\u00fd nh\u01b0 sau: T\u1eaft ch\u1ebf \u0111\u1ed9 automatic kernel configuration petalinux-config Image Packaging Configuration ---> Root filesystem type = SD card Auto Config Settings ---> [ ] kernel autoconfig B\u1eadt ch\u1ebf \u0111\u1ed9 h\u1ed7 tr\u1ecd INITRAMFS trong c\u1ea5u h\u00ecnh c\u1ee7a kernel $ petalinux-config -c kernel General setup -> [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support () Initramfs source file(s) Kernel Args Kernel Args b\u00ean trong device-tree ch\u1ee9a m\u1ed9t s\u1ed1 th\u00f4ng tin \u0111\u1ec3 kernel c\u00f3 th\u1ec3 t\u00ecm ki\u1ebfm \u0111\u01b0\u1ee3c ch\u00ednh x\u00e1c root filesystem c\u1ea7n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho h\u1ec7 th\u1ed1ng. \u0110\u1ec3 kernel c\u00f3 th\u1ec3 t\u00ecm \u0111\u1ebfn \u0111\u01b0\u1ee3c ph\u00e2n v\u00f9ng rootfs tr\u00ean SD card v\u1eeba \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o c\u1ea7n thi\u1ebft l\u1eadp kernel args nh\u01b0 sau: bootargs = \"console=ttyPS0,115200 earlyprint root=/dev/mmcblk0p2 rw rootwait\"; Khi kh\u1edfi \u0111\u1ed9ng, kernel s\u1ebd t\u00ecm \u0111\u1ebfn ph\u00e2n v\u00f9ng /dev/mmcblk0p2 \u0111\u1ec3 mounting rootfs, sau \u0111\u00f3 kh\u1edfi \u0111\u1ed9ng ti\u1ebfn tr\u00ecnh init . Do trong kernel args kh\u00f4ng khai b\u00e1o \u0111\u1ecbnh d\u1ea1ng c\u1ee7a ph\u00e2n v\u00f9ng rootfs n\u00e0y n\u00ean kernel s\u1ebd ti\u1ebfn h\u00e0nh th\u1eed mounting ph\u00e2n v\u00f9ng v\u1edbi c\u00e1c \u0111\u1ecbnh d\u1ea1ng kh\u00e1c nhau v\u00e0 t\u00ecm ki\u1ebfm \u0111\u1ebfn \u0111\u1ecbnh d\u1ea1ng ph\u00f9 h\u1ee3p (\u1edf \u0111\u00e2y l\u00e0 ext4 ). T\u00ecm hi\u1ec3u th\u00eam th\u00f4ng tin v\u1ec1 c\u00e1c tham s\u1ed1 trong c\u1ea5u h\u00ecnh tr\u00ean \u1edf chuy\u00ean m\u1ee5c t\u00ecm hi\u1ec3u v\u1ec1 Kernel Args. Ph\u00e2n v\u00f9ng cho SD card C\u1ea7n chu\u1ea9n b\u1ecb SD Card v\u1edbi 02 ph\u00e2n v\u00f9ng: BOOT: \u0111\u01b0\u1ee3c format \u1edf \u0111\u1ecbnh d\u1ea1ng FAT32 ch\u1ee9a BOOT.BIN (bao g\u1ed3m FBSL, PL Bitstream, U-boot) v\u00e0 image.ub (Linux kernel v\u00e0 Device Tree). rootfs: \u0111\u01b0\u1ee3c format \u1edf \u0111\u1ecbnh d\u1ea1ng ext4 ch\u1ee9a root filesystem. Qu\u00e1 tr\u00ecnh chu\u1ea9n b\u1ecb ph\u00e2n v\u00f9ng tr\u00ean SD Card n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c ti\u1ebfn h\u00e0nh \u0111\u01a1n gi\u1ea3n b\u1eb1ng c\u00e1c GUI Tool nh\u01b0 GParted . Ngo\u00e0i ra c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1ed5 h\u1ee3p CLI tool: fdisk & mkfs.vfat & mkfs.ext4. Ph\u01b0\u01a1ng ph\u00e1p s\u1eed d\u1ee5ng b\u1ed9 c\u00f4ng c\u1ee5 n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 chi ti\u1ebft trong Wikipedia c\u1ee7a Xilinx. K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh ph\u00e2n v\u00f9ng v\u00e0 format n\u00e0y nh\u01b0 sau: Figure. SD Card Partitions C\u00e0i \u0111\u1eb7t boot image v\u00e0 rootfs l\u00ean SD card K\u1ebft qu\u1ea3 sau khi th\u1ef1c hi\u1ec7n xong c\u00e1c b\u01b0\u1edbc chu\u1ea9n b\u1ecb li\u00ean quan \u0111\u1ebfn images v\u00e0 SD Card: C\u00e1c file images: BOOT.BIN, image.ub v\u00e0 rootfs.cpio SD Card v\u1edbi hai ph\u00e2n v\u00f9ng: BOOT v\u00e0 rootfs. C\u00e1c images v\u00e0 filesystem ph\u1ea3i \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t l\u00ean SD Card tr\u01b0\u1edbc khi board c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng \u0111\u01b0\u1ee3c t\u1eeb SD Card. Bootloader && Kernel Qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t bootloader v\u00e0 Linux kernel l\u00e0 qu\u00e1 tr\u00ecnh copy BOOT.BIN v\u00e0 image.ub l\u00ean ph\u00e2n v\u00f9ng BOOT c\u1ee7a sdcard. BootROM c\u1ee7a zynq \u0111\u1ee7 m\u1ea1nh \u0111\u1ec3 c\u00f3 th\u1ec3 t\u00ecm ki\u1ebfm \u0111\u01b0\u1ee3c zynq_fsbl.elf tr\u00ean ph\u00e2n v\u00f9ng \u0111\u1ecbnh d\u1ea1ng FAT32 \u0111\u1ec3 kh\u1edfi \u0111\u1ed9ng. Rootfs Ri\u00eang rootfs \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i \u1edf file rootfs.cpio. S\u1eed d\u1ee5ng \u1ee9ng d\u1ee5ng pax \u0111\u1ec3 th\u00e1o d\u1ee1 filesystem \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i \u1edf \u0111\u1ecbnh d\u1ea1ng cpio. cp images/linux/rootfs.cpio /media/rootfs/ cd /media/rootfs sudo pax -rvf rootfs.cpio Ngo\u00e0i ra, rootfs.cpio c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u00e1o d\u1ee1 b\u1eb1ng m\u00e3 l\u1ec7nh cpio . Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p h\u1ec7 nh\u00fang kh\u00f4ng t\u00edch h\u1ee3p s\u1eb5n g\u00f3i pax , cpio s\u1ebd l\u00e0 m\u1ed9t thay th\u1ebf c\u1ea7n thi\u1ebft. C\u00fa ph\u00e1p nh\u01b0 sau: cpio -i -F rootfs.cpio Ph\u00e2n t\u00edch v\u00e0 k\u1ebft lu\u1eadn Trong qu\u00e1 tr\u00ecnh chu\u1ea9n b\u1ecb SD Card xu\u1ea5t hi\u1ec7n c\u00e1c thu\u1eadt ng\u1eef. Trong m\u1ee5c n\u00e0y s\u1ebd \u0111i ph\u00e2n t\u00edch v\u00e0 gi\u1ea3i th\u00edch c\u00e1c thu\u1eadt ng\u1eef \u0111\u00f3. CPIO Trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh Linux xu\u1ea5t hi\u1ec7n kh\u00e1i ni\u1ec7m archive (/\u02c8\u0251\u02d0ka\u026av/) file , l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i nhi\u1ec1u file d\u1eef li\u1ec7u th\u00e0nh m\u1ed9t file th\u1ed1ng nh\u1ea5t (kh\u00f4ng c\u00f3 qu\u00e1 tr\u00ecnh n\u00e9n d\u1eef li\u1ec7u). M\u1ee5c \u0111\u00edch c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i n\u00e0y l\u00e0 d\u1ec5 d\u00e0ng cho qu\u00e1 tr\u00ecnh l\u01b0u tr\u1eef c\u0169ng nh\u01b0 trao \u0111\u1ed5i d\u1eef li\u1ec7u. Archive file c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m \u0111\u1ea7u v\u00e0o cho c\u00e1c tr\u00ecnh n\u00e9n d\u1eef li\u1ec7u. Archive file \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i b\u1eb1ng c\u00e1c file archiver. Trong Unix-like system, c\u00e1c file archiver ph\u1ed5 bi\u1ebfn nh\u01b0: tar, ar, cpio. Rootfs k\u1ebft qu\u1ea3 c\u1ee7a b\u01b0\u1edbc 1 \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i d\u01b0\u1edbi d\u1ea1ng archive file - cpio. Qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t rootfs l\u00ean ph\u00e2n v\u00f9ng rootfs tr\u00ean SD Card b\u1ea3n ch\u1ea5t l\u00e0 qu\u00e1 tr\u00ecnh th\u00e1o d\u1ee1 c\u00e1c archive file tr\u1edf v\u1ec1 c\u00e1c file ph\u00e2n bi\u1ec7t ban \u0111\u1ea7u. Qu\u00e1 tr\u00ecnh extract n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1edfi c\u00e1c Linux tool nh\u01b0: cpio ho\u1eb7c pax. Trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx s\u1eed d\u1ee5ng pax \u0111\u1ec3 th\u00e1o d\u1ee1 rootfs. Fs format: fat32 v\u00e0 ext4 File system l\u00e0 c\u00e1ch m\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng file \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c tr\u00ean c\u00e1c b\u1ed9 nh\u1edb l\u01b0u tr\u1eef. C\u00e1c b\u1ed9 nh\u1edb l\u01b0u tr\u1eef c\u00f3 th\u1ec3 l\u00e0: disk file system ho\u1eb7c flash file system . Fat32 v\u00e0 ext4 l\u00e0 t\u00ean c\u1ee7a c\u00e1c d\u1ea1ng file system \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c ph\u1ed5 bi\u1ebfn tr\u00ean c\u00e1c d\u00f2ng disk file system nh\u01b0 SD Card trong b\u00e0i vi\u1ebft n\u00e0y l\u00e0 m\u1ed9t v\u00ed d\u1ee5. Ngo\u00e0i ra trong qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c v\u1edbi Rootfs c\u1ee7a zynq c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ebfn JFFS2 format l\u00e0 m\u1ed9t \u0111\u1ecbnh d\u1ea1ng file system s\u1eed d\u1ee5ng cho c\u00e1c b\u1ed9 nh\u1edb flash.","title":"Boot from SD Card with ext4 filesystem"},{"location":"projects/zynq/zedboard/zedboard/#xsct-in-zedboard","text":"XSCT (Xilinx Software Command-Line Tool) l\u00e0 giao di\u1ec7n CLI s\u1eed d\u1ee5ng \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi Xilinx SDK. S\u1eed d\u1ee5ng XSCT c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i \u0111\u1ebfn chip Zynq th\u00f4ng qua giao di\u1ec7n JTAG \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c c\u00e1c nhi\u1ec7m v\u1ee5 sau: C\u1ea5u h\u00ecnh PS7_INIT (c\u1ea5u h\u00ecnh clock, ddr controller...) N\u1ea1p bitstream cho chip FPGA Ti\u1ebfn h\u00e0nh ch\u1ea1y m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh tr\u00ean ARM CPU Kh\u1edfi \u0111\u1ed9ng XSCT C\u00e1ch th\u00f4ng th\u01b0\u1eddng v\u00e0 ph\u1ed5 bi\u1ebfn nh\u1ea5t v\u1edbi ng\u01b0\u1eddi ph\u00e1t tri\u1ec3n l\u00e0 kh\u1edfi \u0111\u1ed9ng XSCT t\u1eeb GUI c\u1ee7a SDK. T\u1eeb thanh Toolbar ch\u1ecdn: Xilinx > XSCT Console. Ngo\u00e0i ra, ng\u01b0\u1eddi d\u00f9ng Linux c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng tr\u1ef1c ti\u1ebfp t\u1eeb terminal b\u1eb1ng binary cung c\u1ea5p b\u1edfi SDK. \u0110i\u1ec3m m\u1ea1nh c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p n\u00e0y l\u00e0 t\u1eadn d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e1c y\u1ebfu t\u1ed1 g\u1ee3i nh\u1eafc t\u1eeb terminal. > cd <SDX-installation-dir>/SDK/2018.2/bin/ > ./xsct Qu\u00e1 tr\u00ecnh kh\u1edfi ch\u1ea1y m\u1ed9t \u1ee9ng d\u1ee5ng K\u1ebft n\u1ed1i \u0111\u1ebfn targets b\u1eb1ng l\u1ec7nh connect v\u00e0 nh\u00f3m l\u1ec7nh targets > connect Sau khi k\u1ebft n\u1ed1i, c\u00e1c targets \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb b\u1eb1ng l\u1ec7nh targets xsct% targets 1 APU 2* ARM Cortex-A9 MPCore #0 (Running) 3 ARM Cortex-A9 MPCore #1 (Suspended) 4 xc7z020 Thi\u1ebft l\u1eadp ban \u0111\u1ea7u cho h\u1ec7 th\u1ed1ng T\u00ecm \u0111\u1ebfn file ps7_init.tcl c\u1ee7a h\u1ec7 th\u1ed1ng v\u00e0 ti\u1ebfn h\u00e0nh (trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p c\u1ea7n ti\u1ebfn h\u00e0nh reset target b\u1eb1ng c\u00e1ch ch\u1ea1y l\u1ec7nh rst ): > source ps7_init.tcl // khai b\u00e1o c\u00e1c ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ecbnh ngh\u0129a trong ps7_init.tcl > ps7_init // ch\u1ea1y ps7_init > ps7_post_config // ch\u1ea1y ps7_post_config T\u1ea3i ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 ch\u1ea1y > dow <elf file> > con","title":"XSCT in Zedboard"},{"location":"technote/markdown/markdown/","text":"Markdown Language Markdown is used for writing this website. So, the first thing I need to learn is about Markdown Language. About Markdown Figure 1. Markdown icon lightweight markup language was created by John Gruber in 2004 Basic Syntax This section notes about Markdown basic syntax. Insert a picture in Markdown: ![picture_name](direction_to_picture) Insert a hyperlink: [Name](Link) . Hyperlink is used in References in this note. Colour for Text: (need to use HTML language) Red , Green , Blue , Yellow , Pink , Violet , Orange , Code and emphasize C syntax: int main() { printf(\"Hello world!\"); return 0; } Quote (put '>' before writing quote): This is example of block quote This is example of block quote Horizontal Rule: put a horizontal rule in doc by typing *** , see result below Task list (do not success by now) [x] Write the press release [ ] Update the website [ ] Contact the media Inserting a figure to docs: refer About Markdown in this page for example !!! note with \"admonition\" in mkdocs.yml add markdown_extensions: -admonition to mkdocs.yml file. Read more at Markdown Extentions Markdown Extentions Got information about markdown extentions at https://squidfunk.github.io/mkdocs-material/extensions/admonition/ PyMdown https://squidfunk.github.io/mkdocs-material/extensions/pymdown/ References The Markdown Guide - Matt Cone Markdown Guide - Website Basic writing and formatting syntax - GitHub Markdown Guide - Gitlab","title":"Markdown Language"},{"location":"technote/markdown/markdown/#markdown-language","text":"Markdown is used for writing this website. So, the first thing I need to learn is about Markdown Language.","title":"Markdown Language"},{"location":"technote/markdown/markdown/#about-markdown","text":"Figure 1. Markdown icon lightweight markup language was created by John Gruber in 2004","title":"About Markdown"},{"location":"technote/markdown/markdown/#basic-syntax","text":"This section notes about Markdown basic syntax. Insert a picture in Markdown: ![picture_name](direction_to_picture) Insert a hyperlink: [Name](Link) . Hyperlink is used in References in this note. Colour for Text: (need to use HTML language) Red , Green , Blue , Yellow , Pink , Violet , Orange , Code and emphasize C syntax: int main() { printf(\"Hello world!\"); return 0; } Quote (put '>' before writing quote): This is example of block quote This is example of block quote Horizontal Rule: put a horizontal rule in doc by typing *** , see result below Task list (do not success by now) [x] Write the press release [ ] Update the website [ ] Contact the media Inserting a figure to docs: refer About Markdown in this page for example !!! note with \"admonition\" in mkdocs.yml add markdown_extensions: -admonition to mkdocs.yml file. Read more at Markdown Extentions","title":"Basic Syntax"},{"location":"technote/markdown/markdown/#markdown-extentions","text":"Got information about markdown extentions at https://squidfunk.github.io/mkdocs-material/extensions/admonition/","title":"Markdown Extentions"},{"location":"technote/markdown/markdown/#pymdown","text":"https://squidfunk.github.io/mkdocs-material/extensions/pymdown/","title":"PyMdown"},{"location":"technote/markdown/markdown/#references","text":"The Markdown Guide - Matt Cone Markdown Guide - Website Basic writing and formatting syntax - GitHub Markdown Guide - Gitlab","title":"References"},{"location":"technote/mkdocs/mkdocs-notes/","text":"MkDocs documentation This technote is built by Mkdocs . MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file (see Project Layout ). More detail about this tool at MKdocs . Others popular static site generator site platform: Pelican (suggested by Nguy\u1ec5n \u0110\u0103ng S\u01a1n - ESRC K53) Sphinx (I have tried to use, but faced errors - not fixed yet when publishing in Github Page) Getting started mkdocs new [project name] - Create a new project Deploy in Github Page This document will be published in Github Page . To do this, you need: Create a repository in github with name: vutang.github.io Clone this repo to local machine In local machine, use command: mkdocs gh-deploy --remote-branch master --config-file [directory to mkdocs.yml] Test with local webserver use mkdocs serve to run local web server in your browser, access http://127.0.0.1:8000 Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Support Themes The list of supported themes for Mkdocs can be found here . Readthedocs: readthedocs Material: material Readthedocs-DropDown: rtd-dropdown - trying but not really successful by now, need to figure out what happens Material Material is a theme for MkDocs , an excellent static site generator geared towards project documentation. It is built using Google's Material Design guidelines. To install Material theme for Mkdocs: sudo pip install mkdocs-material . Folow instruction in here . References Mkdocs Wiki","title":"Mkdocs Tool"},{"location":"technote/mkdocs/mkdocs-notes/#mkdocs-documentation","text":"This technote is built by Mkdocs . MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file (see Project Layout ). More detail about this tool at MKdocs . Others popular static site generator site platform: Pelican (suggested by Nguy\u1ec5n \u0110\u0103ng S\u01a1n - ESRC K53) Sphinx (I have tried to use, but faced errors - not fixed yet when publishing in Github Page)","title":"MkDocs documentation"},{"location":"technote/mkdocs/mkdocs-notes/#getting-started","text":"mkdocs new [project name] - Create a new project","title":"Getting started"},{"location":"technote/mkdocs/mkdocs-notes/#deploy-in-github-page","text":"This document will be published in Github Page . To do this, you need: Create a repository in github with name: vutang.github.io Clone this repo to local machine In local machine, use command: mkdocs gh-deploy --remote-branch master --config-file [directory to mkdocs.yml]","title":"Deploy in Github Page"},{"location":"technote/mkdocs/mkdocs-notes/#test-with-local-webserver","text":"use mkdocs serve to run local web server in your browser, access http://127.0.0.1:8000","title":"Test with local webserver"},{"location":"technote/mkdocs/mkdocs-notes/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"technote/mkdocs/mkdocs-notes/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"technote/mkdocs/mkdocs-notes/#support-themes","text":"The list of supported themes for Mkdocs can be found here . Readthedocs: readthedocs Material: material Readthedocs-DropDown: rtd-dropdown - trying but not really successful by now, need to figure out what happens","title":"Support Themes"},{"location":"technote/mkdocs/mkdocs-notes/#material","text":"Material is a theme for MkDocs , an excellent static site generator geared towards project documentation. It is built using Google's Material Design guidelines. To install Material theme for Mkdocs: sudo pip install mkdocs-material . Folow instruction in here .","title":"Material"},{"location":"technote/mkdocs/mkdocs-notes/#references","text":"Mkdocs Wiki","title":"References"},{"location":"technote/python/python/","text":"Python Syntax print print(\"Total Revenue: %f\" % total_revenue) print(\"Total Revenue: ${f}\".format(total_revenue)) List List comprehension cuts_under_30 = [hairstyles[i] for i in range(int(len(hairstyles))) if new_prices[i] < 30] Get index of element in list list.index(element) Try & except try: some_thing = can_trigger_a_syntax_errror() except SyntaxError: print(\"Error caught!\")","title":"Python"},{"location":"technote/python/python/#python-syntax","text":"","title":"Python Syntax"},{"location":"technote/python/python/#print","text":"print(\"Total Revenue: %f\" % total_revenue) print(\"Total Revenue: ${f}\".format(total_revenue))","title":"print"},{"location":"technote/python/python/#list","text":"List comprehension cuts_under_30 = [hairstyles[i] for i in range(int(len(hairstyles))) if new_prices[i] < 30] Get index of element in list list.index(element)","title":"List"},{"location":"technote/python/python/#try-except","text":"try: some_thing = can_trigger_a_syntax_errror() except SyntaxError: print(\"Error caught!\")","title":"Try &amp; except"},{"location":"technote/shellscript/shellscript/","text":"Shell Script References Shell Scripting Tutorial Syntax Array Handling array in shell script. rxPwr=(7 7 7) # declaring an array for i in 0 1 2 3 do rxPwr[$i]=$i # access element in array echo ${rxPwr[$i]} done Variable handle dpd_chan=$1 #Parsing value to variable from argument pa_chan=$((dpd_chan+1)) #Adding 1 Loop For for i in 0 1 2 3 do rxPwr[$i]=`dpdctl check $i | grep \"rx\" | awk {'print $4'}` printf \"%0.2f, \" ${rxPwr[$i]} >> $logdir done While while true; do # Do something here done Example: ADDR=0x43c40000 while [ $(($ADDR)) -lt $((0x43c00010)) ]; do VALUE=`peek $ADDR` printf \"0x%08x\\t0x%08x\\n\" $ADDR $VALUE >> regdump.txt ADDR=$(($ADDR + 4)) done Condition state if [ \"$1\" = \"all\" ]; then # Add code here fi Check if a file exist or not if [ -f $LOG_MON_FILE ]; then # Contents fi Print a string to output printf : print a string with format printf \"%0.2f, \" ${txCpl[$i]} >> $logdir printf \"0x%08x\" $ADDR Passing Argurments $#: number of arguments $i: the i-th argument Operations Bitwise : &, |, ~ a=0x1 b=0x2 c=$(($a | $b)) # or (two operands) c=$((($a | $b) & $b)) # more than two operands c=$((~$a)) # not (only one operands) Shift : a=0x1 c=$(($a << 2)) # shift left a 2 postition and then assign result to c Relational operators","title":"Shell Script"},{"location":"technote/shellscript/shellscript/#shell-script","text":"","title":"Shell Script"},{"location":"technote/shellscript/shellscript/#references","text":"Shell Scripting Tutorial","title":"References"},{"location":"technote/shellscript/shellscript/#syntax","text":"","title":"Syntax"},{"location":"technote/shellscript/shellscript/#array","text":"Handling array in shell script. rxPwr=(7 7 7) # declaring an array for i in 0 1 2 3 do rxPwr[$i]=$i # access element in array echo ${rxPwr[$i]} done","title":"Array"},{"location":"technote/shellscript/shellscript/#variable-handle","text":"dpd_chan=$1 #Parsing value to variable from argument pa_chan=$((dpd_chan+1)) #Adding 1","title":"Variable handle"},{"location":"technote/shellscript/shellscript/#loop","text":"For for i in 0 1 2 3 do rxPwr[$i]=`dpdctl check $i | grep \"rx\" | awk {'print $4'}` printf \"%0.2f, \" ${rxPwr[$i]} >> $logdir done While while true; do # Do something here done Example: ADDR=0x43c40000 while [ $(($ADDR)) -lt $((0x43c00010)) ]; do VALUE=`peek $ADDR` printf \"0x%08x\\t0x%08x\\n\" $ADDR $VALUE >> regdump.txt ADDR=$(($ADDR + 4)) done","title":"Loop"},{"location":"technote/shellscript/shellscript/#condition-state","text":"if [ \"$1\" = \"all\" ]; then # Add code here fi Check if a file exist or not if [ -f $LOG_MON_FILE ]; then # Contents fi","title":"Condition state"},{"location":"technote/shellscript/shellscript/#print-a-string-to-output","text":"printf : print a string with format printf \"%0.2f, \" ${txCpl[$i]} >> $logdir printf \"0x%08x\" $ADDR","title":"Print a string to output"},{"location":"technote/shellscript/shellscript/#passing-argurments","text":"$#: number of arguments $i: the i-th argument","title":"Passing Argurments"},{"location":"technote/shellscript/shellscript/#operations","text":"Bitwise : &, |, ~ a=0x1 b=0x2 c=$(($a | $b)) # or (two operands) c=$((($a | $b) & $b)) # more than two operands c=$((~$a)) # not (only one operands) Shift : a=0x1 c=$(($a << 2)) # shift left a 2 postition and then assign result to c Relational operators","title":"Operations"},{"location":"technote/virtual_machine/virtual_box/","text":"","title":"Virtual Machine"}]}