{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Vu Tang's Technote Site. This documentation was built by Mkdocs. Please see About me . Document Rules Suitable picture size is: 300x200. Use GIMP for scaling figure (Folow instructions in Photos/ResizingPhotos from help.ubuntu.com). This document is writen in both Vietnamese and English.","title":"Introduction"},{"location":"#document-rules","text":"Suitable picture size is: 300x200. Use GIMP for scaling figure (Folow instructions in Photos/ResizingPhotos from help.ubuntu.com). This document is writen in both Vietnamese and English.","title":"Document Rules"},{"location":"whatnext/","text":"To do Documentation: Markdown, Mkdocs, YAML Consider which online storage service will be used (Google drive or One drive) Update notes in one drive Coding and Algorithm: Reading books Hacker Rank Linux Linux Device Driver: platform device, spi/i2c device, ethernet device Books","title":"What's next"},{"location":"whatnext/#to-do","text":"Documentation: Markdown, Mkdocs, YAML Consider which online storage service will be used (Google drive or One drive) Update notes in one drive Coding and Algorithm: Reading books Hacker Rank Linux Linux Device Driver: platform device, spi/i2c device, ethernet device","title":"To do"},{"location":"whatnext/#books","text":"","title":"Books"},{"location":"about/about/","text":"Personal information Vu Tang Linked in: https://linkedin.com/in/vu-tang Embedded Software Engineer at Viettel Network Technologies Center Contact Email:","title":"About me"},{"location":"about/about/#personal-information","text":"Vu Tang Linked in: https://linkedin.com/in/vu-tang Embedded Software Engineer at Viettel Network Technologies Center","title":"Personal information"},{"location":"about/about/#contact","text":"Email:","title":"Contact"},{"location":"bookmarks/bookmarks/","text":"Blogs Sciences Technologies in the World - Blogs of Prof. John Vu, Carnegie Mellon University. \"Journey to the East\" translator (Nguyen Phong). This page is useful to learning English. Shichao's Notes - I found the idea to create this documatation from this page. Links The Linux Foundation Tutorial Series on Linux Device Driver - EmbeTronicX In this docs, technical skills such as: muxtex, spinlock, workqueue have been introduced. Linux Device Drivers Series - OpenSourceForU.com Materials The Linux Kernel Documentation Course Computer Science: Algorithms, Theory, and Machines - Coursera Compyter Science Path - Codecademy Learning about Python Language","title":"Bookmarks"},{"location":"bookmarks/bookmarks/#blogs","text":"Sciences Technologies in the World - Blogs of Prof. John Vu, Carnegie Mellon University. \"Journey to the East\" translator (Nguyen Phong). This page is useful to learning English. Shichao's Notes - I found the idea to create this documatation from this page.","title":"Blogs"},{"location":"bookmarks/bookmarks/#links","text":"The Linux Foundation","title":"Links"},{"location":"bookmarks/bookmarks/#tutorial","text":"Series on Linux Device Driver - EmbeTronicX In this docs, technical skills such as: muxtex, spinlock, workqueue have been introduced. Linux Device Drivers Series - OpenSourceForU.com","title":"Tutorial"},{"location":"bookmarks/bookmarks/#materials","text":"The Linux Kernel Documentation","title":"Materials"},{"location":"bookmarks/bookmarks/#course","text":"Computer Science: Algorithms, Theory, and Machines - Coursera Compyter Science Path - Codecademy Learning about Python Language","title":"Course"},{"location":"books/ldd3/","text":"This is note for LDD3","title":"Linux Device Driver"},{"location":"books/utlk/","text":"This note for Understanding The Linux Kernel","title":"Understanding Linux Kernel"},{"location":"embedded_system/es/","text":"","title":"Overview"},{"location":"fpga/timing_analysis/timing_analysis/","text":"STATIC TIMING ANALYSIS (STA) Hanoi Friday, September 22, 2016 -- by VuTang Static timing analysis (STA) is a simulation method of computing the expected timing of a digital circuit without requiring a simulation of the full circuit ( Wiki ). More information about STA in Vietnamese at T\u00ecm hi\u1ec3u v\u1ec1 Static Timing Analysis . Basic knowledge Definitions Clock Signal Clock l\u00e0 m\u1ed9t t\u00edn hi\u1ec7u c\u00f3 chu k\u00ec c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh sau: Period (Chu k\u00ec), Duty Cycle, Jitter, Phase... M\u1ed9t s\u1ed1 \u0111\u1eb7c t\u00ednh \u0111\u00e1ng ch\u00fa \u00fd c\u1ee7a clock xu\u1ea5t hi\u1ec7n trong h\u1ec7 th\u1ed1ng th\u1ef1c t\u1ebf: Clock Skew: l\u00e0 hi\u1ec7n t\u01b0\u1ee3ng m\u00e0 trong m\u1ed9t m\u1ea1ch \u0111\u1ed3ng b\u1ed9 (asynchronous circuit) v\u1edbi c\u00f9ng m\u1ed9t ngu\u1ed3n clock \u0111\u1ea7u v\u00e0o nh\u01b0ng \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed Flip Flop (Clocked Element) kh\u00e1c nhau trong nh\u1eefng th\u1eddi \u0111i\u1ec3m kh\u00e1c nhau. Clock Jitter: l\u00e0 \u0111\u1ed9 l\u1ec7ch c\u1ee7a s\u01b0\u1eddn clock th\u1ef1c t\u1ebf so v\u1edbi s\u01b0\u1eddn clock l\u00ed t\u01b0\u1edfng. C\u00f3 nhi\u1ec1u lo\u1ea1i Jitter kh\u00e1c nhau nh\u01b0: Cycle-to-Cycle (\u0111\u1ed9 ch\u00eanh l\u1ec7ch gi\u1eefa hai chu k\u00ec li\u00ean ti\u1ebfp), Period (s\u1ef1 thay \u0111\u1ed5i l\u1edbn nh\u1ea5t c\u1ee7a chu k\u00ec clock trong v\u00f2ng 100 chu k\u00ec - cycles) Clock Latency: L\u00e0 kho\u1ea3ng th\u1eddi gian tr\u1ec5 t\u1eeb ngu\u1ed3n clock (clk port, MMCM output pin, ...) \u0111\u1ec3 ph\u1ea7n t\u1eed d\u00f9ng clock \u0111\u00f3 (clocked element). Synchronous/Asynchronous Clock: N\u1ebfu 2 clocks \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi 2 ngu\u1ed3n kh\u00e1c nhau th\u00ec \u0111\u01b0\u1ee3c m\u1eb7c \u0111\u1ecbnh l\u00e0 kh\u00f4ng \u0111\u1ed3ng b\u1ed9 (asynchronous) k\u1ec3 c\u1ea3 trong tr\u01b0\u1eddng h\u1ee3p l\u00e0 c\u00f9ng t\u1ea7n s\u1ed1. Nguy\u00ean nh\u00e2n: hai ngu\u1ed3n clocks kh\u00e1c nhau s\u1eed d\u1ee5ng c\u00e1c b\u1ed9 oscillator kh\u00e1c nhau, c\u00e1c b\u1ed9 oscillator n\u00e0y c\u00f3 \u0111\u1ed9 sai l\u1ec7ch theo th\u1eddi gian kh\u00e1c nhau n\u00ean d\u1eabn \u0111\u1ebfn quan h\u1ec7 phase v\u00e0 period gi\u1eefa hai clock kh\u00f4ng \u0111\u01b0\u1ee3c c\u1ed1 \u0111\u1ecbnh (sai l\u1ec7ch c\u1ee7a b\u1ed9 oscillator \u0111\u01b0\u1ee3c \u0111o b\u1eb1ng ppm -- parts per million ho\u1eb7c ppb -- parts per billion ) N\u1ebfu 2 clocks \u0111\u01b0\u1ee3c t\u1ea1o ra t\u1eeb m\u1ed9t ngu\u1ed3n, m\u1eb7c d\u00f9 c\u00f3 th\u1ec3 phase v\u00e0 frequency kh\u00e1c nhau nh\u01b0ng v\u1eabn \u0111\u01b0\u1ee3c x\u00e9t l\u00e0 \u0111\u1ed3ng b\u1ed9. Setup/Hold Time Setup/Hold Time: X\u00e9t m\u1ed9t Flip Flop c\u00f3 ch\u00e2n clock CLK, data in D, data out Q. \u0110\u1ecbnh ngh\u0129a v\u1ec1 Setup/Hold Time \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n trong h\u00ecnh v\u1ebd sau: V\u1ec1 c\u01a1 b\u1ea3n, \u0111\u1ec3 m\u1ed9t Flip Flop ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang ch\u1ee9c n\u0103ng, d\u1eef li\u1ec7u \u0111\u01b0a v\u00e0o \u0111\u1ea7u v\u00e0o D ph\u1ea3i th\u1ecfa m\u00e3n \u0111i\u1ec1u ki\u1ec7n Setup Time v\u00e0 Hold Time. Trong \u0111\u00f3, Setup Time l\u00e0 kho\u1ea3ng th\u1eddi gian nh\u1ecf nh\u1ea5t m\u00e0 Data in ph\u1ea3i gi\u1eef \u1ed5n \u0111\u1ecbnh tr\u01b0\u1edbc th\u1eddi \u0111i\u1ec3m s\u01b0\u1eddn l\u00ean clock; Hold Time l\u00e0 kho\u1ea3ng th\u1eddi gian nh\u1ecf nh\u1ea5t m\u00e0 Data in ph\u1ea3i gi\u1eef \u1ed5n \u0111\u1ecbnh sau th\u1eddi \u0111i\u1ec3m s\u01b0\u1eddn l\u00ean clock. Setup/Hold Time Violation: Khi \u0111\u1ea7u v\u00e0o D vi ph\u1ea1m \u0111i\u1ec1u ki\u1ec7n Setup/Hold Time, k\u1ebft qu\u1ea3 \u0111\u1ea7u ra Q c\u00f3 th\u1ec3 x\u1ea3y ra m\u1ed9t trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p \u1edf h\u00ecnh sau: Metastability Definition in Wiki Static Timing Path l\u00e0 m\u1ed9t path m\u00e0: B\u1eaft \u0111\u1ea7u t\u1eeb m\u1ed9t Clocked Element Truy\u1ec1n lan qua c\u00e1c ph\u1ea7n t\u1eed logic c\u0169ng nh\u01b0 d\u00e2y n\u1ed1i K\u1ebft th\u00fac t\u1ea1i m\u1ed9t Clocked Element Setup check/Hold check Basic definitions is used in Setup check/Hold check. Launch edge: Capture edge: Hold relationship: Setup relationship: Setup check: Checks that a change in a clocked element has time to propagate to other clocked elements before the next clock event. STA with Vivado Xilinx performance baselining \u0110\u1ec3 c\u00f3 th\u1ec3 ph\u00e2n t\u00edch m\u1ed9t design hi\u1ec7u qu\u1ea3, k\u0129 s\u01b0 c\u00f3 th\u1ec3 d\u1ef1a v\u00e0o baselining m\u00e0 Xilinx gi\u1edbi thi\u1ec7u. Chi ti\u1ebft v\u1ec1 c\u00e1c b\u01b0\u1edbc th\u1ef1c hi\u1ec7n ph\u00e2n t\u00edch theo Xilinx \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n trong c\u00e1c h\u00ecnh v\u1ebd sau. Trong \u0111\u00f3 c\u00f3 ba b\u01b0\u1edbc ch\u00ednh: Optimize Internal Paths: Ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch, t\u1ed1i \u01b0u n\u1ed9i b\u1ed9 FPGA. Optimize Entire Chip: Ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch to\u00e0n b\u1ed9 FPGA trong \u0111\u00f3 bao g\u1ed3m c\u1ea3 k\u1ebft n\u1ed1i n\u1ed9i b\u1ed9 c\u0169ng nh\u01b0 c\u00e1c k\u1ebft n\u1ed1i v\u1edbi chip b\u00ean ngo\u00e0i Fine-tune: B\u1ed5 sung th\u00eam c\u00e1c constraint li\u00ean quan \u0111\u1ebfn exception path, floor planning Trong b\u00e1o c\u00e1o n\u00e0y s\u1ebd t\u1eadp trung v\u00e0o m\u1ee5c Optimize Internal Path. Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n tr\u00ean c\u00f4t d\u1ecdc th\u1ee9 nh\u1ea5t c\u1ee7a s\u01a1 \u0111\u1ed3. Xilinx timing analysis tool Vivado timing analysis report M\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m c\u01a1 b\u1ea3n trong Xilinx Timing Report. Trong c\u00e1c timing report, th\u01b0\u1eddng xu\u1ea5t hi\u1ec7n c\u00e1c kh\u00e1i ni\u1ec7m nh\u01b0 WNS/TNS, WHS/THS. C\u00e1c tham s\u1ed1 n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u1ed9t design c\u00f3 timing violation hay kh\u00f4ng. \u0110\u1ecbnh ngh\u0129a c\u1ee7a c\u00e1c tham s\u1ed1 n\u00e0y nh\u01b0 sau: WNS: Worst Negative Slack . K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh Setup Check TNS: Total Negative Slack . T\u1ed5ng gi\u00e1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c Negative Slack WHS: Worst Hold Slack . K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh Hold Check. THS: Total Hold Slack . T\u1ed5ng gi\u00e1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c Hold Slack. How does Vivado calculate Hold Time Slack? Hold Time Check \u0111\u01b0\u1ee3c x\u00e9t tr\u00ean c\u00f9ng m\u1ed9t s\u01b0\u1eddn clock c\u1ee7a Source Clock v\u00e0 Destination Clock. X\u00e9t m\u1ed9t Static Timing Path c\u1ee5 th\u1ec3 c\u00f3 s\u01a1 \u0111\u1ed3 nh\u01b0 h\u00ecnh d\u01b0\u1edbi \u0111\u00e2y. Timing path \u0111\u01b0\u1ee3c t\u00ednh gi\u1eefa F1 v\u00e0 F2 (2 Clocked Elements), F1/F2 s\u1eed d\u1ee5ng chung clocks \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb CLKOUT1 c\u1ee7a MMCM2_ADV. Chi ti\u1ebft v\u1ec1 path n\u00e0y \u0111\u01b0\u1ee3c ghi r\u00f5 trong report sau: \u1ede m\u1ee5c Summary c\u1ee7a Path Report c\u00f3 c\u00e1c th\u00f4ng tin sau: Name: T\u00ean c\u1ee7a path trong design Slack (Hold): Negative Hold Slack Source: Pin Clock in c\u1ee7a F1 Destination: Pin Data in c\u1ee7a F2 Path Group: group clock c\u1ee7a path \u0111ang \u0111\u01b0\u1ee3c x\u00e9t, \u1edf \u0111\u00e2y l\u00e0 generated clock ad9122_tx1_serdes_clkout1 Path Type: Lo\u1ea1i path \u0111ang \u0111\u01b0\u1ee3c x\u00e9t, Hold ho\u1eb7c Setup (???) Requirement: (???) Data Path Delay: Delay gi\u1eefa F1/F2. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec ph\u1ea7n t\u1eed logic n\u00e0o n\u1eb1m tr\u00ean path n\u00e0y, do \u0111\u00f3 Data Path Delay \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng t\u1ed5ng c\u1ee7a: FlipFlop Delay (th\u1eddi gian t\u1eeb khi c\u00f3 input \u0111\u1ebfn khi c\u00f3 output c\u1ee7a FF) v\u00e0 Net Delay (tr\u1ec5 tr\u00ean d\u00e2y n\u1ed1i). Logic Level: (Xem l\u1ea1i \u0111\u1ecbnh ngh\u0129a c\u1ee7a logic level) Clock Path Skew: \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng DCD-SCD-CPR trong \u0111\u00f3: DCD l\u00e0 Destination Clock Delay, SCD Source Clock Delay v\u00e0 CPR l\u00e0 Clock Pessimism Removal. Clock Pessimism Removal (CPR) is the removal of artificially induced pessimism from the common clock path between launching startpoint and capturing endpoint. \u1ede m\u1ee5c Source Clock Path, report s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft \u0111\u01b0\u1eddng \u0111i c\u1ee7a Source Clock. Theo nh\u01b0 report \u1edf h\u00ecnh tr\u00ean, \u0111\u1ec3 \u0111\u1ebfn \u0111\u01b0\u1ee3c F1, Source Clock s\u1ebd ph\u1ea3i \u0111i qua: IBUFDS BUFG, PLL2_ADV BUFGCTL, MMCM2_ADV BUFG nh\u01b0 \u1edf h\u00ecnh v\u1ebd \u0111\u1ea7u ti\u00ean. Qua report ta r\u00fat ra \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 nh\u1eadn x\u00e9t nh\u01b0 sau: Sau khi \u0111i qua c\u00e1c ph\u1ea7n t\u1eed nh\u01b0 BUFG, IBUFDS, BUFGCTL ..., clock b\u1ecb tr\u1ec5 \u0111i m\u1ed9t kho\u1ea3ng th\u1eddi gian Sau khi \u0111i qua c\u00e1c ph\u1ea7n t\u1eed t\u1ea1o clock nh\u01b0 MMCM2_ADV, PLL2_ADV..., t\u00f9y theo c\u1ea5u h\u00ecnh m\u00e0 clock c\u00f3 th\u1ec3 gi\u1ea3m ho\u1eb7c t\u0103ng \u0111\u1ed9 tr\u1ec5 (gi\u00e1 tr\u1ecb c\u00f3 th\u1ec3 \u00e2m ho\u1eb7c d\u01b0\u01a1ng). Ph\u1ea7n Data Path s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft h\u01a1n v\u1ec1 delay gi\u1eefa F1/F2, c\u00e1i m\u00e0 \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn \u1edf m\u1ee5c Sumary. Ph\u1ea7n Destination Clock Path c\u00f3 ch\u1ee9c n\u0103ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 ph\u1ea7n Source Clock Path, s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft \u0111\u01b0\u1eddng \u0111i c\u1ee7a Destination Clock Path. V\u1edbi Report nh\u01b0 tr\u00ean, ta c\u00f3 th\u1ec3 v\u1ebd \u0111\u01b0\u1ee3c Timing Diagram cho Path n\u00e0y nh\u01b0 sau: Trong \u0111\u00f3: Source Clock Path Delay b\u1eb1ng 0.975 ns \u0111\u01b0\u1ee3c t\u00ednh t\u1eeb t\u1ed5ng c\u00e1c delay tr\u00ean c\u00e1c ph\u1ea7n t\u1eed m\u00e0 clocks \u0111i qua, gi\u00e1 tr\u1ecb n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c \u1edf d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a Source Clock Report. Data Path Delay b\u1eb1ng 0.424 ns l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a delay gi\u1eefa F1/F2, gi\u00e1 tr\u1ecb n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c t\u1eeb d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a Data Path report. L\u01b0u \u00fd r\u1eb1ng gi\u00e1 tr\u1ecb \u0111\u1ecdc \u0111\u01b0\u1ee3c \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1ed9ng th\u00eam Source Clock Path Delay. Destination Clock Path Delay b\u1eb1ng 1.559 ns \u0111\u01b0\u1ee3c t\u00ednh gi\u1ed1ng nh\u01b0 v\u1edbi Source Clock Path Delay. Gi\u00e1 tr\u1ecb Negative Hold Time Slack s\u1ebd \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng: Source Clock Path Delay + Data Path Delay -- Destination Clock Path Delay = 0.975 ns + 0.424 ns -- 1.559 ns = - 0.220 ns** K\u1ebft qu\u1ea3 n\u00e0y gi\u1ed1ng v\u1edbi Report c\u1ee7a Xilinx Vivado. How does Vivado calculate Setup Time Slack? Qu\u00e1 tr\u00ecnh t\u00ednh to\u00e1n Setup Time Slack \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Hold Time Slack nh\u01b0 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean hai s\u01b0\u1eddn clock kh\u00e1c nhau. Timing Analysis TCL Command get_clocks Description: \u0110\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 list ra c\u00e1c clocks trong thi\u1ebft k\u1ebf hi\u1ec7n t\u1ea1i. Syntax: get_clocks [-regexp] [-nocase] [-filter arg ] [-of_objects args ] [-match_style arg ] [-include_generated_clocks] [-quiet] verbose] [ patterns ] Examples: get_clocks //getting all clocks in current design get_clock adc* // getting all clocks that has pattern \"adc\" in its name get_clock {adc* clk_out1*} // getting all clocks that has any pattern listed in {} in its name get_clocks -include_generated_clocks adc_clk_fwd // getting adc_clk_fwd and all of its generated clocks report_clocks Description: reporting about a clocks or a list of clocks Syntax: report_clocks [-file arg ] [-append] [-return_string] [-quiet] [-verbose] [ clocks ] Examples: report_clocks // reporting all clocks in current design report_clocks --file report_clock_evt2a.txt // reporting and then outputting this content to an output file. Create output file if it is not existed. report_clocks [get_clocks adc_clk_fwd] // reporting about particular clock that is gotten by using get_clocks command. Xilinx Design Constraint (XDC) Design with the 7 series Clocking Resources in 7 series. Clock regions: M\u1ed7i die FPGA \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c clock regions. Chi\u1ec1u cao (high) c\u1ee7a m\u1ed7i clock regions l\u00e0 50 CLBs (50 CLBs rows), b\u1ec1 r\u1ed9ng chi\u1ebfm m\u1ed9t n\u1eeda die. Clock Management Tile (CMT): M\u1ed7i clock region ch\u1ee9a m\u1ed9t CMT. Trong m\u1ed7i CMT ch\u1ee9a: 01 Mixed-Mode Clock Managers (MMCMs), 01 Phase Locked Loop (PLL). Clock-Capable Inputs (CCIO) : b\u1ea5t k\u00ec m\u1ed9t thi\u1ebft k\u1ebf FPGA \u0111\u1ed3ng b\u1ed9 n\u00e0o (synchronous design) \u0111\u1ec1u c\u1ea7n ph\u1ea3i cung c\u1ea5p \u00edt nh\u1ea5t m\u1ed9t \u0111\u01b0\u1eddng clock reference t\u1eeb b\u00ean ngo\u00e0i chip. \u0110\u01b0\u1eddng clock n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o chip FPGA b\u1eb1ng c\u00e1c port \u0111\u1eb7c bi\u1ec7t (clock-capable) \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf ri\u00eang cho clock. \u0110\u1ed1i v\u1edbi 7 series FPGA s\u1ebd c\u00f3 4 ports clock-capable. Trong \u0111\u00f3: 2 port l\u00e0 Multi-Region Clock Capable (MRCC), 2 ports c\u00f2n l\u1ea1i l\u00e0 Single Region Clock Capable (SRCC). IBUFG, IBUFGS c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 map t\u00edn hi\u1ec7u clock \u0111\u1ebfn c\u00e1c ch\u00e2n clock-capable. {width=\"6.5in\" height=\"3.88125in\"} Global Clocking: Global clock networks cho pheps ph\u00e2n ph\u1ed1i clocks \u0111\u1ebfn c\u00e1c clocked element tr\u00ean chip die. Global clocks are driven by BUFGCTRL located in the middle of the die. Global Clocking Buffer (BUFGCTRL): For Clock Multiplexing - BUFGMUX For Gated Clock -- BUFGCE Horizontal Spine Clock Buffer (BUFH):","title":"Static Timing Analysis"},{"location":"fpga/timing_analysis/timing_analysis/#static-timing-analysis-sta","text":"Hanoi Friday, September 22, 2016 -- by VuTang Static timing analysis (STA) is a simulation method of computing the expected timing of a digital circuit without requiring a simulation of the full circuit ( Wiki ). More information about STA in Vietnamese at T\u00ecm hi\u1ec3u v\u1ec1 Static Timing Analysis .","title":"STATIC TIMING ANALYSIS (STA)"},{"location":"fpga/timing_analysis/timing_analysis/#basic-knowledge","text":"","title":"Basic knowledge"},{"location":"fpga/timing_analysis/timing_analysis/#definitions","text":"","title":"Definitions"},{"location":"fpga/timing_analysis/timing_analysis/#clock-signal","text":"Clock l\u00e0 m\u1ed9t t\u00edn hi\u1ec7u c\u00f3 chu k\u00ec c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh sau: Period (Chu k\u00ec), Duty Cycle, Jitter, Phase... M\u1ed9t s\u1ed1 \u0111\u1eb7c t\u00ednh \u0111\u00e1ng ch\u00fa \u00fd c\u1ee7a clock xu\u1ea5t hi\u1ec7n trong h\u1ec7 th\u1ed1ng th\u1ef1c t\u1ebf: Clock Skew: l\u00e0 hi\u1ec7n t\u01b0\u1ee3ng m\u00e0 trong m\u1ed9t m\u1ea1ch \u0111\u1ed3ng b\u1ed9 (asynchronous circuit) v\u1edbi c\u00f9ng m\u1ed9t ngu\u1ed3n clock \u0111\u1ea7u v\u00e0o nh\u01b0ng \u0111\u1ebfn c\u00e1c ph\u1ea7n t\u1eed Flip Flop (Clocked Element) kh\u00e1c nhau trong nh\u1eefng th\u1eddi \u0111i\u1ec3m kh\u00e1c nhau. Clock Jitter: l\u00e0 \u0111\u1ed9 l\u1ec7ch c\u1ee7a s\u01b0\u1eddn clock th\u1ef1c t\u1ebf so v\u1edbi s\u01b0\u1eddn clock l\u00ed t\u01b0\u1edfng. C\u00f3 nhi\u1ec1u lo\u1ea1i Jitter kh\u00e1c nhau nh\u01b0: Cycle-to-Cycle (\u0111\u1ed9 ch\u00eanh l\u1ec7ch gi\u1eefa hai chu k\u00ec li\u00ean ti\u1ebfp), Period (s\u1ef1 thay \u0111\u1ed5i l\u1edbn nh\u1ea5t c\u1ee7a chu k\u00ec clock trong v\u00f2ng 100 chu k\u00ec - cycles) Clock Latency: L\u00e0 kho\u1ea3ng th\u1eddi gian tr\u1ec5 t\u1eeb ngu\u1ed3n clock (clk port, MMCM output pin, ...) \u0111\u1ec3 ph\u1ea7n t\u1eed d\u00f9ng clock \u0111\u00f3 (clocked element). Synchronous/Asynchronous Clock: N\u1ebfu 2 clocks \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi 2 ngu\u1ed3n kh\u00e1c nhau th\u00ec \u0111\u01b0\u1ee3c m\u1eb7c \u0111\u1ecbnh l\u00e0 kh\u00f4ng \u0111\u1ed3ng b\u1ed9 (asynchronous) k\u1ec3 c\u1ea3 trong tr\u01b0\u1eddng h\u1ee3p l\u00e0 c\u00f9ng t\u1ea7n s\u1ed1. Nguy\u00ean nh\u00e2n: hai ngu\u1ed3n clocks kh\u00e1c nhau s\u1eed d\u1ee5ng c\u00e1c b\u1ed9 oscillator kh\u00e1c nhau, c\u00e1c b\u1ed9 oscillator n\u00e0y c\u00f3 \u0111\u1ed9 sai l\u1ec7ch theo th\u1eddi gian kh\u00e1c nhau n\u00ean d\u1eabn \u0111\u1ebfn quan h\u1ec7 phase v\u00e0 period gi\u1eefa hai clock kh\u00f4ng \u0111\u01b0\u1ee3c c\u1ed1 \u0111\u1ecbnh (sai l\u1ec7ch c\u1ee7a b\u1ed9 oscillator \u0111\u01b0\u1ee3c \u0111o b\u1eb1ng ppm -- parts per million ho\u1eb7c ppb -- parts per billion ) N\u1ebfu 2 clocks \u0111\u01b0\u1ee3c t\u1ea1o ra t\u1eeb m\u1ed9t ngu\u1ed3n, m\u1eb7c d\u00f9 c\u00f3 th\u1ec3 phase v\u00e0 frequency kh\u00e1c nhau nh\u01b0ng v\u1eabn \u0111\u01b0\u1ee3c x\u00e9t l\u00e0 \u0111\u1ed3ng b\u1ed9.","title":"Clock Signal"},{"location":"fpga/timing_analysis/timing_analysis/#setuphold-time","text":"Setup/Hold Time: X\u00e9t m\u1ed9t Flip Flop c\u00f3 ch\u00e2n clock CLK, data in D, data out Q. \u0110\u1ecbnh ngh\u0129a v\u1ec1 Setup/Hold Time \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n trong h\u00ecnh v\u1ebd sau: V\u1ec1 c\u01a1 b\u1ea3n, \u0111\u1ec3 m\u1ed9t Flip Flop ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang ch\u1ee9c n\u0103ng, d\u1eef li\u1ec7u \u0111\u01b0a v\u00e0o \u0111\u1ea7u v\u00e0o D ph\u1ea3i th\u1ecfa m\u00e3n \u0111i\u1ec1u ki\u1ec7n Setup Time v\u00e0 Hold Time. Trong \u0111\u00f3, Setup Time l\u00e0 kho\u1ea3ng th\u1eddi gian nh\u1ecf nh\u1ea5t m\u00e0 Data in ph\u1ea3i gi\u1eef \u1ed5n \u0111\u1ecbnh tr\u01b0\u1edbc th\u1eddi \u0111i\u1ec3m s\u01b0\u1eddn l\u00ean clock; Hold Time l\u00e0 kho\u1ea3ng th\u1eddi gian nh\u1ecf nh\u1ea5t m\u00e0 Data in ph\u1ea3i gi\u1eef \u1ed5n \u0111\u1ecbnh sau th\u1eddi \u0111i\u1ec3m s\u01b0\u1eddn l\u00ean clock. Setup/Hold Time Violation: Khi \u0111\u1ea7u v\u00e0o D vi ph\u1ea1m \u0111i\u1ec1u ki\u1ec7n Setup/Hold Time, k\u1ebft qu\u1ea3 \u0111\u1ea7u ra Q c\u00f3 th\u1ec3 x\u1ea3y ra m\u1ed9t trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p \u1edf h\u00ecnh sau: Metastability Definition in Wiki Static Timing Path l\u00e0 m\u1ed9t path m\u00e0: B\u1eaft \u0111\u1ea7u t\u1eeb m\u1ed9t Clocked Element Truy\u1ec1n lan qua c\u00e1c ph\u1ea7n t\u1eed logic c\u0169ng nh\u01b0 d\u00e2y n\u1ed1i K\u1ebft th\u00fac t\u1ea1i m\u1ed9t Clocked Element","title":"Setup/Hold Time"},{"location":"fpga/timing_analysis/timing_analysis/#setup-checkhold-check","text":"Basic definitions is used in Setup check/Hold check. Launch edge: Capture edge: Hold relationship: Setup relationship: Setup check: Checks that a change in a clocked element has time to propagate to other clocked elements before the next clock event.","title":"Setup check/Hold check"},{"location":"fpga/timing_analysis/timing_analysis/#sta-with-vivado","text":"","title":"STA with Vivado"},{"location":"fpga/timing_analysis/timing_analysis/#xilinx-performance-baselining","text":"\u0110\u1ec3 c\u00f3 th\u1ec3 ph\u00e2n t\u00edch m\u1ed9t design hi\u1ec7u qu\u1ea3, k\u0129 s\u01b0 c\u00f3 th\u1ec3 d\u1ef1a v\u00e0o baselining m\u00e0 Xilinx gi\u1edbi thi\u1ec7u. Chi ti\u1ebft v\u1ec1 c\u00e1c b\u01b0\u1edbc th\u1ef1c hi\u1ec7n ph\u00e2n t\u00edch theo Xilinx \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n trong c\u00e1c h\u00ecnh v\u1ebd sau. Trong \u0111\u00f3 c\u00f3 ba b\u01b0\u1edbc ch\u00ednh: Optimize Internal Paths: Ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch, t\u1ed1i \u01b0u n\u1ed9i b\u1ed9 FPGA. Optimize Entire Chip: Ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch to\u00e0n b\u1ed9 FPGA trong \u0111\u00f3 bao g\u1ed3m c\u1ea3 k\u1ebft n\u1ed1i n\u1ed9i b\u1ed9 c\u0169ng nh\u01b0 c\u00e1c k\u1ebft n\u1ed1i v\u1edbi chip b\u00ean ngo\u00e0i Fine-tune: B\u1ed5 sung th\u00eam c\u00e1c constraint li\u00ean quan \u0111\u1ebfn exception path, floor planning Trong b\u00e1o c\u00e1o n\u00e0y s\u1ebd t\u1eadp trung v\u00e0o m\u1ee5c Optimize Internal Path. Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n tr\u00ean c\u00f4t d\u1ecdc th\u1ee9 nh\u1ea5t c\u1ee7a s\u01a1 \u0111\u1ed3.","title":"Xilinx performance baselining"},{"location":"fpga/timing_analysis/timing_analysis/#xilinx-timing-analysis-tool","text":"","title":"Xilinx timing analysis tool"},{"location":"fpga/timing_analysis/timing_analysis/#vivado-timing-analysis-report","text":"M\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m c\u01a1 b\u1ea3n trong Xilinx Timing Report. Trong c\u00e1c timing report, th\u01b0\u1eddng xu\u1ea5t hi\u1ec7n c\u00e1c kh\u00e1i ni\u1ec7m nh\u01b0 WNS/TNS, WHS/THS. C\u00e1c tham s\u1ed1 n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u1ed9t design c\u00f3 timing violation hay kh\u00f4ng. \u0110\u1ecbnh ngh\u0129a c\u1ee7a c\u00e1c tham s\u1ed1 n\u00e0y nh\u01b0 sau: WNS: Worst Negative Slack . K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh Setup Check TNS: Total Negative Slack . T\u1ed5ng gi\u00e1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c Negative Slack WHS: Worst Hold Slack . K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh Hold Check. THS: Total Hold Slack . T\u1ed5ng gi\u00e1 tr\u1ecb c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c Hold Slack. How does Vivado calculate Hold Time Slack? Hold Time Check \u0111\u01b0\u1ee3c x\u00e9t tr\u00ean c\u00f9ng m\u1ed9t s\u01b0\u1eddn clock c\u1ee7a Source Clock v\u00e0 Destination Clock. X\u00e9t m\u1ed9t Static Timing Path c\u1ee5 th\u1ec3 c\u00f3 s\u01a1 \u0111\u1ed3 nh\u01b0 h\u00ecnh d\u01b0\u1edbi \u0111\u00e2y. Timing path \u0111\u01b0\u1ee3c t\u00ednh gi\u1eefa F1 v\u00e0 F2 (2 Clocked Elements), F1/F2 s\u1eed d\u1ee5ng chung clocks \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb CLKOUT1 c\u1ee7a MMCM2_ADV. Chi ti\u1ebft v\u1ec1 path n\u00e0y \u0111\u01b0\u1ee3c ghi r\u00f5 trong report sau: \u1ede m\u1ee5c Summary c\u1ee7a Path Report c\u00f3 c\u00e1c th\u00f4ng tin sau: Name: T\u00ean c\u1ee7a path trong design Slack (Hold): Negative Hold Slack Source: Pin Clock in c\u1ee7a F1 Destination: Pin Data in c\u1ee7a F2 Path Group: group clock c\u1ee7a path \u0111ang \u0111\u01b0\u1ee3c x\u00e9t, \u1edf \u0111\u00e2y l\u00e0 generated clock ad9122_tx1_serdes_clkout1 Path Type: Lo\u1ea1i path \u0111ang \u0111\u01b0\u1ee3c x\u00e9t, Hold ho\u1eb7c Setup (???) Requirement: (???) Data Path Delay: Delay gi\u1eefa F1/F2. Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, kh\u00f4ng c\u00f3 b\u1ea5t k\u00ec ph\u1ea7n t\u1eed logic n\u00e0o n\u1eb1m tr\u00ean path n\u00e0y, do \u0111\u00f3 Data Path Delay \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng t\u1ed5ng c\u1ee7a: FlipFlop Delay (th\u1eddi gian t\u1eeb khi c\u00f3 input \u0111\u1ebfn khi c\u00f3 output c\u1ee7a FF) v\u00e0 Net Delay (tr\u1ec5 tr\u00ean d\u00e2y n\u1ed1i). Logic Level: (Xem l\u1ea1i \u0111\u1ecbnh ngh\u0129a c\u1ee7a logic level) Clock Path Skew: \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng DCD-SCD-CPR trong \u0111\u00f3: DCD l\u00e0 Destination Clock Delay, SCD Source Clock Delay v\u00e0 CPR l\u00e0 Clock Pessimism Removal. Clock Pessimism Removal (CPR) is the removal of artificially induced pessimism from the common clock path between launching startpoint and capturing endpoint. \u1ede m\u1ee5c Source Clock Path, report s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft \u0111\u01b0\u1eddng \u0111i c\u1ee7a Source Clock. Theo nh\u01b0 report \u1edf h\u00ecnh tr\u00ean, \u0111\u1ec3 \u0111\u1ebfn \u0111\u01b0\u1ee3c F1, Source Clock s\u1ebd ph\u1ea3i \u0111i qua: IBUFDS BUFG, PLL2_ADV BUFGCTL, MMCM2_ADV BUFG nh\u01b0 \u1edf h\u00ecnh v\u1ebd \u0111\u1ea7u ti\u00ean. Qua report ta r\u00fat ra \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 nh\u1eadn x\u00e9t nh\u01b0 sau: Sau khi \u0111i qua c\u00e1c ph\u1ea7n t\u1eed nh\u01b0 BUFG, IBUFDS, BUFGCTL ..., clock b\u1ecb tr\u1ec5 \u0111i m\u1ed9t kho\u1ea3ng th\u1eddi gian Sau khi \u0111i qua c\u00e1c ph\u1ea7n t\u1eed t\u1ea1o clock nh\u01b0 MMCM2_ADV, PLL2_ADV..., t\u00f9y theo c\u1ea5u h\u00ecnh m\u00e0 clock c\u00f3 th\u1ec3 gi\u1ea3m ho\u1eb7c t\u0103ng \u0111\u1ed9 tr\u1ec5 (gi\u00e1 tr\u1ecb c\u00f3 th\u1ec3 \u00e2m ho\u1eb7c d\u01b0\u01a1ng). Ph\u1ea7n Data Path s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft h\u01a1n v\u1ec1 delay gi\u1eefa F1/F2, c\u00e1i m\u00e0 \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn \u1edf m\u1ee5c Sumary. Ph\u1ea7n Destination Clock Path c\u00f3 ch\u1ee9c n\u0103ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 ph\u1ea7n Source Clock Path, s\u1ebd m\u00f4 t\u1ea3 chi ti\u1ebft \u0111\u01b0\u1eddng \u0111i c\u1ee7a Destination Clock Path. V\u1edbi Report nh\u01b0 tr\u00ean, ta c\u00f3 th\u1ec3 v\u1ebd \u0111\u01b0\u1ee3c Timing Diagram cho Path n\u00e0y nh\u01b0 sau: Trong \u0111\u00f3: Source Clock Path Delay b\u1eb1ng 0.975 ns \u0111\u01b0\u1ee3c t\u00ednh t\u1eeb t\u1ed5ng c\u00e1c delay tr\u00ean c\u00e1c ph\u1ea7n t\u1eed m\u00e0 clocks \u0111i qua, gi\u00e1 tr\u1ecb n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c \u1edf d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a Source Clock Report. Data Path Delay b\u1eb1ng 0.424 ns l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a delay gi\u1eefa F1/F2, gi\u00e1 tr\u1ecb n\u00e0y c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c t\u1eeb d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a Data Path report. L\u01b0u \u00fd r\u1eb1ng gi\u00e1 tr\u1ecb \u0111\u1ecdc \u0111\u01b0\u1ee3c \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1ed9ng th\u00eam Source Clock Path Delay. Destination Clock Path Delay b\u1eb1ng 1.559 ns \u0111\u01b0\u1ee3c t\u00ednh gi\u1ed1ng nh\u01b0 v\u1edbi Source Clock Path Delay. Gi\u00e1 tr\u1ecb Negative Hold Time Slack s\u1ebd \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng: Source Clock Path Delay + Data Path Delay -- Destination Clock Path Delay = 0.975 ns + 0.424 ns -- 1.559 ns = - 0.220 ns** K\u1ebft qu\u1ea3 n\u00e0y gi\u1ed1ng v\u1edbi Report c\u1ee7a Xilinx Vivado. How does Vivado calculate Setup Time Slack? Qu\u00e1 tr\u00ecnh t\u00ednh to\u00e1n Setup Time Slack \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Hold Time Slack nh\u01b0 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean hai s\u01b0\u1eddn clock kh\u00e1c nhau. Timing Analysis TCL Command get_clocks Description: \u0110\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 list ra c\u00e1c clocks trong thi\u1ebft k\u1ebf hi\u1ec7n t\u1ea1i. Syntax: get_clocks [-regexp] [-nocase] [-filter arg ] [-of_objects args ] [-match_style arg ] [-include_generated_clocks] [-quiet] verbose] [ patterns ] Examples: get_clocks //getting all clocks in current design get_clock adc* // getting all clocks that has pattern \"adc\" in its name get_clock {adc* clk_out1*} // getting all clocks that has any pattern listed in {} in its name get_clocks -include_generated_clocks adc_clk_fwd // getting adc_clk_fwd and all of its generated clocks report_clocks Description: reporting about a clocks or a list of clocks Syntax: report_clocks [-file arg ] [-append] [-return_string] [-quiet] [-verbose] [ clocks ] Examples: report_clocks // reporting all clocks in current design report_clocks --file report_clock_evt2a.txt // reporting and then outputting this content to an output file. Create output file if it is not existed. report_clocks [get_clocks adc_clk_fwd] // reporting about particular clock that is gotten by using get_clocks command.","title":"Vivado timing analysis report"},{"location":"fpga/timing_analysis/timing_analysis/#xilinx-design-constraint-xdc","text":"","title":"Xilinx Design Constraint (XDC)"},{"location":"fpga/timing_analysis/timing_analysis/#design-with-the-7-series","text":"Clocking Resources in 7 series. Clock regions: M\u1ed7i die FPGA \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c clock regions. Chi\u1ec1u cao (high) c\u1ee7a m\u1ed7i clock regions l\u00e0 50 CLBs (50 CLBs rows), b\u1ec1 r\u1ed9ng chi\u1ebfm m\u1ed9t n\u1eeda die. Clock Management Tile (CMT): M\u1ed7i clock region ch\u1ee9a m\u1ed9t CMT. Trong m\u1ed7i CMT ch\u1ee9a: 01 Mixed-Mode Clock Managers (MMCMs), 01 Phase Locked Loop (PLL). Clock-Capable Inputs (CCIO) : b\u1ea5t k\u00ec m\u1ed9t thi\u1ebft k\u1ebf FPGA \u0111\u1ed3ng b\u1ed9 n\u00e0o (synchronous design) \u0111\u1ec1u c\u1ea7n ph\u1ea3i cung c\u1ea5p \u00edt nh\u1ea5t m\u1ed9t \u0111\u01b0\u1eddng clock reference t\u1eeb b\u00ean ngo\u00e0i chip. \u0110\u01b0\u1eddng clock n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o chip FPGA b\u1eb1ng c\u00e1c port \u0111\u1eb7c bi\u1ec7t (clock-capable) \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf ri\u00eang cho clock. \u0110\u1ed1i v\u1edbi 7 series FPGA s\u1ebd c\u00f3 4 ports clock-capable. Trong \u0111\u00f3: 2 port l\u00e0 Multi-Region Clock Capable (MRCC), 2 ports c\u00f2n l\u1ea1i l\u00e0 Single Region Clock Capable (SRCC). IBUFG, IBUFGS c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 map t\u00edn hi\u1ec7u clock \u0111\u1ebfn c\u00e1c ch\u00e2n clock-capable. {width=\"6.5in\" height=\"3.88125in\"} Global Clocking: Global clock networks cho pheps ph\u00e2n ph\u1ed1i clocks \u0111\u1ebfn c\u00e1c clocked element tr\u00ean chip die. Global clocks are driven by BUFGCTRL located in the middle of the die. Global Clocking Buffer (BUFGCTRL): For Clock Multiplexing - BUFGMUX For Gated Clock -- BUFGCE Horizontal Spine Clock Buffer (BUFH):","title":"Design with the 7 series"},{"location":"linux_device_driver/kernel_module/","text":"About Kernel Module Kernel Module Information","title":"Kernel Module"},{"location":"linux_device_driver/kernel_module/#about-kernel-module","text":"","title":"About Kernel Module"},{"location":"linux_device_driver/kernel_module/#kernel-module-information","text":"","title":"Kernel Module Information"},{"location":"linux_device_driver/overview/","text":"Overview about Linux Device Driver T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 c\u00e1c kh\u00e1i ni\u1ec7m chung v\u1ec1 Linux Device Driver. C\u1ea7n c\u00f3 c\u00e1c b\u00e0i t\u00ecm hi\u1ec3u chuy\u00ean s\u00e2u v\u1ec1 c\u00e1c m\u1ee5c trong ph\u1ea7n n\u00e0y. Original note Linux System Overview Linux Device Model C\u00e1c thi\u1ebft b\u1ecb k\u1ebft n\u1ed1i \u0111\u1ebfn CPU \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Device . M\u1ed7i device n\u00e0y cung c\u1ea5p c\u00e1c t\u00e0i nguy\u00ean kh\u00e1c nhau \u0111\u1ebfn ng\u01b0\u1eddi d\u00f9ng, Linux kernel th\u00f4ng qua device driver \u0111\u1ec3 giao ti\u1ebfp \u0111\u1ebfn device v\u00e0 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean c\u1ee7a device \u0111\u00f3. C\u00e1c device k\u1ebft n\u1ed1i \u0111\u1ebfn CPU b\u1eb1ng m\u1ed9t bus. N\u00f3 c\u00f3 th\u1ec3 l\u00e0 c\u00e1c bus giao ti\u1ebfp v\u1edbi thi\u1ebft b\u1ecb ngo\u1ea1i vi nh\u01b0 SPI, I2C, ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 l\u00e0 system bus c\u1ee7a h\u1ec7 th\u1ed1ng. L\u01b0u \u00fd r\u1eb1ng Linux Kernel c\u0169ng nh\u00ecn bus gi\u1ed1ng nh\u01b0 m\u1ed9t device v\u00e0 t\u1ea5t nhi\u00ean device th\u00ec c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o. Do \u0111\u00f3 Linux Kernel c\u0169ng cung c\u1ea5p c\u00e1c quy tr\u00ecnh \u0111\u1ec3 \u0111\u0103ng k\u00fd m\u1ed9t bus v\u1edbi h\u1ec7 th\u1ed1ng. Trong qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng, d\u1ef1a v\u00e0o th\u00f4ng tin m\u00e0 device-tree cung c\u1ea5p v\u1ec1 c\u00e1c device trong h\u1ec7 th\u1ed1ng, Linux Kernel g\u1ecdi \u0111\u1ebfn c\u00e1c device driver t\u01b0\u01a1ng \u1ee9ng \u0111\u1ec3 d\u00f2 t\u00ecm v\u00e0 th\u00eam thi\u1ebft b\u1ecb v\u00e0o h\u1ec7 th\u1ed1ng. Platform device l\u00e0 c\u00e1c device \u0111\u1ea7u ti\u00ean \u0111\u01b0\u1ee3c d\u00f2 t\u00ecm v\u00e0 th\u00eam v\u00e0o h\u1ec7 th\u1ed1ng. \u0110\u01a1n gi\u1ea3n c\u00f3 th\u1ec3 hi\u1ec3u c\u00e1c platform device l\u00e0 c\u00e1c thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd tr\u1ef1c ti\u1ebfp trong v\u00f9ng nh\u1edb c\u1ee7a CPU, l\u00e0 c\u00e1c th\u1ef1c th\u1ec3 \u0111\u01b0\u1ee3c n\u1ed1i v\u1edbi system bus c\u1ee7a CPU. System bus n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 platform bus. Figure. An example about device model Kernel Module \u0110\u1ecbnh ngh\u0129a Kernel Module l\u00e0 m\u1ed9t \u0111o\u1ea1n m\u00e3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t ho\u1eb7c g\u1ee1 c\u00e0i \u0111\u1eb7t kh\u1ecfi Kernel theo y\u00eau c\u1ea7u. Kernel module gi\u00fap m\u1edf r\u1ed9ng ch\u1ee9c n\u0103ng cho kernel m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i kh\u1edfi \u0111\u1ed9ng l\u1ea1i h\u1ec7 th\u1ed1ng. Device Driver l\u00e0 m\u1ed9t lo\u1ea1i kernel module. Trong tr\u01b0\u1eddng h\u1ee3p c\u1ea7n th\u00eam m\u1ed9t ch\u1ee9c n\u0103ng v\u00e0o kernel trong khi kh\u00f4ng c\u00f3 kernel module, ng\u01b0\u1eddi ph\u00e1t tri\u1ec3n s\u1ebd c\u1ea7n ph\u1ea3i build l\u1ea1i c\u1ea3 h\u1ec7 th\u1ed1ng. M\u1ed9t blog vi\u1ebft v\u1ec1 Kernel Module t\u01b0\u01a1ng \u0111\u1ed1i hay v\u00e0 chi ti\u1ebft c\u00f3 th\u1ec3 xem th\u00eam t\u1ea1i \u0111\u00e2y . Blog \u0111\u01b0\u1ee3c vi\u1ebft b\u1edfi Derek Molloy. Kernel Module c\u0169ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i m\u1ed9t b\u00e0i vi\u1ebft c\u1ee7a ArchLinux (m\u1ed9t Linux Distro) t\u1ea1i \u0111\u00e2y . Ngo\u00e0i ra, tai trang web tldp.org c\u00f3 m\u1ed9t chu\u1ed7i c\u00e1c b\u00e0i vi\u1ebft li\u00ean quan \u0111\u1ebfn ph\u00e1t tri\u1ec3n Kernel module ( The Linux Kernel Module Programming Guide ). C\u00f3 hai d\u1ea1ng Kernel module: build-in v\u00e0 loadable file. Trong \u0111\u00f3 built-in module \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p v\u00e0o Kernel Image v\u00e0 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng trong qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng kernel. Ng\u01b0\u1eddi l\u1ea1i, loadable module c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng sau khi kernel \u0111\u00e3 kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng. Loadable Kernel Module (LKM) \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng b\u1eb1ng c\u00e1c c\u00e2u l\u1ec7nh nh\u01b0 modprobe ho\u1eb7c insmod. module_init module_exit Kernel module c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh ch\u1ea1y trong Kernel Space, nh\u01b0ng kh\u00f4ng gi\u1ed1ng nh\u01b0 ch\u01b0\u01a1ng tr\u00ecnh b\u00ecnh th\u01b0\u1eddng, kernel module kh\u00f4ng b\u1eaft \u0111\u1ea7u b\u1eb1ng h\u00e0m \"main\". Macro module_init() v\u00e0 module_exit() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u0103ng k\u00fd c\u00e1c h\u00e0m kh\u1edfi t\u1ea1o v\u00e0 h\u00e0m h\u1ee7y cho kernel module. T\u00f9y thu\u1ed9c v\u00e0o kernel module l\u00e0 built-in hay LKM m\u00e0 n\u1ed9i d\u1ee5ng c\u1ee7a module_init/exit s\u1ebd kh\u00e1c nhau. Trong tr\u01b0\u1eddng h\u1ee3p l\u00e0 built-in module, module_init s\u1ebd g\u1ecdi \u0111\u1ebfn macro _init_call d\u00f9ng \u0111\u1ec3 \u0111\u0103ng k\u00fd v\u1edbi h\u1ec7 th\u1ed1ng l\u00e0 module s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o tr\u1ecdng qu\u00e1 tr\u00ecnh init. Hai macro \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/init.h. In log trong kernel Ph\u01b0\u01a1ng ph\u00e1p debug c\u01a1 b\u1ea3n v\u00e0 ph\u1ed5 bi\u1ebfn nh\u1ea5t khi \u0111i ph\u00e1t tri\u1ec3n m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 in log ch\u1ea1y c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00f3 ra m\u00e0n h\u00ecnh ho\u1eb7c file. Kernel module s\u1eed d\u1ee5ng l\u1ec7nh prink thay v\u00ec printf nh\u01b0 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng User space. Ngo\u00e0i ra c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00eam c\u00e1c h\u1ecd h\u00e0m dev_ v\u00e0 pr_ \u0111\u1ec3 in th\u00eam th\u00f4ng tin trong kernel module. C\u00e0i \u0111\u1eb7t LKM module v\u00e0o h\u1ec7 th\u1ed1ng \u0110\u1ec3 c\u00e0i \u0111\u1eb7t LKM v\u00e0o h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng l\u1ec7nh insmod/rmmod/lsmod . Ngo\u00e0i ra c\u00f3 th\u1ec3 d\u00f9ng th\u00eam modprobe. Qu\u00e1 tr\u00ecnh s\u1eed d\u1ee5ng modprobe ph\u1ee9c t\u1ea1p h\u01a1n insmod, c\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam [t\u1ea1i \u0111\u00e2y] . Trong qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t module v\u00e0o h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 th\u00eam c\u00e1c paramtters cho module. \u0110\u1ec3 li\u1ec7t k\u00ea to\u00e0n b\u1ed9 th\u00f4ng tin c\u1ee7a c\u00e1c module \u0111ang \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t trong h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng lsmod. Lsmod \u0111\u1ecdc th\u00f4ng tin t\u1eeb /proc/modules, ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 \u0111\u1ecdc tr\u1ef1c ti\u1ebfp t\u1eeb text file /proc/modules \u0111\u1ec3 bi\u1ebft th\u00eam \u0111\u01b0\u1ee3c th\u00f4ng tin c\u1ee7a c\u00e1c module \u0111ang ch\u1ea1y trong h\u1ec7 th\u1ed1ng. Khi m\u1ed9t module \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng, th\u00f4ng tin v\u1ec1 module n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y trong sysfs virtual file system /sys/module Compile a kernel module \u0110\u1ec3 build m\u1ed9t kernel module, Linux Kernel s\u1eed d\u1ee5ng m\u1ed9t h\u1ec7 th\u1ed1ng g\u1ecdi l\u00e0 kbuild. C\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam th\u00f4ng tin v\u1ec1 h\u1ec7 th\u1ed1ng kbuild n\u00e0y trong Kernel Documentation ( kbuild/modules.txt ). Trong m\u1ee5c 2.2 c\u1ee7a [1] c\u00f3 gi\u1edbi thi\u1ec7u v\u1ec1 build kernel module. Character Device Driver Device Driver l\u00e0 m\u1ed9t kernel module, c\u00f3 ch\u1ee9c n\u0103ng giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng v\u00e0 cung c\u1ea5p c\u00e1c giao di\u1ec7n \u0111\u1ec3 c\u00e1c module kh\u00e1c c\u1ee7a kernel c\u0169ng nh\u01b0 user c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean li\u00ean quan \u0111\u1ebfn c\u00e1c ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng. T\u00f9y thu\u1ed9c v\u00e0o lo\u1ea1i ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng m\u00e0 device driver \u0111\u01b0\u1ee3c chia ra l\u00e0m c\u00e1c lo\u1ea1i kh\u00e1c nhau. Trong t\u00e0i li\u1ec7u LDD3, device driver \u0111\u01b0\u1ee3c chia ra l\u00e0m 3 lo\u1ea1i ch\u00ednh: char module, block module v\u00e0 network module. Trong \u0111\u00f3 character device s\u1ebd \u0111\u01b0\u1ee3c t\u1eadp trung nghi\u00ean c\u1ee9u trong t\u00e0i li\u1ec7u n\u00e0y. Nh\u01b0 v\u1eady, m\u1ed9t device driver n\u00f3i chung c\u1ea7n th\u1ef1c hi\u1ec7n hai nhi\u1ec7m v\u1ee5 ch\u00ednh: Cung c\u1ea5p c\u00e1c giao di\u1ec7n \u0111\u1ec3 c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi User Space, qua \u0111\u00f3 c\u00e1c \u1ee9ng d\u1ee5ng c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi ph\u1ea7n c\u1ee9ng th\u00f4ng qua c\u00e1c giao di\u1ec7n n\u00e0y. Truy c\u1eadp \u0111\u1ebfn ph\u1ea7n c\u1ee9ng. Device driver \u0111\u01b0\u1ee3c sinh ra l\u00e0 \u0111\u1ec3 giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng. Trong t\u00e0i li\u1ec7u n\u00e0y s\u1ebd t\u00ecm hi\u1ec3u t\u1eebng nhi\u1ec7m v\u1ee5 tr\u00ean c\u1ee7a Device Driver. Device File Device file hay special file l\u00e0 m\u1ed9t giao di\u1ec7n \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi device driver. Th\u00f4ng th\u01b0\u1eddng c\u00e1c device file xu\u1ea5t hi\u1ec7n trong /dev/ v\u00e0 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi virtual file system. Ng\u01b0\u1eddi d\u00f9ng th\u00f4ng qua c\u00e1c System Call \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi device driver th\u00f4ng qua device file. C\u00e1c System Call li\u00ean quan \u0111\u1ebfn t\u01b0\u01a1ng t\u00e1c file \u0111\u01b0\u1ee3c x\u1eed l\u00fd b\u1edfi h\u1ec7 th\u1ed1ng VFS (Virtual File System) nh\u01b0: open(), close(), read(), write(), mmpa()... Qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c system call n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 r\u00f5 trong Chapter 12: The Virtual File System c\u1ee7a s\u00e1ch Understanding Linux Kernel. V\u1eady v\u1edbi m\u1ed9t normal file, c\u00e1c ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 t\u00e1c \u0111\u1ed9ng g\u00ec \u0111\u01b0\u1ee3c? Th\u00f4ng tin n\u00e0y c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u qua t\u1eeb kh\u00f3a \"Working with file in C\". Major Minor M\u1ed7i Device File trong /dev/ \u0111\u01b0\u1ee3c \u0111\u1eb7c tr\u01b0ng b\u1edfi hai tham s\u1ed1: Major, Minor . Major \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh xem device \u0111\u00f3 t\u01b0\u01a1ng \u1ee9ng v\u1edbi driver n\u00e0o. Minor mang th\u00f4ng tin c\u1ee7a t\u1eebng thi\u1ebft b\u1ecb, v\u1ec1 c\u01a1 b\u1ea3n nhi\u1ec1u thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n b\u1eb1ng m\u1ed9t driver, do \u0111\u00f3 trong m\u1ed9t s\u1ed1 h\u1ec7 th\u1ed1ng, driver s\u1eed d\u1ee5ng Minor \u0111\u1ec3 ph\u00e2n bi\u1ec7t gi\u1eefa c\u00e1c thi\u1ebft b\u1ecb v\u1edbi nhau. Major v\u00e0 Minor t\u1ea1o th\u00e0nh m\u1ed9t c\u1eb7p s\u1ed1 unsigned \u0111\u1ec3 \u0111\u1eb7c tr\u01b0ng cho m\u1ed9t device, g\u1ecdi l\u00e0 Device Number. Kernel s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u dev_t \u0111\u1ec3 m\u00f4 t\u1ea3 hai tham s\u1ed1 n\u00e0y. Dev_t \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong header linux/types d\u01b0\u1edbi d\u1ea1ng m\u1ed9t s\u1ed1 32 bit. typedef __u32 __kernel_dev_t; typedef __kernel_dev_t dev_t; Trong \u0111\u00f3, 20 bit th\u1ea5p \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho Minor v\u00e0 c\u00e1c bit cao c\u00f2n l\u1ea1i \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho Major. C\u00e1c macro s\u1eed d\u1ee5ng cho dev_t nh\u01b0 MKDEV, MAJOR, MINOR \u0111\u01b0\u1ee3c khai b\u00e1o trong linux/k_dev_t.h . C\u00f3 th\u1ec3 t\u1ea1o m\u1ed9t Device File \u0111\u01a1n gi\u1ea3n b\u1eb1ng Command: mknod /dev/coffee c 12 2 . Khai b\u00e1o m\u1ed9t Character Device File C\u1ea5p ph\u00e1t Device Number H\u00e0m register_chrdev_region() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u0103ng k\u00fd device number. int register_chrdev_region(dev_t from, unsigned count, const char *name); Qu\u00e1 tr\u00ecnh n\u00e0y l\u00e0 c\u1ea5p ph\u00e1t t\u0129nh dev_t, trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p y\u00eau c\u1ea7u c\u1ea5p ph\u00e1t n\u00e0y kh\u00f4ng th\u00e0nh c\u00f4ng do y\u00eau c\u1ea7u c\u1ee7a driver kh\u00f4ng ph\u00f9 h\u1ee3p v\u1edbi y\u00eau c\u1ea7u hi\u1ec7n t\u1ea1i c\u1ee7a h\u1ec7 th\u1ed1ng. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng h\u00e0m alloc_chrdev_region() . Nguy\u00ean m\u1eabu c\u1ee7a h\u00e0m \u0111\u00f3 nh\u01b0 sau: int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,*const char *name); K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh c\u1ea5p ph\u00e1t device number l\u00e0 Major v\u00e0 m\u1ed9t d\u1ea3i Minor m\u00e0 driver c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng. \u0110\u0103ng k\u00fd Character Device File Kernel s\u1eed d\u1ee5ng m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u0111\u1ec3 l\u01b0u gi\u1eef th\u00f4ng tin c\u1ee7a m\u1ed9t character device: struct cdev. Struct cdev \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/cdev.h bao g\u1ed3m c\u00e1c tr\u01b0\u1eddng th\u00f4ng tin \u1edf b\u1ea3ng sau. structcdev{ struct kobject kobj; struct module *owner; const struct file_operations *ops; struct list_head list; dev_t dev; unsigned int count; } __randomize_layout; M\u1ed7i char device t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed9t device number dev_t v\u00e0 c\u00f3 c\u00e1c file_operations t\u01b0\u1edbng \u1ee9ng. C\u00e1c file_operations (\u0111\u1ecbnh ngh\u0129a trong linux/fs.h ) \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong b\u1ea3ng sau. struct file_operations { ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); int (*mmap) (struct file *, struct vm_area_struct *); long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long); [some feilds obmitted] } __randomize_layout; cdev_init cdev_add Tr\u01b0\u1edbc khi kh\u1edfi t\u1ea1o v\u00e0 \u0111\u0103ng k\u00fd m\u1ed9t cdev v\u1edbi kernel, m\u1ed9t v\u00f9ng nh\u1edb s\u1eed d\u1ee5ng cho bi\u1ebfn cdev n\u00e0y ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o. Ph\u01b0\u01a1ng ph\u00e1p \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 khai b\u00e1o m\u1ed9t bi\u1ebfn to\u00e0n c\u1ee5c trong driver. Qu\u00e1 tr\u00ecnh cdev_init b\u1ea3n ch\u1ea5t l\u00e0 trang b\u1ecb file_openratons cho cdev v\u00e0 th\u00eam n\u00f3 v\u00e0o danh s\u00e1ch c\u00e1c thi\u1ebft b\u1ecb \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o trong h\u1ec7 th\u1ed1ng. H\u00e0m cdev_add ti\u1ebfn h\u00e0nh th\u00eam cdev v\u00e0o h\u1ec7 th\u1ed1ng. L\u01b0u \u00fd nguy\u00ean m\u1eabu h\u00e0m cdev_add nh\u01b0 sau: int cdev_add(struct cdev *p, dev_t dev, unsigned count); Trong \u0111\u00f3 con tr\u1ecf p \u0111\u01b0\u1ee3c tr\u1ecf \u0111\u1ebfn bi\u1ebfn cdev \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o, v\u00e0 dev_t dev l\u00e0 device number \u0111\u1ea7u ti\u00ean trong d\u00e3y c\u00e1c device number li\u00ean quan \u0111\u1ebfn cdev n\u00e0y, count l\u00e0 s\u1ed1 l\u01b0\u1ee3ng c\u00e1c minor number li\u00ean ti\u1ebfp sau MINOR(dev_t dev) li\u00ean quan \u0111\u1ebfn device n\u00e0y. Gi\u1ea3 s\u1eed ta ti\u1ebfn h\u00e0nh th\u00eam m\u1ed9t cdev nh\u01b0 sau: struct cdev mycdev; dev_t mydevno = MKDEV(246, 0); cdev_add(mycdev, mydevno, 4); V\u00e0 sau \u0111\u00f3 kh\u1edfi t\u1ea1o th\u00eam 4 files. mknod /dev/scull0 c 246 0 mknod /dev/scull1 c 246 1 mknod /dev/scull2 c 246 2 mknod /dev/scull3 c 246 3 Khi ti\u1ebfn h\u00e0nh \u0111\u1ecdc ghi c\u00e1c /dev/file n\u00e0y \u0111\u1ec3u tr\u1ea3 v\u1ec1 m\u1ed9t dev_t duy nh\u1ea5t 246, 0 . Mutex http://derekmolloy.ie/writing-a-linux-kernel-module-part-2-a-character-device/ MMAP https://nhauyeneducation.blogspot.com/2018/11/hieu-ve-to-chuc-bo-nho-linux-thong-qua.html?fbclid=IwAR2w4W3yttmtqbZYqcwzTQ95Qvs92ZXDdBXns9kgO7IeokpVvoc8OY3IVLo https://linux-kernel-labs.github.io/master/labs/memory_mapping.html IOCTL https://ufal.mff.cuni.cz/~jernej/2018/docs/predavanja06.pdf Ioctl - Input Output Control \u0111\u01b0\u1ee3c sinh ra \u0111\u1ec3 h\u1ed7 tr\u1ee3 ng\u01b0\u1eddi d\u00f9ng khai b\u00e1o th\u00eam c\u00e1c c\u00e2u l\u1ec7nh m\u1edbi ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng d\u00f2ng thi\u1ebft b\u1ecb. Trong v\u00ed d\u1ee5 li\u00ean quan \u0111\u1ebfn b\u00e0i \u0111\u00e0o t\u1ea1o, led_controller_core c\u00f3 hai tham s\u1ed1 c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u01b0\u1ee3c trong qu\u00e1 tr\u00ecnh ch\u1ea1y: SPEED: T\u1ed1c \u0111\u1ed9 LED. POSITION: V\u1ecb tr\u00ed LED nh\u00e1y. - M\u1ee5c ti\u00eau c\u1ea7n ph\u1ea3i \u0111\u1ecbnh ngh\u0129a \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 c\u00e2u l\u1ec7nh \u0111\u1ec3 l\u00e0m v\u00ed d\u1ee5 trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n. Giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng Platform Device Giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng trong m\u1ed9t h\u1ec7 nh\u00fang r\u1ea5t \u0111a d\u1ea1ng. Ph\u01b0\u01a1ng ph\u00e1p giao ti\u1ebfp v\u1edbi ph\u1ea7n t\u1eed trong h\u1ec7 nh\u00fang ph\u1ee5 thu\u1ed9c v\u00e0o lo\u1ea1i thi\u1ebft b\u1ecb c\u1ee7a ph\u1ea7n t\u1eed \u0111\u00f3. Trong ph\u1ea1m vi b\u00e0i vi\u1ebft n\u00e0y s\u1ebd t\u01b0\u01a1ng t\u00e1c v\u1edbi m\u1ed9t lo\u1ea1i thi\u1ebft b\u1ecb: platform_device. struct resource platform_get_resource th\u1ef1c hi\u1ec7n t\u00ecm ki\u1ebfm t\u1ea5t c\u1ea3 c\u00e1c resource hi\u1ec7n t\u1ea1i c\u00f3 trong platform_device. Qu\u00e1 tr\u00ecnh t\u00ecm ki\u1ebfm d\u1ef1a v\u00e0o lo\u1ea1i resource \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/ioport.h. C\u00e1c lo\u1ea1i resource c\u01a1 b\u1ea3n nh\u01b0: IORESOURCE_MEM (memory) IORESOURCE_IRQ (interupt)","title":"Overview"},{"location":"linux_device_driver/overview/#overview-about-linux-device-driver","text":"T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 c\u00e1c kh\u00e1i ni\u1ec7m chung v\u1ec1 Linux Device Driver. C\u1ea7n c\u00f3 c\u00e1c b\u00e0i t\u00ecm hi\u1ec3u chuy\u00ean s\u00e2u v\u1ec1 c\u00e1c m\u1ee5c trong ph\u1ea7n n\u00e0y. Original note","title":"Overview about Linux Device Driver"},{"location":"linux_device_driver/overview/#linux-system-overview","text":"","title":"Linux System Overview"},{"location":"linux_device_driver/overview/#linux-device-model","text":"C\u00e1c thi\u1ebft b\u1ecb k\u1ebft n\u1ed1i \u0111\u1ebfn CPU \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Device . M\u1ed7i device n\u00e0y cung c\u1ea5p c\u00e1c t\u00e0i nguy\u00ean kh\u00e1c nhau \u0111\u1ebfn ng\u01b0\u1eddi d\u00f9ng, Linux kernel th\u00f4ng qua device driver \u0111\u1ec3 giao ti\u1ebfp \u0111\u1ebfn device v\u00e0 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean c\u1ee7a device \u0111\u00f3. C\u00e1c device k\u1ebft n\u1ed1i \u0111\u1ebfn CPU b\u1eb1ng m\u1ed9t bus. N\u00f3 c\u00f3 th\u1ec3 l\u00e0 c\u00e1c bus giao ti\u1ebfp v\u1edbi thi\u1ebft b\u1ecb ngo\u1ea1i vi nh\u01b0 SPI, I2C, ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 l\u00e0 system bus c\u1ee7a h\u1ec7 th\u1ed1ng. L\u01b0u \u00fd r\u1eb1ng Linux Kernel c\u0169ng nh\u00ecn bus gi\u1ed1ng nh\u01b0 m\u1ed9t device v\u00e0 t\u1ea5t nhi\u00ean device th\u00ec c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o. Do \u0111\u00f3 Linux Kernel c\u0169ng cung c\u1ea5p c\u00e1c quy tr\u00ecnh \u0111\u1ec3 \u0111\u0103ng k\u00fd m\u1ed9t bus v\u1edbi h\u1ec7 th\u1ed1ng. Trong qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng, d\u1ef1a v\u00e0o th\u00f4ng tin m\u00e0 device-tree cung c\u1ea5p v\u1ec1 c\u00e1c device trong h\u1ec7 th\u1ed1ng, Linux Kernel g\u1ecdi \u0111\u1ebfn c\u00e1c device driver t\u01b0\u01a1ng \u1ee9ng \u0111\u1ec3 d\u00f2 t\u00ecm v\u00e0 th\u00eam thi\u1ebft b\u1ecb v\u00e0o h\u1ec7 th\u1ed1ng. Platform device l\u00e0 c\u00e1c device \u0111\u1ea7u ti\u00ean \u0111\u01b0\u1ee3c d\u00f2 t\u00ecm v\u00e0 th\u00eam v\u00e0o h\u1ec7 th\u1ed1ng. \u0110\u01a1n gi\u1ea3n c\u00f3 th\u1ec3 hi\u1ec3u c\u00e1c platform device l\u00e0 c\u00e1c thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd tr\u1ef1c ti\u1ebfp trong v\u00f9ng nh\u1edb c\u1ee7a CPU, l\u00e0 c\u00e1c th\u1ef1c th\u1ec3 \u0111\u01b0\u1ee3c n\u1ed1i v\u1edbi system bus c\u1ee7a CPU. System bus n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 platform bus. Figure. An example about device model","title":"Linux Device Model"},{"location":"linux_device_driver/overview/#kernel-module","text":"","title":"Kernel Module"},{"location":"linux_device_driver/overview/#inh-nghia","text":"Kernel Module l\u00e0 m\u1ed9t \u0111o\u1ea1n m\u00e3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t ho\u1eb7c g\u1ee1 c\u00e0i \u0111\u1eb7t kh\u1ecfi Kernel theo y\u00eau c\u1ea7u. Kernel module gi\u00fap m\u1edf r\u1ed9ng ch\u1ee9c n\u0103ng cho kernel m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i kh\u1edfi \u0111\u1ed9ng l\u1ea1i h\u1ec7 th\u1ed1ng. Device Driver l\u00e0 m\u1ed9t lo\u1ea1i kernel module. Trong tr\u01b0\u1eddng h\u1ee3p c\u1ea7n th\u00eam m\u1ed9t ch\u1ee9c n\u0103ng v\u00e0o kernel trong khi kh\u00f4ng c\u00f3 kernel module, ng\u01b0\u1eddi ph\u00e1t tri\u1ec3n s\u1ebd c\u1ea7n ph\u1ea3i build l\u1ea1i c\u1ea3 h\u1ec7 th\u1ed1ng. M\u1ed9t blog vi\u1ebft v\u1ec1 Kernel Module t\u01b0\u01a1ng \u0111\u1ed1i hay v\u00e0 chi ti\u1ebft c\u00f3 th\u1ec3 xem th\u00eam t\u1ea1i \u0111\u00e2y . Blog \u0111\u01b0\u1ee3c vi\u1ebft b\u1edfi Derek Molloy. Kernel Module c\u0169ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a t\u1ea1i m\u1ed9t b\u00e0i vi\u1ebft c\u1ee7a ArchLinux (m\u1ed9t Linux Distro) t\u1ea1i \u0111\u00e2y . Ngo\u00e0i ra, tai trang web tldp.org c\u00f3 m\u1ed9t chu\u1ed7i c\u00e1c b\u00e0i vi\u1ebft li\u00ean quan \u0111\u1ebfn ph\u00e1t tri\u1ec3n Kernel module ( The Linux Kernel Module Programming Guide ). C\u00f3 hai d\u1ea1ng Kernel module: build-in v\u00e0 loadable file. Trong \u0111\u00f3 built-in module \u0111\u01b0\u1ee3c t\u00edch h\u1ee3p v\u00e0o Kernel Image v\u00e0 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng trong qu\u00e1 tr\u00ecnh kh\u1edfi \u0111\u1ed9ng kernel. Ng\u01b0\u1eddi l\u1ea1i, loadable module c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng sau khi kernel \u0111\u00e3 kh\u1edfi \u0111\u1ed9ng th\u00e0nh c\u00f4ng. Loadable Kernel Module (LKM) \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng b\u1eb1ng c\u00e1c c\u00e2u l\u1ec7nh nh\u01b0 modprobe ho\u1eb7c insmod.","title":"\u0110\u1ecbnh ngh\u0129a"},{"location":"linux_device_driver/overview/#module_init-module_exit","text":"Kernel module c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh ch\u1ea1y trong Kernel Space, nh\u01b0ng kh\u00f4ng gi\u1ed1ng nh\u01b0 ch\u01b0\u01a1ng tr\u00ecnh b\u00ecnh th\u01b0\u1eddng, kernel module kh\u00f4ng b\u1eaft \u0111\u1ea7u b\u1eb1ng h\u00e0m \"main\". Macro module_init() v\u00e0 module_exit() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u0103ng k\u00fd c\u00e1c h\u00e0m kh\u1edfi t\u1ea1o v\u00e0 h\u00e0m h\u1ee7y cho kernel module. T\u00f9y thu\u1ed9c v\u00e0o kernel module l\u00e0 built-in hay LKM m\u00e0 n\u1ed9i d\u1ee5ng c\u1ee7a module_init/exit s\u1ebd kh\u00e1c nhau. Trong tr\u01b0\u1eddng h\u1ee3p l\u00e0 built-in module, module_init s\u1ebd g\u1ecdi \u0111\u1ebfn macro _init_call d\u00f9ng \u0111\u1ec3 \u0111\u0103ng k\u00fd v\u1edbi h\u1ec7 th\u1ed1ng l\u00e0 module s\u1ebd \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o tr\u1ecdng qu\u00e1 tr\u00ecnh init. Hai macro \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/init.h.","title":"module_init &amp; module_exit"},{"location":"linux_device_driver/overview/#in-log-trong-kernel","text":"Ph\u01b0\u01a1ng ph\u00e1p debug c\u01a1 b\u1ea3n v\u00e0 ph\u1ed5 bi\u1ebfn nh\u1ea5t khi \u0111i ph\u00e1t tri\u1ec3n m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 in log ch\u1ea1y c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00f3 ra m\u00e0n h\u00ecnh ho\u1eb7c file. Kernel module s\u1eed d\u1ee5ng l\u1ec7nh prink thay v\u00ec printf nh\u01b0 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng User space. Ngo\u00e0i ra c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00eam c\u00e1c h\u1ecd h\u00e0m dev_ v\u00e0 pr_ \u0111\u1ec3 in th\u00eam th\u00f4ng tin trong kernel module.","title":"In log trong kernel"},{"location":"linux_device_driver/overview/#cai-at-lkm-module-vao-he-thong","text":"\u0110\u1ec3 c\u00e0i \u0111\u1eb7t LKM v\u00e0o h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng l\u1ec7nh insmod/rmmod/lsmod . Ngo\u00e0i ra c\u00f3 th\u1ec3 d\u00f9ng th\u00eam modprobe. Qu\u00e1 tr\u00ecnh s\u1eed d\u1ee5ng modprobe ph\u1ee9c t\u1ea1p h\u01a1n insmod, c\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam [t\u1ea1i \u0111\u00e2y] . Trong qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t module v\u00e0o h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 th\u00eam c\u00e1c paramtters cho module. \u0110\u1ec3 li\u1ec7t k\u00ea to\u00e0n b\u1ed9 th\u00f4ng tin c\u1ee7a c\u00e1c module \u0111ang \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t trong h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng lsmod. Lsmod \u0111\u1ecdc th\u00f4ng tin t\u1eeb /proc/modules, ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 \u0111\u1ecdc tr\u1ef1c ti\u1ebfp t\u1eeb text file /proc/modules \u0111\u1ec3 bi\u1ebft th\u00eam \u0111\u01b0\u1ee3c th\u00f4ng tin c\u1ee7a c\u00e1c module \u0111ang ch\u1ea1y trong h\u1ec7 th\u1ed1ng. Khi m\u1ed9t module \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o h\u1ec7 th\u1ed1ng, th\u00f4ng tin v\u1ec1 module n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y trong sysfs virtual file system /sys/module","title":"C\u00e0i \u0111\u1eb7t LKM module v\u00e0o h\u1ec7 th\u1ed1ng"},{"location":"linux_device_driver/overview/#compile-a-kernel-module","text":"\u0110\u1ec3 build m\u1ed9t kernel module, Linux Kernel s\u1eed d\u1ee5ng m\u1ed9t h\u1ec7 th\u1ed1ng g\u1ecdi l\u00e0 kbuild. C\u00f3 th\u1ec3 \u0111\u1ecdc th\u00eam th\u00f4ng tin v\u1ec1 h\u1ec7 th\u1ed1ng kbuild n\u00e0y trong Kernel Documentation ( kbuild/modules.txt ). Trong m\u1ee5c 2.2 c\u1ee7a [1] c\u00f3 gi\u1edbi thi\u1ec7u v\u1ec1 build kernel module.","title":"Compile a kernel module"},{"location":"linux_device_driver/overview/#character-device-driver","text":"Device Driver l\u00e0 m\u1ed9t kernel module, c\u00f3 ch\u1ee9c n\u0103ng giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng v\u00e0 cung c\u1ea5p c\u00e1c giao di\u1ec7n \u0111\u1ec3 c\u00e1c module kh\u00e1c c\u1ee7a kernel c\u0169ng nh\u01b0 user c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0 s\u1eed d\u1ee5ng c\u00e1c t\u00e0i nguy\u00ean li\u00ean quan \u0111\u1ebfn c\u00e1c ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng. T\u00f9y thu\u1ed9c v\u00e0o lo\u1ea1i ph\u1ea7n c\u1ee9ng t\u01b0\u01a1ng \u1ee9ng m\u00e0 device driver \u0111\u01b0\u1ee3c chia ra l\u00e0m c\u00e1c lo\u1ea1i kh\u00e1c nhau. Trong t\u00e0i li\u1ec7u LDD3, device driver \u0111\u01b0\u1ee3c chia ra l\u00e0m 3 lo\u1ea1i ch\u00ednh: char module, block module v\u00e0 network module. Trong \u0111\u00f3 character device s\u1ebd \u0111\u01b0\u1ee3c t\u1eadp trung nghi\u00ean c\u1ee9u trong t\u00e0i li\u1ec7u n\u00e0y. Nh\u01b0 v\u1eady, m\u1ed9t device driver n\u00f3i chung c\u1ea7n th\u1ef1c hi\u1ec7n hai nhi\u1ec7m v\u1ee5 ch\u00ednh: Cung c\u1ea5p c\u00e1c giao di\u1ec7n \u0111\u1ec3 c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi User Space, qua \u0111\u00f3 c\u00e1c \u1ee9ng d\u1ee5ng c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi ph\u1ea7n c\u1ee9ng th\u00f4ng qua c\u00e1c giao di\u1ec7n n\u00e0y. Truy c\u1eadp \u0111\u1ebfn ph\u1ea7n c\u1ee9ng. Device driver \u0111\u01b0\u1ee3c sinh ra l\u00e0 \u0111\u1ec3 giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng. Trong t\u00e0i li\u1ec7u n\u00e0y s\u1ebd t\u00ecm hi\u1ec3u t\u1eebng nhi\u1ec7m v\u1ee5 tr\u00ean c\u1ee7a Device Driver.","title":"Character Device Driver"},{"location":"linux_device_driver/overview/#device-file","text":"Device file hay special file l\u00e0 m\u1ed9t giao di\u1ec7n \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 giao ti\u1ebfp \u0111\u01b0\u1ee3c v\u1edbi device driver. Th\u00f4ng th\u01b0\u1eddng c\u00e1c device file xu\u1ea5t hi\u1ec7n trong /dev/ v\u00e0 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi virtual file system. Ng\u01b0\u1eddi d\u00f9ng th\u00f4ng qua c\u00e1c System Call \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi device driver th\u00f4ng qua device file. C\u00e1c System Call li\u00ean quan \u0111\u1ebfn t\u01b0\u01a1ng t\u00e1c file \u0111\u01b0\u1ee3c x\u1eed l\u00fd b\u1edfi h\u1ec7 th\u1ed1ng VFS (Virtual File System) nh\u01b0: open(), close(), read(), write(), mmpa()... Qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng c\u1ee7a c\u00e1c system call n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 r\u00f5 trong Chapter 12: The Virtual File System c\u1ee7a s\u00e1ch Understanding Linux Kernel. V\u1eady v\u1edbi m\u1ed9t normal file, c\u00e1c ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 t\u00e1c \u0111\u1ed9ng g\u00ec \u0111\u01b0\u1ee3c? Th\u00f4ng tin n\u00e0y c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u qua t\u1eeb kh\u00f3a \"Working with file in C\".","title":"Device File"},{"location":"linux_device_driver/overview/#major-minor","text":"M\u1ed7i Device File trong /dev/ \u0111\u01b0\u1ee3c \u0111\u1eb7c tr\u01b0ng b\u1edfi hai tham s\u1ed1: Major, Minor . Major \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh xem device \u0111\u00f3 t\u01b0\u01a1ng \u1ee9ng v\u1edbi driver n\u00e0o. Minor mang th\u00f4ng tin c\u1ee7a t\u1eebng thi\u1ebft b\u1ecb, v\u1ec1 c\u01a1 b\u1ea3n nhi\u1ec1u thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n b\u1eb1ng m\u1ed9t driver, do \u0111\u00f3 trong m\u1ed9t s\u1ed1 h\u1ec7 th\u1ed1ng, driver s\u1eed d\u1ee5ng Minor \u0111\u1ec3 ph\u00e2n bi\u1ec7t gi\u1eefa c\u00e1c thi\u1ebft b\u1ecb v\u1edbi nhau. Major v\u00e0 Minor t\u1ea1o th\u00e0nh m\u1ed9t c\u1eb7p s\u1ed1 unsigned \u0111\u1ec3 \u0111\u1eb7c tr\u01b0ng cho m\u1ed9t device, g\u1ecdi l\u00e0 Device Number. Kernel s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u dev_t \u0111\u1ec3 m\u00f4 t\u1ea3 hai tham s\u1ed1 n\u00e0y. Dev_t \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong header linux/types d\u01b0\u1edbi d\u1ea1ng m\u1ed9t s\u1ed1 32 bit. typedef __u32 __kernel_dev_t; typedef __kernel_dev_t dev_t; Trong \u0111\u00f3, 20 bit th\u1ea5p \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho Minor v\u00e0 c\u00e1c bit cao c\u00f2n l\u1ea1i \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho Major. C\u00e1c macro s\u1eed d\u1ee5ng cho dev_t nh\u01b0 MKDEV, MAJOR, MINOR \u0111\u01b0\u1ee3c khai b\u00e1o trong linux/k_dev_t.h . C\u00f3 th\u1ec3 t\u1ea1o m\u1ed9t Device File \u0111\u01a1n gi\u1ea3n b\u1eb1ng Command: mknod /dev/coffee c 12 2 .","title":"Major &amp; Minor"},{"location":"linux_device_driver/overview/#khai-bao-mot-character-device-file","text":"","title":"Khai b\u00e1o m\u1ed9t Character Device File"},{"location":"linux_device_driver/overview/#cap-phat-device-number","text":"H\u00e0m register_chrdev_region() \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u0103ng k\u00fd device number. int register_chrdev_region(dev_t from, unsigned count, const char *name); Qu\u00e1 tr\u00ecnh n\u00e0y l\u00e0 c\u1ea5p ph\u00e1t t\u0129nh dev_t, trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p y\u00eau c\u1ea7u c\u1ea5p ph\u00e1t n\u00e0y kh\u00f4ng th\u00e0nh c\u00f4ng do y\u00eau c\u1ea7u c\u1ee7a driver kh\u00f4ng ph\u00f9 h\u1ee3p v\u1edbi y\u00eau c\u1ea7u hi\u1ec7n t\u1ea1i c\u1ee7a h\u1ec7 th\u1ed1ng. Trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng h\u00e0m alloc_chrdev_region() . Nguy\u00ean m\u1eabu c\u1ee7a h\u00e0m \u0111\u00f3 nh\u01b0 sau: int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,*const char *name); K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh c\u1ea5p ph\u00e1t device number l\u00e0 Major v\u00e0 m\u1ed9t d\u1ea3i Minor m\u00e0 driver c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng.","title":"C\u1ea5p ph\u00e1t Device Number"},{"location":"linux_device_driver/overview/#ang-ky-character-device-file","text":"Kernel s\u1eed d\u1ee5ng m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u0111\u1ec3 l\u01b0u gi\u1eef th\u00f4ng tin c\u1ee7a m\u1ed9t character device: struct cdev. Struct cdev \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/cdev.h bao g\u1ed3m c\u00e1c tr\u01b0\u1eddng th\u00f4ng tin \u1edf b\u1ea3ng sau. structcdev{ struct kobject kobj; struct module *owner; const struct file_operations *ops; struct list_head list; dev_t dev; unsigned int count; } __randomize_layout; M\u1ed7i char device t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed9t device number dev_t v\u00e0 c\u00f3 c\u00e1c file_operations t\u01b0\u1edbng \u1ee9ng. C\u00e1c file_operations (\u0111\u1ecbnh ngh\u0129a trong linux/fs.h ) \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong b\u1ea3ng sau. struct file_operations { ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); int (*mmap) (struct file *, struct vm_area_struct *); long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long); [some feilds obmitted] } __randomize_layout;","title":"\u0110\u0103ng k\u00fd Character Device File"},{"location":"linux_device_driver/overview/#cdev_init-cdev_add","text":"Tr\u01b0\u1edbc khi kh\u1edfi t\u1ea1o v\u00e0 \u0111\u0103ng k\u00fd m\u1ed9t cdev v\u1edbi kernel, m\u1ed9t v\u00f9ng nh\u1edb s\u1eed d\u1ee5ng cho bi\u1ebfn cdev n\u00e0y ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o. Ph\u01b0\u01a1ng ph\u00e1p \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 khai b\u00e1o m\u1ed9t bi\u1ebfn to\u00e0n c\u1ee5c trong driver. Qu\u00e1 tr\u00ecnh cdev_init b\u1ea3n ch\u1ea5t l\u00e0 trang b\u1ecb file_openratons cho cdev v\u00e0 th\u00eam n\u00f3 v\u00e0o danh s\u00e1ch c\u00e1c thi\u1ebft b\u1ecb \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o trong h\u1ec7 th\u1ed1ng. H\u00e0m cdev_add ti\u1ebfn h\u00e0nh th\u00eam cdev v\u00e0o h\u1ec7 th\u1ed1ng. L\u01b0u \u00fd nguy\u00ean m\u1eabu h\u00e0m cdev_add nh\u01b0 sau: int cdev_add(struct cdev *p, dev_t dev, unsigned count); Trong \u0111\u00f3 con tr\u1ecf p \u0111\u01b0\u1ee3c tr\u1ecf \u0111\u1ebfn bi\u1ebfn cdev \u0111\u00e3 \u0111\u01b0\u1ee3c khai b\u00e1o, v\u00e0 dev_t dev l\u00e0 device number \u0111\u1ea7u ti\u00ean trong d\u00e3y c\u00e1c device number li\u00ean quan \u0111\u1ebfn cdev n\u00e0y, count l\u00e0 s\u1ed1 l\u01b0\u1ee3ng c\u00e1c minor number li\u00ean ti\u1ebfp sau MINOR(dev_t dev) li\u00ean quan \u0111\u1ebfn device n\u00e0y. Gi\u1ea3 s\u1eed ta ti\u1ebfn h\u00e0nh th\u00eam m\u1ed9t cdev nh\u01b0 sau: struct cdev mycdev; dev_t mydevno = MKDEV(246, 0); cdev_add(mycdev, mydevno, 4); V\u00e0 sau \u0111\u00f3 kh\u1edfi t\u1ea1o th\u00eam 4 files. mknod /dev/scull0 c 246 0 mknod /dev/scull1 c 246 1 mknod /dev/scull2 c 246 2 mknod /dev/scull3 c 246 3 Khi ti\u1ebfn h\u00e0nh \u0111\u1ecdc ghi c\u00e1c /dev/file n\u00e0y \u0111\u1ec3u tr\u1ea3 v\u1ec1 m\u1ed9t dev_t duy nh\u1ea5t 246, 0 .","title":"cdev_init &amp; cdev_add"},{"location":"linux_device_driver/overview/#mutex","text":"http://derekmolloy.ie/writing-a-linux-kernel-module-part-2-a-character-device/","title":"Mutex"},{"location":"linux_device_driver/overview/#mmap","text":"https://nhauyeneducation.blogspot.com/2018/11/hieu-ve-to-chuc-bo-nho-linux-thong-qua.html?fbclid=IwAR2w4W3yttmtqbZYqcwzTQ95Qvs92ZXDdBXns9kgO7IeokpVvoc8OY3IVLo https://linux-kernel-labs.github.io/master/labs/memory_mapping.html","title":"MMAP"},{"location":"linux_device_driver/overview/#ioctl","text":"https://ufal.mff.cuni.cz/~jernej/2018/docs/predavanja06.pdf Ioctl - Input Output Control \u0111\u01b0\u1ee3c sinh ra \u0111\u1ec3 h\u1ed7 tr\u1ee3 ng\u01b0\u1eddi d\u00f9ng khai b\u00e1o th\u00eam c\u00e1c c\u00e2u l\u1ec7nh m\u1edbi ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng d\u00f2ng thi\u1ebft b\u1ecb. Trong v\u00ed d\u1ee5 li\u00ean quan \u0111\u1ebfn b\u00e0i \u0111\u00e0o t\u1ea1o, led_controller_core c\u00f3 hai tham s\u1ed1 c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u01b0\u1ee3c trong qu\u00e1 tr\u00ecnh ch\u1ea1y: SPEED: T\u1ed1c \u0111\u1ed9 LED. POSITION: V\u1ecb tr\u00ed LED nh\u00e1y. - M\u1ee5c ti\u00eau c\u1ea7n ph\u1ea3i \u0111\u1ecbnh ngh\u0129a \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 c\u00e2u l\u1ec7nh \u0111\u1ec3 l\u00e0m v\u00ed d\u1ee5 trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n.","title":"IOCTL"},{"location":"linux_device_driver/overview/#giao-tiep-voi-phan-cung","text":"","title":"Giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng"},{"location":"linux_device_driver/overview/#platform-device","text":"Giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u1ee9ng trong m\u1ed9t h\u1ec7 nh\u00fang r\u1ea5t \u0111a d\u1ea1ng. Ph\u01b0\u01a1ng ph\u00e1p giao ti\u1ebfp v\u1edbi ph\u1ea7n t\u1eed trong h\u1ec7 nh\u00fang ph\u1ee5 thu\u1ed9c v\u00e0o lo\u1ea1i thi\u1ebft b\u1ecb c\u1ee7a ph\u1ea7n t\u1eed \u0111\u00f3. Trong ph\u1ea1m vi b\u00e0i vi\u1ebft n\u00e0y s\u1ebd t\u01b0\u01a1ng t\u00e1c v\u1edbi m\u1ed9t lo\u1ea1i thi\u1ebft b\u1ecb: platform_device.","title":"Platform Device"},{"location":"linux_device_driver/overview/#struct-resource","text":"platform_get_resource th\u1ef1c hi\u1ec7n t\u00ecm ki\u1ebfm t\u1ea5t c\u1ea3 c\u00e1c resource hi\u1ec7n t\u1ea1i c\u00f3 trong platform_device. Qu\u00e1 tr\u00ecnh t\u00ecm ki\u1ebfm d\u1ef1a v\u00e0o lo\u1ea1i resource \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong linux/ioport.h. C\u00e1c lo\u1ea1i resource c\u01a1 b\u1ea3n nh\u01b0: IORESOURCE_MEM (memory) IORESOURCE_IRQ (interupt)","title":"struct resource"},{"location":"linux_device_driver/platform_dev/platform_device/","text":"","title":"Platform Device"},{"location":"linux_device_driver/spi_dev/spi_dev/","text":"SPI Device Driver Refereneces Groking the Linux SPI Subsystem - Embedded Linux Conference 2017 spi/spi-summary - Linux Kernel Document ( link )","title":"SPI Device"},{"location":"linux_device_driver/spi_dev/spi_dev/#spi-device-driver","text":"","title":"SPI Device Driver"},{"location":"linux_device_driver/spi_dev/spi_dev/#refereneces","text":"Groking the Linux SPI Subsystem - Embedded Linux Conference 2017 spi/spi-summary - Linux Kernel Document ( link )","title":"Refereneces"},{"location":"projects/zc706/","text":"ZC706 This note is for zedboard","title":"ZC706"},{"location":"projects/zc706/#zc706","text":"This note is for zedboard","title":"ZC706"},{"location":"projects/zedboard/zedboard/","text":"Zedboard Boot from SD Card with ext4 filesystem Origin Note Chu\u1ea9n b\u1ecb images Trong t\u00e0i li\u1ec7u UG1144 c\u00f3 h\u01b0\u1edbng d\u1eabn qu\u00e1 tr\u00ecnh c\u1ea5u h\u00ecnh \u0111\u1ec3 c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng Zynq7000 t\u1eeb SD Card. Trong h\u01b0\u1edbng d\u1eabn n\u00e0y c\u1ea7n l\u01b0u \u00fd \u0111\u1ebfn 2 \u0111i\u1ec3m sau: Thi\u1ebft l\u1eadp petalinux project \u0111\u1ec3 c\u00e1c image \u0111\u01b0\u1ee3c package d\u01b0\u1edbi d\u1ea1ng c\u00f3 th\u1ec3 boot \u0111\u01b0\u1ee3c t\u1eeb SD Card. petalinux-config T\u1ea1o file rootfs.cpio b\u1eb1ng m\u00e3 l\u1ec7nh sau petalinux-package \\--image -c rootfs \\--format initramfs N\u1ebfu s\u1eed d\u1ee5ng l\u1ec7nh package \u0111\u1ec3 t\u1ea1o rootfs.cpio xu\u1ea5t hi\u1ec7n l\u1ed7i sau: [INFO ] package rootfs.cpio to /tmp/petalinux/images/linux\\ ERROR: Linux kernel gen_init_cpio /tmp/petalinux/build/linux/kernel/usr/gen_init_cpio doesn\\'t exits! Please build Linux kernel first!\\ make[1]: *** [package-rootfs-cpio] Fehler 255\\ make: *** [package-rootfs-initramfs] Fehler 2\\ ERROR: Failed to package component linux/rootfs *** Need to use extention to emphasize error notes, see in Mkdocs Tool Trong di\u1ec5n \u0111\u00e0n c\u1ee7a Xilinx ( link ) c\u00f3 th\u1ea3o lu\u1eadn v\u1ec1 ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 kh\u1eafc ph\u1ee5c \u0111\u01b0\u1ee3c l\u1ed7i tr\u00ean. Bao g\u1ed3m c\u00e1c b\u01b0\u1edbc x\u1eed l\u00fd nh\u01b0 sau: T\u1eaft ch\u1ebf \u0111\u1ed9 automatic kernel configuration petalinux-config\\ Image Packaging Configuration ---> Root filesystem type = SD card\\ Auto Config Settings ---> [ ] kernel autoconfig B\u1eadt ch\u1ebf \u0111\u1ed9 h\u1ed7 tr\u1ecd INITRAMFS trong c\u1ea5u h\u00ecnh c\u1ee7a kernel $ petalinux-config -c kernel General setup - [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support () Initramfs source file(s) Chu\u1ea9n b\u1ecb SD Card C\u1ea7n chu\u1ea9n b\u1ecb SD Card v\u1edbi 02 ph\u00e2n v\u00f9ng: BOOT: \u0111\u01b0\u1ee3c format \u1edf \u0111\u1ecbnh d\u1ea1ng FAT32 ch\u1ee9a BOOT.BIN (bao g\u1ed3m FBSL, PL Bitstream, U-boot) v\u00e0 image.ub (Linux kernel v\u00e0 Device Tree). rootfs: \u0111\u01b0\u1ee3c format \u1edf \u0111\u1ecbnh d\u1ea1ng ext4 ch\u1ee9a root filesystem. Qu\u00e1 tr\u00ecnh chu\u1ea9n b\u1ecb ph\u00e2n v\u00f9ng tr\u00ean SD Card n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c ti\u1ebfn h\u00e0nh \u0111\u01a1n gi\u1ea3n b\u1eb1ng c\u00e1c GUI Tool nh\u01b0 GParted . Ngo\u00e0i ra c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1ed5 h\u1ee3p CLI tool: fdisk mkfs.vfat mkfs.ext4. Ph\u01b0\u01a1ng ph\u00e1p s\u1eed d\u1ee5ng b\u1ed9 c\u00f4ng c\u1ee5 n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 chi ti\u1ebft trong Wikipedia c\u1ee7a Xilinx. K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh ph\u00e2n v\u00f9ng v\u00e0 format n\u00e0y nh\u01b0 sau: Figure. SD Card Partitions C\u00e0i \u0111\u1eb7t boot image v\u00e0 rootfs l\u00ean SD Card K\u1ebft qu\u1ea3 sau khi th\u1ef1c hi\u1ec7n xong c\u00e1c b\u01b0\u1edbc chu\u1ea9n b\u1ecb li\u00ean quan \u0111\u1ebfn images v\u00e0 SD Card: C\u00e1c file images: BOOT.BIN, image.ub v\u00e0 rootfs.cpio SD Card v\u1edbi hai ph\u00e2n v\u00f9ng: BOOT v\u00e0 rootfs. C\u00e1c images v\u00e0 filesystem ph\u1ea3i \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t l\u00ean SD Card tr\u01b0\u1edbc khi board c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng \u0111\u01b0\u1ee3c t\u1eeb SD Card. Qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t bootloader v\u00e0 Linux kernel l\u00e0 qu\u00e1 tr\u00ecnh copy BOOT.BIN v\u00e0 image.ub l\u00ean ph\u00e2n v\u00f9ng BOOT c\u1ee7a sdcard. BootROM c\u1ee7a zynq \u0111\u1ee7 m\u1ea1nh \u0111\u1ec3 c\u00f3 th\u1ec3 t\u00ecm ki\u1ebfm \u0111\u01b0\u1ee3c zynq_fsbl.elf tr\u00ean ph\u00e2n v\u00f9ng \u0111\u1ecbnh d\u1ea1ng FAT32 \u0111\u1ec3 kh\u1edfi \u0111\u1ed9ng. Ri\u00eang rootfs \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i \u1edf file rootfs.cpio. S\u1eed d\u1ee5ng \u1ee9ng d\u1ee5ng pax \u0111\u1ec3 th\u00e1o d\u1ee1 filesystem \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i \u1edf \u0111\u1ecbnh d\u1ea1ng cpio. cp images/linux/rootfs.cpio /media/rootfs/ cd /media/rootfs sudo pax -rvf rootfs.cpio Ph\u00e2n t\u00edch v\u00e0 k\u1ebft lu\u1eadn Trong qu\u00e1 tr\u00ecnh chu\u1ea9n b\u1ecb SD Card xu\u1ea5t hi\u1ec7n c\u00e1c thu\u1eadt ng\u1eef. Trong m\u1ee5c n\u00e0y s\u1ebd \u0111i ph\u00e2n t\u00edch v\u00e0 gi\u1ea3i th\u00edch c\u00e1c thu\u1eadt ng\u1eef \u0111\u00f3. CPIO Trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh Linux xu\u1ea5t hi\u1ec7n kh\u00e1i ni\u1ec7m archive (/\u02c8\u0251\u02d0ka\u026av/) file , l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i nhi\u1ec1u file d\u1eef li\u1ec7u th\u00e0nh m\u1ed9t file th\u1ed1ng nh\u1ea5t (kh\u00f4ng c\u00f3 qu\u00e1 tr\u00ecnh n\u00e9n d\u1eef li\u1ec7u). M\u1ee5c \u0111\u00edch c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i n\u00e0y l\u00e0 d\u1ec5 d\u00e0ng cho qu\u00e1 tr\u00ecnh l\u01b0u tr\u1eef c\u0169ng nh\u01b0 trao \u0111\u1ed5i d\u1eef li\u1ec7u. Archive file c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m \u0111\u1ea7u v\u00e0o cho c\u00e1c tr\u00ecnh n\u00e9n d\u1eef li\u1ec7u. Archive file \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i b\u1eb1ng c\u00e1c file archiver. Trong Unix-like system, c\u00e1c file archiver ph\u1ed5 bi\u1ebfn nh\u01b0: tar, ar, cpio. Rootfs k\u1ebft qu\u1ea3 c\u1ee7a b\u01b0\u1edbc 1 \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i d\u01b0\u1edbi d\u1ea1ng archive file - cpio. Qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t rootfs l\u00ean ph\u00e2n v\u00f9ng rootfs tr\u00ean SD Card b\u1ea3n ch\u1ea5t l\u00e0 qu\u00e1 tr\u00ecnh th\u00e1o d\u1ee1 c\u00e1c archive file tr\u1edf v\u1ec1 c\u00e1c file ph\u00e2n bi\u1ec7t ban \u0111\u1ea7u. Qu\u00e1 tr\u00ecnh extract n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1edfi c\u00e1c Linux tool nh\u01b0: cpio ho\u1eb7c pax. Trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx s\u1eed d\u1ee5ng pax \u0111\u1ec3 th\u00e1o d\u1ee1 rootfs. File system format: fat32 v\u00e0 ext4. File system l\u00e0 c\u00e1ch m\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng file \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c tr\u00ean c\u00e1c b\u1ed9 nh\u1edb l\u01b0u tr\u1eef. C\u00e1c b\u1ed9 nh\u1edb l\u01b0u tr\u1eef c\u00f3 th\u1ec3 l\u00e0: disk file system ho\u1eb7c flash file system . Fat32 v\u00e0 ext4 l\u00e0 t\u00ean c\u1ee7a c\u00e1c d\u1ea1ng file system \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c ph\u1ed5 bi\u1ebfn tr\u00ean c\u00e1c d\u00f2ng disk file system nh\u01b0 SD Card trong b\u00e0i vi\u1ebft n\u00e0y l\u00e0 m\u1ed9t v\u00ed d\u1ee5. Ngo\u00e0i ra trong qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c v\u1edbi Rootfs c\u1ee7a zynq c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ebfn JFFS2 format l\u00e0 m\u1ed9t \u0111\u1ecbnh d\u1ea1ng file system s\u1eed d\u1ee5ng cho c\u00e1c b\u1ed9 nh\u1edb flash.","title":"Zedboard"},{"location":"projects/zedboard/zedboard/#zedboard","text":"","title":"Zedboard"},{"location":"projects/zedboard/zedboard/#boot-from-sd-card-with-ext4-filesystem","text":"Origin Note Chu\u1ea9n b\u1ecb images Trong t\u00e0i li\u1ec7u UG1144 c\u00f3 h\u01b0\u1edbng d\u1eabn qu\u00e1 tr\u00ecnh c\u1ea5u h\u00ecnh \u0111\u1ec3 c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng Zynq7000 t\u1eeb SD Card. Trong h\u01b0\u1edbng d\u1eabn n\u00e0y c\u1ea7n l\u01b0u \u00fd \u0111\u1ebfn 2 \u0111i\u1ec3m sau: Thi\u1ebft l\u1eadp petalinux project \u0111\u1ec3 c\u00e1c image \u0111\u01b0\u1ee3c package d\u01b0\u1edbi d\u1ea1ng c\u00f3 th\u1ec3 boot \u0111\u01b0\u1ee3c t\u1eeb SD Card. petalinux-config T\u1ea1o file rootfs.cpio b\u1eb1ng m\u00e3 l\u1ec7nh sau petalinux-package \\--image -c rootfs \\--format initramfs N\u1ebfu s\u1eed d\u1ee5ng l\u1ec7nh package \u0111\u1ec3 t\u1ea1o rootfs.cpio xu\u1ea5t hi\u1ec7n l\u1ed7i sau: [INFO ] package rootfs.cpio to /tmp/petalinux/images/linux\\ ERROR: Linux kernel gen_init_cpio /tmp/petalinux/build/linux/kernel/usr/gen_init_cpio doesn\\'t exits! Please build Linux kernel first!\\ make[1]: *** [package-rootfs-cpio] Fehler 255\\ make: *** [package-rootfs-initramfs] Fehler 2\\ ERROR: Failed to package component linux/rootfs *** Need to use extention to emphasize error notes, see in Mkdocs Tool Trong di\u1ec5n \u0111\u00e0n c\u1ee7a Xilinx ( link ) c\u00f3 th\u1ea3o lu\u1eadn v\u1ec1 ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 kh\u1eafc ph\u1ee5c \u0111\u01b0\u1ee3c l\u1ed7i tr\u00ean. Bao g\u1ed3m c\u00e1c b\u01b0\u1edbc x\u1eed l\u00fd nh\u01b0 sau: T\u1eaft ch\u1ebf \u0111\u1ed9 automatic kernel configuration petalinux-config\\ Image Packaging Configuration ---> Root filesystem type = SD card\\ Auto Config Settings ---> [ ] kernel autoconfig B\u1eadt ch\u1ebf \u0111\u1ed9 h\u1ed7 tr\u1ecd INITRAMFS trong c\u1ea5u h\u00ecnh c\u1ee7a kernel $ petalinux-config -c kernel General setup - [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support () Initramfs source file(s)","title":"Boot from SD Card with ext4 filesystem"},{"location":"projects/zedboard/zedboard/#chuan-bi-sd-card","text":"C\u1ea7n chu\u1ea9n b\u1ecb SD Card v\u1edbi 02 ph\u00e2n v\u00f9ng: BOOT: \u0111\u01b0\u1ee3c format \u1edf \u0111\u1ecbnh d\u1ea1ng FAT32 ch\u1ee9a BOOT.BIN (bao g\u1ed3m FBSL, PL Bitstream, U-boot) v\u00e0 image.ub (Linux kernel v\u00e0 Device Tree). rootfs: \u0111\u01b0\u1ee3c format \u1edf \u0111\u1ecbnh d\u1ea1ng ext4 ch\u1ee9a root filesystem. Qu\u00e1 tr\u00ecnh chu\u1ea9n b\u1ecb ph\u00e2n v\u00f9ng tr\u00ean SD Card n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c ti\u1ebfn h\u00e0nh \u0111\u01a1n gi\u1ea3n b\u1eb1ng c\u00e1c GUI Tool nh\u01b0 GParted . Ngo\u00e0i ra c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng t\u1ed5 h\u1ee3p CLI tool: fdisk mkfs.vfat mkfs.ext4. Ph\u01b0\u01a1ng ph\u00e1p s\u1eed d\u1ee5ng b\u1ed9 c\u00f4ng c\u1ee5 n\u00e0y \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 chi ti\u1ebft trong Wikipedia c\u1ee7a Xilinx. K\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh ph\u00e2n v\u00f9ng v\u00e0 format n\u00e0y nh\u01b0 sau: Figure. SD Card Partitions","title":"Chu\u1ea9n b\u1ecb SD Card"},{"location":"projects/zedboard/zedboard/#cai-at-boot-image-va-rootfs-len-sd-card","text":"K\u1ebft qu\u1ea3 sau khi th\u1ef1c hi\u1ec7n xong c\u00e1c b\u01b0\u1edbc chu\u1ea9n b\u1ecb li\u00ean quan \u0111\u1ebfn images v\u00e0 SD Card: C\u00e1c file images: BOOT.BIN, image.ub v\u00e0 rootfs.cpio SD Card v\u1edbi hai ph\u00e2n v\u00f9ng: BOOT v\u00e0 rootfs. C\u00e1c images v\u00e0 filesystem ph\u1ea3i \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t l\u00ean SD Card tr\u01b0\u1edbc khi board c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng \u0111\u01b0\u1ee3c t\u1eeb SD Card. Qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t bootloader v\u00e0 Linux kernel l\u00e0 qu\u00e1 tr\u00ecnh copy BOOT.BIN v\u00e0 image.ub l\u00ean ph\u00e2n v\u00f9ng BOOT c\u1ee7a sdcard. BootROM c\u1ee7a zynq \u0111\u1ee7 m\u1ea1nh \u0111\u1ec3 c\u00f3 th\u1ec3 t\u00ecm ki\u1ebfm \u0111\u01b0\u1ee3c zynq_fsbl.elf tr\u00ean ph\u00e2n v\u00f9ng \u0111\u1ecbnh d\u1ea1ng FAT32 \u0111\u1ec3 kh\u1edfi \u0111\u1ed9ng. Ri\u00eang rootfs \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i \u1edf file rootfs.cpio. S\u1eed d\u1ee5ng \u1ee9ng d\u1ee5ng pax \u0111\u1ec3 th\u00e1o d\u1ee1 filesystem \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i \u1edf \u0111\u1ecbnh d\u1ea1ng cpio. cp images/linux/rootfs.cpio /media/rootfs/ cd /media/rootfs sudo pax -rvf rootfs.cpio","title":"C\u00e0i \u0111\u1eb7t boot image v\u00e0 rootfs l\u00ean SD Card"},{"location":"projects/zedboard/zedboard/#phan-tich-va-ket-luan","text":"Trong qu\u00e1 tr\u00ecnh chu\u1ea9n b\u1ecb SD Card xu\u1ea5t hi\u1ec7n c\u00e1c thu\u1eadt ng\u1eef. Trong m\u1ee5c n\u00e0y s\u1ebd \u0111i ph\u00e2n t\u00edch v\u00e0 gi\u1ea3i th\u00edch c\u00e1c thu\u1eadt ng\u1eef \u0111\u00f3.","title":"Ph\u00e2n t\u00edch v\u00e0 k\u1ebft lu\u1eadn"},{"location":"projects/zedboard/zedboard/#cpio","text":"Trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh Linux xu\u1ea5t hi\u1ec7n kh\u00e1i ni\u1ec7m archive (/\u02c8\u0251\u02d0ka\u026av/) file , l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i nhi\u1ec1u file d\u1eef li\u1ec7u th\u00e0nh m\u1ed9t file th\u1ed1ng nh\u1ea5t (kh\u00f4ng c\u00f3 qu\u00e1 tr\u00ecnh n\u00e9n d\u1eef li\u1ec7u). M\u1ee5c \u0111\u00edch c\u1ee7a qu\u00e1 tr\u00ecnh \u0111\u00f3ng g\u00f3i n\u00e0y l\u00e0 d\u1ec5 d\u00e0ng cho qu\u00e1 tr\u00ecnh l\u01b0u tr\u1eef c\u0169ng nh\u01b0 trao \u0111\u1ed5i d\u1eef li\u1ec7u. Archive file c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m \u0111\u1ea7u v\u00e0o cho c\u00e1c tr\u00ecnh n\u00e9n d\u1eef li\u1ec7u. Archive file \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i b\u1eb1ng c\u00e1c file archiver. Trong Unix-like system, c\u00e1c file archiver ph\u1ed5 bi\u1ebfn nh\u01b0: tar, ar, cpio. Rootfs k\u1ebft qu\u1ea3 c\u1ee7a b\u01b0\u1edbc 1 \u0111ang \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i d\u01b0\u1edbi d\u1ea1ng archive file - cpio. Qu\u00e1 tr\u00ecnh c\u00e0i \u0111\u1eb7t rootfs l\u00ean ph\u00e2n v\u00f9ng rootfs tr\u00ean SD Card b\u1ea3n ch\u1ea5t l\u00e0 qu\u00e1 tr\u00ecnh th\u00e1o d\u1ee1 c\u00e1c archive file tr\u1edf v\u1ec1 c\u00e1c file ph\u00e2n bi\u1ec7t ban \u0111\u1ea7u. Qu\u00e1 tr\u00ecnh extract n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1edfi c\u00e1c Linux tool nh\u01b0: cpio ho\u1eb7c pax. Trong h\u01b0\u1edbng d\u1eabn c\u1ee7a Xilinx s\u1eed d\u1ee5ng pax \u0111\u1ec3 th\u00e1o d\u1ee1 rootfs.","title":"CPIO"},{"location":"projects/zedboard/zedboard/#file-system-format-fat32-va-ext4","text":"File system l\u00e0 c\u00e1ch m\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng file \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c tr\u00ean c\u00e1c b\u1ed9 nh\u1edb l\u01b0u tr\u1eef. C\u00e1c b\u1ed9 nh\u1edb l\u01b0u tr\u1eef c\u00f3 th\u1ec3 l\u00e0: disk file system ho\u1eb7c flash file system . Fat32 v\u00e0 ext4 l\u00e0 t\u00ean c\u1ee7a c\u00e1c d\u1ea1ng file system \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c ph\u1ed5 bi\u1ebfn tr\u00ean c\u00e1c d\u00f2ng disk file system nh\u01b0 SD Card trong b\u00e0i vi\u1ebft n\u00e0y l\u00e0 m\u1ed9t v\u00ed d\u1ee5. Ngo\u00e0i ra trong qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c v\u1edbi Rootfs c\u1ee7a zynq c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ebfn JFFS2 format l\u00e0 m\u1ed9t \u0111\u1ecbnh d\u1ea1ng file system s\u1eed d\u1ee5ng cho c\u00e1c b\u1ed9 nh\u1edb flash.","title":"File system format: fat32 v\u00e0 ext4."},{"location":"technote/makefile/makefile/","text":"Make system in Linux Original Note T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 chung v\u1ec1 Makefile, trong \u0111\u00f3 nh\u1eafc \u0111\u1ebfn c\u00e1c kh\u00e1i ni\u1ec7m quan tr\u1ecdng \u0111\u1ec3 c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c c\u00e1c Makefile ph\u1ee9c t\u1ea1p. make Kh\u00e1i ni\u1ec7m \"make\" l\u00e0 m\u1ed9t \"build tool\" \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1ecdi \u0111\u1ebfn c\u00e1c th\u00e0nh ph\u1ea7n trong m\u1ed9t toolchain (nh\u01b0 compiler, linker) \u0111\u1ec3 build ra executable programs t\u1eeb source code. \"make\" t\u1ef1 \u0111\u1ed9ng ph\u00e1t hi\u1ec7n \u0111\u01b0\u1ee3c ph\u1ea7n n\u00e0o c\u1ee7a source code \u0111\u01b0\u1ee3c s\u1eeda \u0111\u1ed5i \u0111\u1ec3 ti\u1ebfn h\u00e0nh build l\u1ea1i c\u1ee5c b\u1ed9 t\u1eebng b\u1ed9 ph\u1eadn \u0111\u00f3. Tr\u00e1nh \u0111\u01b0\u1ee3c tr\u01b0\u1eddng h\u1ee3p ph\u1ea3i build l\u1ea1i to\u00e0n b\u1ed9 h\u1ec7 th\u1ed1ng khi ch\u1ec9 m\u1ed9t ph\u1ea7n \u0111\u01b0\u1ee3c thay \u0111\u1ed5i. \"make\" c\u1ea7n m\u1ed9t file \u0111\u1eb7c bi\u1ec7t \u0111\u1ec3 m\u00f4 t\u1ea3 c\u00e1c b\u01b0\u1edbc \u0111\u1ec3 build ra image, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0: Makefile. Th\u00f4ng th\u01b0\u1eddng khi \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ebfn, \"make\" s\u1ebd t\u00ecm ki\u1ebfm trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i c\u00e1c t\u00ean file nh\u01b0 sau: makefile, Makefile ho\u1eb7c GNUmakefile. Trong tr\u01b0\u1eddng h\u1ee3p makefile kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1eb7t theo chu\u1ea9n tr\u00ean, khai b\u00e1o makefile v\u1edbi \"make\" b\u1eb1ng ch\u1ec9 d\u1eabn \u2013f filename> ho\u1eb7c \u2013file= name>. Makefile Makefile l\u00e0 t\u1eadp h\u1ee3p c\u00e1c \u0111o\u1ea1n l\u1ec7nh m\u00f4 t\u1ea3 cho \"make\" bi\u1ebft ph\u1ea3i l\u00e0m g\u00ec \u0111\u1ec3 build ch\u01b0\u01a1ng tr\u00ecnh. C\u00e1c \u0111o\u1ea1n l\u1ec7nh m\u00f4 t\u1ea3 n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Rules. Rules M\u1ed9t Rules c\u00f3 d\u1ea1ng nh\u01b0 sau target \u2026 : prerequisites \u2026 recipe \u2026 \u2026 Target: th\u00f4ng th\u01b0\u1eddng l\u00e0 \u0111\u1ea7u ra (executable ho\u1eb7c object file) c\u1ee7a make. Ngo\u00e0i ra trong make \u0111\u1ecbnh ngh\u0129a th\u00eam m\u1ed9t lo\u1ea1i target \u0111\u1eb7c bi\u1ec7t: Phony Targets. M\u1ed9t target \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a out-of-date khi: Target \u0111\u00f3 kh\u00f4ng t\u1ed3n t\u1ea1i. C\u00e1c prerequisites b\u1ecb thay \u0111\u1ed5i. Implicit Rules \u0110\u1ec3 thu\u1eadn ti\u1ec7n cho ng\u01b0\u1eddi d\u00f9ng c\u0169ng nh\u01b0 l\u00e0m \u0111\u01a1n gi\u1ea3n Makefile, \"make\" \u0111\u1ecbnh ngh\u0129a c\u00e1c Implicit Rules . Trong m\u1ed9t s\u1ed1 Rules, n\u1ebfu recipe kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a, \"make\" s\u1ebd th\u1ef1c hi\u1ec7n build theo m\u1ed9t s\u1ed1 lu\u1eadt ng\u1ea7m \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc. V\u00ed d\u1ee5 nh\u01b0 khi rule c\u00f3 d\u1ea1ng main: main.c Ho\u1eb7c \u0111\u01a1n gi\u1ea3n h\u01a1n n\u1eefa main: Trong rule tr\u00ean kh\u00f4ng m\u00f4 t\u1ea3 recipe \u0111\u1ec3 \"make\" c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh build, do \u0111\u00f3 \"make\" s\u1eed d\u1ee5ng implicit rule khi build v\u1edbi C source v\u00e0 s\u1ebd g\u1ecdi \u0111\u1ebfn: cc main.c \u2013o main Trong \u0111\u00f3 cc l\u00e0 system compiler. Variables Bi\u1ebfn (ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 g\u1ecdi l\u00e0 macro) \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong Makefile \u0111\u1ec3 \u0111\u1ea1i di\u1ec7n cho m\u1ed9t chu\u1ed7i k\u00fd t\u1ef1. Trong Makefile c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c Automatic Variables . $@: l\u00e0 target c\u1ee7a rules $ : l\u00e0 t\u00ean c\u1ee7a prerequisites $^: t\u00ean c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c prerequisites \u0111\u01b0\u1ee3c c\u00e1c nhau b\u1eb1ng d\u1ea5u c\u00e1ch tr\u1eafng.","title":"Makefile"},{"location":"technote/makefile/makefile/#make-system-in-linux","text":"Original Note T\u00e0i li\u1ec7u n\u00e0y m\u00f4 t\u1ea3 chung v\u1ec1 Makefile, trong \u0111\u00f3 nh\u1eafc \u0111\u1ebfn c\u00e1c kh\u00e1i ni\u1ec7m quan tr\u1ecdng \u0111\u1ec3 c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c c\u00e1c Makefile ph\u1ee9c t\u1ea1p.","title":"Make system in Linux"},{"location":"technote/makefile/makefile/#make","text":"","title":"make"},{"location":"technote/makefile/makefile/#khai-niem","text":"\"make\" l\u00e0 m\u1ed9t \"build tool\" \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1ecdi \u0111\u1ebfn c\u00e1c th\u00e0nh ph\u1ea7n trong m\u1ed9t toolchain (nh\u01b0 compiler, linker) \u0111\u1ec3 build ra executable programs t\u1eeb source code. \"make\" t\u1ef1 \u0111\u1ed9ng ph\u00e1t hi\u1ec7n \u0111\u01b0\u1ee3c ph\u1ea7n n\u00e0o c\u1ee7a source code \u0111\u01b0\u1ee3c s\u1eeda \u0111\u1ed5i \u0111\u1ec3 ti\u1ebfn h\u00e0nh build l\u1ea1i c\u1ee5c b\u1ed9 t\u1eebng b\u1ed9 ph\u1eadn \u0111\u00f3. Tr\u00e1nh \u0111\u01b0\u1ee3c tr\u01b0\u1eddng h\u1ee3p ph\u1ea3i build l\u1ea1i to\u00e0n b\u1ed9 h\u1ec7 th\u1ed1ng khi ch\u1ec9 m\u1ed9t ph\u1ea7n \u0111\u01b0\u1ee3c thay \u0111\u1ed5i. \"make\" c\u1ea7n m\u1ed9t file \u0111\u1eb7c bi\u1ec7t \u0111\u1ec3 m\u00f4 t\u1ea3 c\u00e1c b\u01b0\u1edbc \u0111\u1ec3 build ra image, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0: Makefile. Th\u00f4ng th\u01b0\u1eddng khi \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ebfn, \"make\" s\u1ebd t\u00ecm ki\u1ebfm trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i c\u00e1c t\u00ean file nh\u01b0 sau: makefile, Makefile ho\u1eb7c GNUmakefile. Trong tr\u01b0\u1eddng h\u1ee3p makefile kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1eb7t theo chu\u1ea9n tr\u00ean, khai b\u00e1o makefile v\u1edbi \"make\" b\u1eb1ng ch\u1ec9 d\u1eabn \u2013f filename> ho\u1eb7c \u2013file= name>.","title":"Kh\u00e1i ni\u1ec7m"},{"location":"technote/makefile/makefile/#makefile","text":"Makefile l\u00e0 t\u1eadp h\u1ee3p c\u00e1c \u0111o\u1ea1n l\u1ec7nh m\u00f4 t\u1ea3 cho \"make\" bi\u1ebft ph\u1ea3i l\u00e0m g\u00ec \u0111\u1ec3 build ch\u01b0\u01a1ng tr\u00ecnh. C\u00e1c \u0111o\u1ea1n l\u1ec7nh m\u00f4 t\u1ea3 n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Rules.","title":"Makefile"},{"location":"technote/makefile/makefile/#rules","text":"M\u1ed9t Rules c\u00f3 d\u1ea1ng nh\u01b0 sau target \u2026 : prerequisites \u2026 recipe \u2026 \u2026 Target: th\u00f4ng th\u01b0\u1eddng l\u00e0 \u0111\u1ea7u ra (executable ho\u1eb7c object file) c\u1ee7a make. Ngo\u00e0i ra trong make \u0111\u1ecbnh ngh\u0129a th\u00eam m\u1ed9t lo\u1ea1i target \u0111\u1eb7c bi\u1ec7t: Phony Targets. M\u1ed9t target \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a out-of-date khi: Target \u0111\u00f3 kh\u00f4ng t\u1ed3n t\u1ea1i. C\u00e1c prerequisites b\u1ecb thay \u0111\u1ed5i.","title":"Rules"},{"location":"technote/makefile/makefile/#implicit-rules","text":"\u0110\u1ec3 thu\u1eadn ti\u1ec7n cho ng\u01b0\u1eddi d\u00f9ng c\u0169ng nh\u01b0 l\u00e0m \u0111\u01a1n gi\u1ea3n Makefile, \"make\" \u0111\u1ecbnh ngh\u0129a c\u00e1c Implicit Rules . Trong m\u1ed9t s\u1ed1 Rules, n\u1ebfu recipe kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a, \"make\" s\u1ebd th\u1ef1c hi\u1ec7n build theo m\u1ed9t s\u1ed1 lu\u1eadt ng\u1ea7m \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc. V\u00ed d\u1ee5 nh\u01b0 khi rule c\u00f3 d\u1ea1ng main: main.c Ho\u1eb7c \u0111\u01a1n gi\u1ea3n h\u01a1n n\u1eefa main: Trong rule tr\u00ean kh\u00f4ng m\u00f4 t\u1ea3 recipe \u0111\u1ec3 \"make\" c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh build, do \u0111\u00f3 \"make\" s\u1eed d\u1ee5ng implicit rule khi build v\u1edbi C source v\u00e0 s\u1ebd g\u1ecdi \u0111\u1ebfn: cc main.c \u2013o main Trong \u0111\u00f3 cc l\u00e0 system compiler.","title":"Implicit Rules"},{"location":"technote/makefile/makefile/#variables","text":"Bi\u1ebfn (ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 g\u1ecdi l\u00e0 macro) \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong Makefile \u0111\u1ec3 \u0111\u1ea1i di\u1ec7n cho m\u1ed9t chu\u1ed7i k\u00fd t\u1ef1. Trong Makefile c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c Automatic Variables . $@: l\u00e0 target c\u1ee7a rules $ : l\u00e0 t\u00ean c\u1ee7a prerequisites $^: t\u00ean c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c prerequisites \u0111\u01b0\u1ee3c c\u00e1c nhau b\u1eb1ng d\u1ea5u c\u00e1ch tr\u1eafng.","title":"Variables"},{"location":"technote/markdown/markdown/","text":"Markdown Language Markdown is used for writing this website. So, the first thing I need to learn is about Markdown Language. About Markdown Figure 1. Markdown icon lightweight markup language was created by John Gruber in 2004 Basic Syntax This section notes about Markdown basic syntax. Insert a picture in Markdown: ![picture_name](direction_to_picture) Insert a hyperlink: [Name](Link) . Hyperlink is used in References in this note. Code and emphasize C syntax: int main() { printf( Hello world! ); return 0; } Quote (put ' ' before writing quote): This is example of block quote This is example of block quote Horizontal Rule: put a horizontal rule in doc by typing *** , see result below Task list (do not success by now) [x] Write the press release [ ] Update the website [ ] Contact the media Inserting a figure to docs: refer About Markdown in this page for example !!! note with \"admonition\" in mkdocs.yml add markdown_extensions: -admonition to mkdocs.yml file. Read more at Markdown Extentions Markdown Extentions Got information about markdown extentions at https://squidfunk.github.io/mkdocs-material/extensions/admonition/ PyMdown https://squidfunk.github.io/mkdocs-material/extensions/pymdown/ References The Markdown Guide - Matt Cone Markdown Guide - Website Basic writing and formatting syntax - GitHub Markdown Guide - Gitlab","title":"Markdown Language"},{"location":"technote/markdown/markdown/#markdown-language","text":"Markdown is used for writing this website. So, the first thing I need to learn is about Markdown Language.","title":"Markdown Language"},{"location":"technote/markdown/markdown/#about-markdown","text":"Figure 1. Markdown icon lightweight markup language was created by John Gruber in 2004","title":"About Markdown"},{"location":"technote/markdown/markdown/#basic-syntax","text":"This section notes about Markdown basic syntax. Insert a picture in Markdown: ![picture_name](direction_to_picture) Insert a hyperlink: [Name](Link) . Hyperlink is used in References in this note. Code and emphasize C syntax: int main() { printf( Hello world! ); return 0; } Quote (put ' ' before writing quote): This is example of block quote This is example of block quote Horizontal Rule: put a horizontal rule in doc by typing *** , see result below Task list (do not success by now) [x] Write the press release [ ] Update the website [ ] Contact the media Inserting a figure to docs: refer About Markdown in this page for example !!! note with \"admonition\" in mkdocs.yml add markdown_extensions: -admonition to mkdocs.yml file. Read more at Markdown Extentions","title":"Basic Syntax"},{"location":"technote/markdown/markdown/#markdown-extentions","text":"Got information about markdown extentions at https://squidfunk.github.io/mkdocs-material/extensions/admonition/","title":"Markdown Extentions"},{"location":"technote/markdown/markdown/#pymdown","text":"https://squidfunk.github.io/mkdocs-material/extensions/pymdown/","title":"PyMdown"},{"location":"technote/markdown/markdown/#references","text":"The Markdown Guide - Matt Cone Markdown Guide - Website Basic writing and formatting syntax - GitHub Markdown Guide - Gitlab","title":"References"},{"location":"technote/mkdocs/mkdocs-notes/","text":"MkDocs documentation This technote is built by Mkdocs . MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file (see Project Layout ). More detail about this tool at MKdocs . Others popular static site generator site platform: Pelican (suggested by Nguy\u1ec5n \u0110\u0103ng S\u01a1n - ESRC K53) Sphinx (I have tried to use, but faced errors - not fixed yet when publishing in Github Page) Getting started mkdocs new [project name] - Create a new project Deploy in Github Page This document will be published in Github Page . To do this, you need: Create a repository in github with name: vutang.github.io Clone this repo to local machine In local machine, use command: mkdocs gh-deploy --remote-branch master --config-file [directory to mkdocs.yml] Test with local webserver use mkdocs serve to run local web server in your browser, access http://127.0.0.1:8000 Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Support Themes The list of supported themes for Mkdocs https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes Readthedocs: readthedocs Material: material Readthedocs-DropDown: rtd-dropdown - trying but not really successful by now, need to figure out what happens Material Material is a theme for MkDocs , an excellent static site generator geared towards project documentation. It is built using Google's Material Design guidelines. To install Material theme for Mkdocs: sudo pip install mkdocs-material . Folow instruction in here . References Mkdocs Wiki","title":"Mkdocs Tool"},{"location":"technote/mkdocs/mkdocs-notes/#mkdocs-documentation","text":"This technote is built by Mkdocs . MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file (see Project Layout ). More detail about this tool at MKdocs . Others popular static site generator site platform: Pelican (suggested by Nguy\u1ec5n \u0110\u0103ng S\u01a1n - ESRC K53) Sphinx (I have tried to use, but faced errors - not fixed yet when publishing in Github Page)","title":"MkDocs documentation"},{"location":"technote/mkdocs/mkdocs-notes/#getting-started","text":"mkdocs new [project name] - Create a new project","title":"Getting started"},{"location":"technote/mkdocs/mkdocs-notes/#deploy-in-github-page","text":"This document will be published in Github Page . To do this, you need: Create a repository in github with name: vutang.github.io Clone this repo to local machine In local machine, use command: mkdocs gh-deploy --remote-branch master --config-file [directory to mkdocs.yml]","title":"Deploy in Github Page"},{"location":"technote/mkdocs/mkdocs-notes/#test-with-local-webserver","text":"use mkdocs serve to run local web server in your browser, access http://127.0.0.1:8000","title":"Test with local webserver"},{"location":"technote/mkdocs/mkdocs-notes/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"technote/mkdocs/mkdocs-notes/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"technote/mkdocs/mkdocs-notes/#support-themes","text":"The list of supported themes for Mkdocs https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes Readthedocs: readthedocs Material: material Readthedocs-DropDown: rtd-dropdown - trying but not really successful by now, need to figure out what happens","title":"Support Themes"},{"location":"technote/mkdocs/mkdocs-notes/#material","text":"Material is a theme for MkDocs , an excellent static site generator geared towards project documentation. It is built using Google's Material Design guidelines. To install Material theme for Mkdocs: sudo pip install mkdocs-material . Folow instruction in here .","title":"Material"},{"location":"technote/mkdocs/mkdocs-notes/#references","text":"Mkdocs Wiki","title":"References"},{"location":"technote/shellscript/shellscript/","text":"Shell Script References Shell Scripting Tutorial Syntax Array Handling array in shell script. rxPwr=(7 7 7) # declaring an array for i in 0 1 2 3 do rxPwr[$i]=$i # access element in array echo ${rxPwr[$i]} done Variable handle dpd_chan=$1 #Parsing value to variable from argument pa_chan=$((dpd_chan+1)) #Adding 1 Loop For for i in 0 1 2 3 do rxPwr[$i]=`dpdctl check $i | grep rx | awk {'print $4'}` printf %0.2f, ${rxPwr[$i]} $logdir done While while true; do # Do something here done Example: ADDR=0x43c40000 while [ $(($ADDR)) -lt $((0x43c00010)) ]; do VALUE=`peek $ADDR` printf 0x%08x\\t0x%08x\\n $ADDR $VALUE regdump.txt ADDR=$(($ADDR + 4)) done Condition state if [ $1 = all ]; then # Add code here fi Check if a file exist or not if [ -f $LOG_MON_FILE ]; then # Contents fi Print a string to output printf : print a string with format printf %0.2f, ${txCpl[$i]} $logdir printf 0x%08x $ADDR Passing Argurments $#: number of arguments $i: the i-th argument","title":"Shell Script"},{"location":"technote/shellscript/shellscript/#shell-script","text":"","title":"Shell Script"},{"location":"technote/shellscript/shellscript/#references","text":"Shell Scripting Tutorial","title":"References"},{"location":"technote/shellscript/shellscript/#syntax","text":"","title":"Syntax"},{"location":"technote/shellscript/shellscript/#array","text":"Handling array in shell script. rxPwr=(7 7 7) # declaring an array for i in 0 1 2 3 do rxPwr[$i]=$i # access element in array echo ${rxPwr[$i]} done","title":"Array"},{"location":"technote/shellscript/shellscript/#variable-handle","text":"dpd_chan=$1 #Parsing value to variable from argument pa_chan=$((dpd_chan+1)) #Adding 1","title":"Variable handle"},{"location":"technote/shellscript/shellscript/#loop","text":"For for i in 0 1 2 3 do rxPwr[$i]=`dpdctl check $i | grep rx | awk {'print $4'}` printf %0.2f, ${rxPwr[$i]} $logdir done While while true; do # Do something here done Example: ADDR=0x43c40000 while [ $(($ADDR)) -lt $((0x43c00010)) ]; do VALUE=`peek $ADDR` printf 0x%08x\\t0x%08x\\n $ADDR $VALUE regdump.txt ADDR=$(($ADDR + 4)) done","title":"Loop"},{"location":"technote/shellscript/shellscript/#condition-state","text":"if [ $1 = all ]; then # Add code here fi Check if a file exist or not if [ -f $LOG_MON_FILE ]; then # Contents fi","title":"Condition state"},{"location":"technote/shellscript/shellscript/#print-a-string-to-output","text":"printf : print a string with format printf %0.2f, ${txCpl[$i]} $logdir printf 0x%08x $ADDR","title":"Print a string to output"},{"location":"technote/shellscript/shellscript/#passing-argurments","text":"$#: number of arguments $i: the i-th argument","title":"Passing Argurments"},{"location":"technote/tips/tips/","text":"SSH for remote control Secure Shell (SSH) is a cryptographic network protocol for operating network services securely over an unsecured network. Typical applications include remote command-line login and remote command execution , but any network service can be secured with SSH. Advanced options Disable host key checking: ssh -o StrictHostKeyChecking=no Redirect known host file (~/.ssh/known_hosts) to /dev/null: ssh -o UserKnownHostsFile=/dev/null Execute scripts in remote machine: ssh user@host 'ENDSSH' #commands to run on remote host ENDSSH Example ssh root@10.61.61.195 \"echo 1 ~/test\" . This command will remote to root@10.61.61.195 machine and then execute \"echo 1 ~/test\" Auto-generate password for ssh echo #!/bin/sh /tmp/genpass.sh echo echo $pass /tmp/genpass.sh export SSH_ASKPASS= /tmp/genpass.sh export DISPLAY= setsid ssh root@10.61.61.195 ? setsid: what is this? See more at Bash Script SSH Automation Without a Password Prompt . Example commands timeout 20 setsid ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null References More information about SSH config can be found at https://linux.die.net/man/5/ssh_config TFTP Server Trivial File Transfer Protocol (TFTP) is a simple lockstep File Transfer Protocol which allows a client to get a file from or put a file onto a remote host ( Wiki ). TFTP uses UDP as its transport protocol. Install TFTP server With Ubuntu machine, install tftp by installing following packages: sudo apt-get install xinetd tftpd tftp Build tftp server for embedded system: How to build? Configure TFTP server Create /etc/xinetd.d/tftp and put this entry service tftp { protocol = udp port = 69 socket_type = dgram wait = yes user = nobody server = /usr/sbin/in.tftpd server_args = /tftpboot disable = no } Create a folder /tftpboot this should match whatever you gave in server_args. mostly it will be tftpboot sudo mkdir /tftpboot sudo chmod -R 777 /tftpboot sudo chown -R nobody /tftpboot Restart the xinetd service. newer systems: sudo service xinetd restart older systems: sudo /etc/init.d/xinetd restart Testing tftp server Create a file named test with some content in /tftpboot path of the tftp server. Obtain the ip address of the tftp server using ifconfig command. Now in some other system (client - which want to get file) follow the following steps. tftp 192.168.1.2 # tftp server ip tftp get test Sent 159 bytes in 0.0 seconds tftp quit cat test BusyBox","title":"Tips"},{"location":"technote/tips/tips/#ssh-for-remote-control","text":"Secure Shell (SSH) is a cryptographic network protocol for operating network services securely over an unsecured network. Typical applications include remote command-line login and remote command execution , but any network service can be secured with SSH. Advanced options Disable host key checking: ssh -o StrictHostKeyChecking=no Redirect known host file (~/.ssh/known_hosts) to /dev/null: ssh -o UserKnownHostsFile=/dev/null Execute scripts in remote machine: ssh user@host 'ENDSSH' #commands to run on remote host ENDSSH Example ssh root@10.61.61.195 \"echo 1 ~/test\" . This command will remote to root@10.61.61.195 machine and then execute \"echo 1 ~/test\" Auto-generate password for ssh echo #!/bin/sh /tmp/genpass.sh echo echo $pass /tmp/genpass.sh export SSH_ASKPASS= /tmp/genpass.sh export DISPLAY= setsid ssh root@10.61.61.195 ? setsid: what is this? See more at Bash Script SSH Automation Without a Password Prompt . Example commands timeout 20 setsid ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null References More information about SSH config can be found at https://linux.die.net/man/5/ssh_config","title":"SSH for remote control"},{"location":"technote/tips/tips/#tftp-server","text":"Trivial File Transfer Protocol (TFTP) is a simple lockstep File Transfer Protocol which allows a client to get a file from or put a file onto a remote host ( Wiki ). TFTP uses UDP as its transport protocol. Install TFTP server With Ubuntu machine, install tftp by installing following packages: sudo apt-get install xinetd tftpd tftp Build tftp server for embedded system: How to build? Configure TFTP server Create /etc/xinetd.d/tftp and put this entry service tftp { protocol = udp port = 69 socket_type = dgram wait = yes user = nobody server = /usr/sbin/in.tftpd server_args = /tftpboot disable = no } Create a folder /tftpboot this should match whatever you gave in server_args. mostly it will be tftpboot sudo mkdir /tftpboot sudo chmod -R 777 /tftpboot sudo chown -R nobody /tftpboot Restart the xinetd service. newer systems: sudo service xinetd restart older systems: sudo /etc/init.d/xinetd restart Testing tftp server Create a file named test with some content in /tftpboot path of the tftp server. Obtain the ip address of the tftp server using ifconfig command. Now in some other system (client - which want to get file) follow the following steps. tftp 192.168.1.2 # tftp server ip tftp get test Sent 159 bytes in 0.0 seconds tftp quit cat test","title":"TFTP Server"},{"location":"technote/tips/tips/#busybox","text":"","title":"BusyBox"},{"location":"technote/version_control/verctl/","text":"Version Control Information Version Control Client-Server Model In the client-server model, developers use a shared single repository. Subversion - SVN is a software versioning and revision control system distributed as open source under the Apache License. IBM Rational Team Concert Distributed Model In the distributed approach, each developer works directly with his or her own local repository, and changes are shared between repositories as a separate step. Git and Mercurcial (/m\u025c\u02d0r\u02c8kj\u028ari\u0259l/) are most popular version control tool. Web-based version control hosting services Github Gitlab Bitbucket Comparison from wiki: https://en.wikipedia.org/wiki/Comparison_of_source-code-hosting_facilities","title":"Version Control"},{"location":"technote/version_control/verctl/#version-control-information","text":"","title":"Version Control Information"},{"location":"technote/version_control/verctl/#version-control","text":"","title":"Version Control"},{"location":"technote/version_control/verctl/#client-server-model","text":"In the client-server model, developers use a shared single repository. Subversion - SVN is a software versioning and revision control system distributed as open source under the Apache License. IBM Rational Team Concert","title":"Client-Server Model"},{"location":"technote/version_control/verctl/#distributed-model","text":"In the distributed approach, each developer works directly with his or her own local repository, and changes are shared between repositories as a separate step. Git and Mercurcial (/m\u025c\u02d0r\u02c8kj\u028ari\u0259l/) are most popular version control tool.","title":"Distributed Model"},{"location":"technote/version_control/verctl/#web-based-version-control-hosting-services","text":"Github Gitlab Bitbucket Comparison from wiki: https://en.wikipedia.org/wiki/Comparison_of_source-code-hosting_facilities","title":"Web-based version control hosting services"}]}